// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package miner_core

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"github.com/qcq1/rpc_miner_core/kitex_gen/common"
	"github.com/qcq1/rpc_miner_core/kitex_gen/domain"
)

type QueryJobListReq struct {
	PageNum        int64             `thrift:"page_num,1,required" frugal:"1,required,i64" json:"page_num"`
	PageSize       int64             `thrift:"page_size,2,required" frugal:"2,required,i64" json:"page_size"`
	OrderBy        *domain.JobColumn `thrift:"order_by,3,optional" frugal:"3,optional,JobColumn" json:"order_by,omitempty"`
	Order          *common.Order     `thrift:"order,4,optional" frugal:"4,optional,Order" json:"order,omitempty"`
	Id             *int64            `thrift:"id,5,optional" frugal:"5,optional,i64" json:"id,omitempty"`
	CreatedBy      *int64            `thrift:"created_by,6,optional" frugal:"6,optional,i64" json:"created_by,omitempty"`
	CreatedAtStart *int64            `thrift:"created_at_start,7,optional" frugal:"7,optional,i64" json:"created_at_start,omitempty"`
	CreatedAtEnd   *int64            `thrift:"created_at_end,8,optional" frugal:"8,optional,i64" json:"created_at_end,omitempty"`
}

func NewQueryJobListReq() *QueryJobListReq {
	return &QueryJobListReq{}
}

func (p *QueryJobListReq) InitDefault() {
}

func (p *QueryJobListReq) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryJobListReq) GetPageSize() (v int64) {
	return p.PageSize
}

var QueryJobListReq_OrderBy_DEFAULT domain.JobColumn

func (p *QueryJobListReq) GetOrderBy() (v domain.JobColumn) {
	if !p.IsSetOrderBy() {
		return QueryJobListReq_OrderBy_DEFAULT
	}
	return *p.OrderBy
}

var QueryJobListReq_Order_DEFAULT common.Order

func (p *QueryJobListReq) GetOrder() (v common.Order) {
	if !p.IsSetOrder() {
		return QueryJobListReq_Order_DEFAULT
	}
	return *p.Order
}

var QueryJobListReq_Id_DEFAULT int64

func (p *QueryJobListReq) GetId() (v int64) {
	if !p.IsSetId() {
		return QueryJobListReq_Id_DEFAULT
	}
	return *p.Id
}

var QueryJobListReq_CreatedBy_DEFAULT int64

func (p *QueryJobListReq) GetCreatedBy() (v int64) {
	if !p.IsSetCreatedBy() {
		return QueryJobListReq_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var QueryJobListReq_CreatedAtStart_DEFAULT int64

func (p *QueryJobListReq) GetCreatedAtStart() (v int64) {
	if !p.IsSetCreatedAtStart() {
		return QueryJobListReq_CreatedAtStart_DEFAULT
	}
	return *p.CreatedAtStart
}

var QueryJobListReq_CreatedAtEnd_DEFAULT int64

func (p *QueryJobListReq) GetCreatedAtEnd() (v int64) {
	if !p.IsSetCreatedAtEnd() {
		return QueryJobListReq_CreatedAtEnd_DEFAULT
	}
	return *p.CreatedAtEnd
}
func (p *QueryJobListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryJobListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryJobListReq) SetOrderBy(val *domain.JobColumn) {
	p.OrderBy = val
}
func (p *QueryJobListReq) SetOrder(val *common.Order) {
	p.Order = val
}
func (p *QueryJobListReq) SetId(val *int64) {
	p.Id = val
}
func (p *QueryJobListReq) SetCreatedBy(val *int64) {
	p.CreatedBy = val
}
func (p *QueryJobListReq) SetCreatedAtStart(val *int64) {
	p.CreatedAtStart = val
}
func (p *QueryJobListReq) SetCreatedAtEnd(val *int64) {
	p.CreatedAtEnd = val
}

var fieldIDToName_QueryJobListReq = map[int16]string{
	1: "page_num",
	2: "page_size",
	3: "order_by",
	4: "order",
	5: "id",
	6: "created_by",
	7: "created_at_start",
	8: "created_at_end",
}

func (p *QueryJobListReq) IsSetOrderBy() bool {
	return p.OrderBy != nil
}

func (p *QueryJobListReq) IsSetOrder() bool {
	return p.Order != nil
}

func (p *QueryJobListReq) IsSetId() bool {
	return p.Id != nil
}

func (p *QueryJobListReq) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *QueryJobListReq) IsSetCreatedAtStart() bool {
	return p.CreatedAtStart != nil
}

func (p *QueryJobListReq) IsSetCreatedAtEnd() bool {
	return p.CreatedAtEnd != nil
}

func (p *QueryJobListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryJobListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryJobListReq[fieldId]))
}

func (p *QueryJobListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNum = _field
	return nil
}
func (p *QueryJobListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryJobListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *domain.JobColumn
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := domain.JobColumn(v)
		_field = &tmp
	}
	p.OrderBy = _field
	return nil
}
func (p *QueryJobListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *common.Order
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := common.Order(v)
		_field = &tmp
	}
	p.Order = _field
	return nil
}
func (p *QueryJobListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *QueryJobListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *QueryJobListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAtStart = _field
	return nil
}
func (p *QueryJobListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAtEnd = _field
	return nil
}

func (p *QueryJobListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryJobListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryJobListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryJobListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryJobListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBy() {
		if err = oprot.WriteFieldBegin("order_by", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.OrderBy)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryJobListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err = oprot.WriteFieldBegin("order", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Order)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryJobListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *QueryJobListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *QueryJobListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAtStart() {
		if err = oprot.WriteFieldBegin("created_at_start", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAtStart); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *QueryJobListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAtEnd() {
		if err = oprot.WriteFieldBegin("created_at_end", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAtEnd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *QueryJobListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryJobListReq(%+v)", *p)

}

func (p *QueryJobListReq) DeepEqual(ano *QueryJobListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrderBy) {
		return false
	}
	if !p.Field4DeepEqual(ano.Order) {
		return false
	}
	if !p.Field5DeepEqual(ano.Id) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreatedAtStart) {
		return false
	}
	if !p.Field8DeepEqual(ano.CreatedAtEnd) {
		return false
	}
	return true
}

func (p *QueryJobListReq) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field3DeepEqual(src *domain.JobColumn) bool {

	if p.OrderBy == src {
		return true
	} else if p.OrderBy == nil || src == nil {
		return false
	}
	if *p.OrderBy != *src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field4DeepEqual(src *common.Order) bool {

	if p.Order == src {
		return true
	} else if p.Order == nil || src == nil {
		return false
	}
	if *p.Order != *src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field5DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field6DeepEqual(src *int64) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if *p.CreatedBy != *src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field7DeepEqual(src *int64) bool {

	if p.CreatedAtStart == src {
		return true
	} else if p.CreatedAtStart == nil || src == nil {
		return false
	}
	if *p.CreatedAtStart != *src {
		return false
	}
	return true
}
func (p *QueryJobListReq) Field8DeepEqual(src *int64) bool {

	if p.CreatedAtEnd == src {
		return true
	} else if p.CreatedAtEnd == nil || src == nil {
		return false
	}
	if *p.CreatedAtEnd != *src {
		return false
	}
	return true
}

type QueryJobListResp struct {
	JobList []*domain.Job `thrift:"job_list,1,required" frugal:"1,required,list<domain.Job>" json:"job_list"`
	Total   int64         `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryJobListResp() *QueryJobListResp {
	return &QueryJobListResp{}
}

func (p *QueryJobListResp) InitDefault() {
}

func (p *QueryJobListResp) GetJobList() (v []*domain.Job) {
	return p.JobList
}

func (p *QueryJobListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryJobListResp) SetJobList(val []*domain.Job) {
	p.JobList = val
}
func (p *QueryJobListResp) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_QueryJobListResp = map[int16]string{
	1: "job_list",
	2: "total",
}

func (p *QueryJobListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobList bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJobList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryJobListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryJobListResp[fieldId]))
}

func (p *QueryJobListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*domain.Job, 0, size)
	values := make([]domain.Job, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.JobList = _field
	return nil
}
func (p *QueryJobListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *QueryJobListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryJobListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryJobListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JobList)); err != nil {
		return err
	}
	for _, v := range p.JobList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryJobListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryJobListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryJobListResp(%+v)", *p)

}

func (p *QueryJobListResp) DeepEqual(ano *QueryJobListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobList) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *QueryJobListResp) Field1DeepEqual(src []*domain.Job) bool {

	if len(p.JobList) != len(src) {
		return false
	}
	for i, v := range p.JobList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryJobListResp) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type MinerCore interface {
	QueryJobList(ctx context.Context, req *QueryJobListReq) (r *QueryJobListResp, err error)
}

type MinerCoreQueryJobListArgs struct {
	Req *QueryJobListReq `thrift:"req,1" frugal:"1,default,QueryJobListReq" json:"req"`
}

func NewMinerCoreQueryJobListArgs() *MinerCoreQueryJobListArgs {
	return &MinerCoreQueryJobListArgs{}
}

func (p *MinerCoreQueryJobListArgs) InitDefault() {
}

var MinerCoreQueryJobListArgs_Req_DEFAULT *QueryJobListReq

func (p *MinerCoreQueryJobListArgs) GetReq() (v *QueryJobListReq) {
	if !p.IsSetReq() {
		return MinerCoreQueryJobListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreQueryJobListArgs) SetReq(val *QueryJobListReq) {
	p.Req = val
}

var fieldIDToName_MinerCoreQueryJobListArgs = map[int16]string{
	1: "req",
}

func (p *MinerCoreQueryJobListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreQueryJobListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MinerCoreQueryJobListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MinerCoreQueryJobListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryJobListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MinerCoreQueryJobListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryJobList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MinerCoreQueryJobListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MinerCoreQueryJobListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryJobListArgs(%+v)", *p)

}

func (p *MinerCoreQueryJobListArgs) DeepEqual(ano *MinerCoreQueryJobListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MinerCoreQueryJobListArgs) Field1DeepEqual(src *QueryJobListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MinerCoreQueryJobListResult struct {
	Success *QueryJobListResp `thrift:"success,0,optional" frugal:"0,optional,QueryJobListResp" json:"success,omitempty"`
}

func NewMinerCoreQueryJobListResult() *MinerCoreQueryJobListResult {
	return &MinerCoreQueryJobListResult{}
}

func (p *MinerCoreQueryJobListResult) InitDefault() {
}

var MinerCoreQueryJobListResult_Success_DEFAULT *QueryJobListResp

func (p *MinerCoreQueryJobListResult) GetSuccess() (v *QueryJobListResp) {
	if !p.IsSetSuccess() {
		return MinerCoreQueryJobListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreQueryJobListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryJobListResp)
}

var fieldIDToName_MinerCoreQueryJobListResult = map[int16]string{
	0: "success",
}

func (p *MinerCoreQueryJobListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreQueryJobListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MinerCoreQueryJobListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MinerCoreQueryJobListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryJobListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MinerCoreQueryJobListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryJobList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MinerCoreQueryJobListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MinerCoreQueryJobListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryJobListResult(%+v)", *p)

}

func (p *MinerCoreQueryJobListResult) DeepEqual(ano *MinerCoreQueryJobListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MinerCoreQueryJobListResult) Field0DeepEqual(src *QueryJobListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
