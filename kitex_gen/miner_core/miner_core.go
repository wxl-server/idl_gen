// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package miner_core

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type InputElType int64

const (
	InputElType_Unknown  InputElType = 0
	InputElType_InputTag InputElType = 1
	InputElType_Input    InputElType = 2
	InputElType_Select   InputElType = 3
)

func (p InputElType) String() string {
	switch p {
	case InputElType_Unknown:
		return "Unknown"
	case InputElType_InputTag:
		return "InputTag"
	case InputElType_Input:
		return "Input"
	case InputElType_Select:
		return "Select"
	}
	return "<UNSET>"
}

func InputElTypeFromString(s string) (InputElType, error) {
	switch s {
	case "Unknown":
		return InputElType_Unknown, nil
	case "InputTag":
		return InputElType_InputTag, nil
	case "Input":
		return InputElType_Input, nil
	case "Select":
		return InputElType_Select, nil
	}
	return InputElType(0), fmt.Errorf("not a valid InputElType string")
}

func InputElTypePtr(v InputElType) *InputElType { return &v }
func (p *InputElType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = InputElType(result.Int64)
	return
}

func (p *InputElType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Order int64

const (
	Order_DESC Order = 0
	Order_ASC  Order = 1
)

func (p Order) String() string {
	switch p {
	case Order_DESC:
		return "DESC"
	case Order_ASC:
		return "ASC"
	}
	return "<UNSET>"
}

func OrderFromString(s string) (Order, error) {
	switch s {
	case "DESC":
		return Order_DESC, nil
	case "ASC":
		return Order_ASC, nil
	}
	return Order(0), fmt.Errorf("not a valid Order string")
}

func OrderPtr(v Order) *Order { return &v }
func (p *Order) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Order(result.Int64)
	return
}

func (p *Order) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type JobColumn int64

const (
	JobColumn_ID          JobColumn = 0
	JobColumn_NAME        JobColumn = 1
	JobColumn_DESCRIPTION JobColumn = 2
	JobColumn_CREATED_BY  JobColumn = 3
	JobColumn_UPDATED_BY  JobColumn = 4
	JobColumn_CREATED_AT  JobColumn = 5
	JobColumn_UPDATED_AT  JobColumn = 6
	JobColumn_EXTRA       JobColumn = 7
)

func (p JobColumn) String() string {
	switch p {
	case JobColumn_ID:
		return "ID"
	case JobColumn_NAME:
		return "NAME"
	case JobColumn_DESCRIPTION:
		return "DESCRIPTION"
	case JobColumn_CREATED_BY:
		return "CREATED_BY"
	case JobColumn_UPDATED_BY:
		return "UPDATED_BY"
	case JobColumn_CREATED_AT:
		return "CREATED_AT"
	case JobColumn_UPDATED_AT:
		return "UPDATED_AT"
	case JobColumn_EXTRA:
		return "EXTRA"
	}
	return "<UNSET>"
}

func JobColumnFromString(s string) (JobColumn, error) {
	switch s {
	case "ID":
		return JobColumn_ID, nil
	case "NAME":
		return JobColumn_NAME, nil
	case "DESCRIPTION":
		return JobColumn_DESCRIPTION, nil
	case "CREATED_BY":
		return JobColumn_CREATED_BY, nil
	case "UPDATED_BY":
		return JobColumn_UPDATED_BY, nil
	case "CREATED_AT":
		return JobColumn_CREATED_AT, nil
	case "UPDATED_AT":
		return JobColumn_UPDATED_AT, nil
	case "EXTRA":
		return JobColumn_EXTRA, nil
	}
	return JobColumn(0), fmt.Errorf("not a valid JobColumn string")
}

func JobColumnPtr(v JobColumn) *JobColumn { return &v }
func (p *JobColumn) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = JobColumn(result.Int64)
	return
}

func (p *JobColumn) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TaskStatus int64

const (
	TaskStatus_Unknown TaskStatus = 0
	TaskStatus_Running TaskStatus = 1
	TaskStatus_Success TaskStatus = 2
	TaskStatus_Failed  TaskStatus = 3
)

func (p TaskStatus) String() string {
	switch p {
	case TaskStatus_Unknown:
		return "Unknown"
	case TaskStatus_Running:
		return "Running"
	case TaskStatus_Success:
		return "Success"
	case TaskStatus_Failed:
		return "Failed"
	}
	return "<UNSET>"
}

func TaskStatusFromString(s string) (TaskStatus, error) {
	switch s {
	case "Unknown":
		return TaskStatus_Unknown, nil
	case "Running":
		return TaskStatus_Running, nil
	case "Success":
		return TaskStatus_Success, nil
	case "Failed":
		return TaskStatus_Failed, nil
	}
	return TaskStatus(0), fmt.Errorf("not a valid TaskStatus string")
}

func TaskStatusPtr(v TaskStatus) *TaskStatus { return &v }
func (p *TaskStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TaskStatus(result.Int64)
	return
}

func (p *TaskStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SignUpReq struct {
	Email    string `thrift:"email,1,required" frugal:"1,required,string" json:"email"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewSignUpReq() *SignUpReq {
	return &SignUpReq{}
}

func (p *SignUpReq) InitDefault() {
}

func (p *SignUpReq) GetEmail() (v string) {
	return p.Email
}

func (p *SignUpReq) GetPassword() (v string) {
	return p.Password
}
func (p *SignUpReq) SetEmail(val string) {
	p.Email = val
}
func (p *SignUpReq) SetPassword(val string) {
	p.Password = val
}

func (p *SignUpReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignUpReq(%+v)", *p)
}

var fieldIDToName_SignUpReq = map[int16]string{
	1: "email",
	2: "password",
}

type SignUpResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewSignUpResp() *SignUpResp {
	return &SignUpResp{}
}

func (p *SignUpResp) InitDefault() {
}

func (p *SignUpResp) GetId() (v int64) {
	return p.Id
}
func (p *SignUpResp) SetId(val int64) {
	p.Id = val
}

func (p *SignUpResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignUpResp(%+v)", *p)
}

var fieldIDToName_SignUpResp = map[int16]string{
	1: "id",
}

type LoginReq struct {
	Email    string `thrift:"email,1,required" frugal:"1,required,string" json:"email"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetEmail() (v string) {
	return p.Email
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetEmail(val string) {
	p.Email = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "email",
	2: "password",
}

type LoginResp struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

func (p *LoginResp) GetToken() (v string) {
	return p.Token
}
func (p *LoginResp) SetToken(val string) {
	p.Token = val
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)
}

var fieldIDToName_LoginResp = map[int16]string{
	1: "token",
}

type QueryUserListReq struct {
}

func NewQueryUserListReq() *QueryUserListReq {
	return &QueryUserListReq{}
}

func (p *QueryUserListReq) InitDefault() {
}

func (p *QueryUserListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserListReq(%+v)", *p)
}

var fieldIDToName_QueryUserListReq = map[int16]string{}

type QueryUserListResp struct {
	UserList []*User `thrift:"user_list,1,required" frugal:"1,required,list<User>" json:"user_list"`
}

func NewQueryUserListResp() *QueryUserListResp {
	return &QueryUserListResp{}
}

func (p *QueryUserListResp) InitDefault() {
}

func (p *QueryUserListResp) GetUserList() (v []*User) {
	return p.UserList
}
func (p *QueryUserListResp) SetUserList(val []*User) {
	p.UserList = val
}

func (p *QueryUserListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserListResp(%+v)", *p)
}

var fieldIDToName_QueryUserListResp = map[int16]string{
	1: "user_list",
}

type QueryJobListReq struct {
	PageNum        int64      `thrift:"page_num,1,required" frugal:"1,required,i64" json:"page_num"`
	PageSize       int64      `thrift:"page_size,2,required" frugal:"2,required,i64" json:"page_size"`
	OrderBy        *JobColumn `thrift:"order_by,3,optional" frugal:"3,optional,JobColumn" json:"order_by,omitempty"`
	Order          *Order     `thrift:"order,4,optional" frugal:"4,optional,Order" json:"order,omitempty"`
	Id             *int64     `thrift:"id,5,optional" frugal:"5,optional,i64" json:"id,omitempty"`
	Name           *string    `thrift:"name,6,optional" frugal:"6,optional,string" json:"name,omitempty"`
	CreatedBy      *int64     `thrift:"created_by,7,optional" frugal:"7,optional,i64" json:"created_by,omitempty"`
	CreatedAtStart *int64     `thrift:"created_at_start,8,optional" frugal:"8,optional,i64" json:"created_at_start,omitempty"`
	CreatedAtEnd   *int64     `thrift:"created_at_end,9,optional" frugal:"9,optional,i64" json:"created_at_end,omitempty"`
}

func NewQueryJobListReq() *QueryJobListReq {
	return &QueryJobListReq{}
}

func (p *QueryJobListReq) InitDefault() {
}

func (p *QueryJobListReq) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryJobListReq) GetPageSize() (v int64) {
	return p.PageSize
}

var QueryJobListReq_OrderBy_DEFAULT JobColumn

func (p *QueryJobListReq) GetOrderBy() (v JobColumn) {
	if !p.IsSetOrderBy() {
		return QueryJobListReq_OrderBy_DEFAULT
	}
	return *p.OrderBy
}

var QueryJobListReq_Order_DEFAULT Order

func (p *QueryJobListReq) GetOrder() (v Order) {
	if !p.IsSetOrder() {
		return QueryJobListReq_Order_DEFAULT
	}
	return *p.Order
}

var QueryJobListReq_Id_DEFAULT int64

func (p *QueryJobListReq) GetId() (v int64) {
	if !p.IsSetId() {
		return QueryJobListReq_Id_DEFAULT
	}
	return *p.Id
}

var QueryJobListReq_Name_DEFAULT string

func (p *QueryJobListReq) GetName() (v string) {
	if !p.IsSetName() {
		return QueryJobListReq_Name_DEFAULT
	}
	return *p.Name
}

var QueryJobListReq_CreatedBy_DEFAULT int64

func (p *QueryJobListReq) GetCreatedBy() (v int64) {
	if !p.IsSetCreatedBy() {
		return QueryJobListReq_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var QueryJobListReq_CreatedAtStart_DEFAULT int64

func (p *QueryJobListReq) GetCreatedAtStart() (v int64) {
	if !p.IsSetCreatedAtStart() {
		return QueryJobListReq_CreatedAtStart_DEFAULT
	}
	return *p.CreatedAtStart
}

var QueryJobListReq_CreatedAtEnd_DEFAULT int64

func (p *QueryJobListReq) GetCreatedAtEnd() (v int64) {
	if !p.IsSetCreatedAtEnd() {
		return QueryJobListReq_CreatedAtEnd_DEFAULT
	}
	return *p.CreatedAtEnd
}
func (p *QueryJobListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryJobListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryJobListReq) SetOrderBy(val *JobColumn) {
	p.OrderBy = val
}
func (p *QueryJobListReq) SetOrder(val *Order) {
	p.Order = val
}
func (p *QueryJobListReq) SetId(val *int64) {
	p.Id = val
}
func (p *QueryJobListReq) SetName(val *string) {
	p.Name = val
}
func (p *QueryJobListReq) SetCreatedBy(val *int64) {
	p.CreatedBy = val
}
func (p *QueryJobListReq) SetCreatedAtStart(val *int64) {
	p.CreatedAtStart = val
}
func (p *QueryJobListReq) SetCreatedAtEnd(val *int64) {
	p.CreatedAtEnd = val
}

func (p *QueryJobListReq) IsSetOrderBy() bool {
	return p.OrderBy != nil
}

func (p *QueryJobListReq) IsSetOrder() bool {
	return p.Order != nil
}

func (p *QueryJobListReq) IsSetId() bool {
	return p.Id != nil
}

func (p *QueryJobListReq) IsSetName() bool {
	return p.Name != nil
}

func (p *QueryJobListReq) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *QueryJobListReq) IsSetCreatedAtStart() bool {
	return p.CreatedAtStart != nil
}

func (p *QueryJobListReq) IsSetCreatedAtEnd() bool {
	return p.CreatedAtEnd != nil
}

func (p *QueryJobListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryJobListReq(%+v)", *p)
}

var fieldIDToName_QueryJobListReq = map[int16]string{
	1: "page_num",
	2: "page_size",
	3: "order_by",
	4: "order",
	5: "id",
	6: "name",
	7: "created_by",
	8: "created_at_start",
	9: "created_at_end",
}

type QueryJobListResp struct {
	JobList []*Job `thrift:"job_list,1,required" frugal:"1,required,list<Job>" json:"job_list"`
	Total   int64  `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryJobListResp() *QueryJobListResp {
	return &QueryJobListResp{}
}

func (p *QueryJobListResp) InitDefault() {
}

func (p *QueryJobListResp) GetJobList() (v []*Job) {
	return p.JobList
}

func (p *QueryJobListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryJobListResp) SetJobList(val []*Job) {
	p.JobList = val
}
func (p *QueryJobListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryJobListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryJobListResp(%+v)", *p)
}

var fieldIDToName_QueryJobListResp = map[int16]string{
	1: "job_list",
	2: "total",
}

type CreateJobReq struct {
	Name        string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description *string `thrift:"description,2,optional" frugal:"2,optional,string" json:"description,omitempty"`
	Token       string  `thrift:"token,3,required" frugal:"3,required,string" json:"token"`
}

func NewCreateJobReq() *CreateJobReq {
	return &CreateJobReq{}
}

func (p *CreateJobReq) InitDefault() {
}

func (p *CreateJobReq) GetName() (v string) {
	return p.Name
}

var CreateJobReq_Description_DEFAULT string

func (p *CreateJobReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateJobReq_Description_DEFAULT
	}
	return *p.Description
}

func (p *CreateJobReq) GetToken() (v string) {
	return p.Token
}
func (p *CreateJobReq) SetName(val string) {
	p.Name = val
}
func (p *CreateJobReq) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateJobReq) SetToken(val string) {
	p.Token = val
}

func (p *CreateJobReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateJobReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateJobReq(%+v)", *p)
}

var fieldIDToName_CreateJobReq = map[int16]string{
	1: "name",
	2: "description",
	3: "token",
}

type CreateJobResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateJobResp() *CreateJobResp {
	return &CreateJobResp{}
}

func (p *CreateJobResp) InitDefault() {
}

func (p *CreateJobResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateJobResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateJobResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateJobResp(%+v)", *p)
}

var fieldIDToName_CreateJobResp = map[int16]string{
	1: "id",
}

type DeleteJobReq struct {
	Id    int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Token string `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewDeleteJobReq() *DeleteJobReq {
	return &DeleteJobReq{}
}

func (p *DeleteJobReq) InitDefault() {
}

func (p *DeleteJobReq) GetId() (v int64) {
	return p.Id
}

func (p *DeleteJobReq) GetToken() (v string) {
	return p.Token
}
func (p *DeleteJobReq) SetId(val int64) {
	p.Id = val
}
func (p *DeleteJobReq) SetToken(val string) {
	p.Token = val
}

func (p *DeleteJobReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteJobReq(%+v)", *p)
}

var fieldIDToName_DeleteJobReq = map[int16]string{
	1: "id",
	2: "token",
}

type DeleteJobResp struct {
}

func NewDeleteJobResp() *DeleteJobResp {
	return &DeleteJobResp{}
}

func (p *DeleteJobResp) InitDefault() {
}

func (p *DeleteJobResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteJobResp(%+v)", *p)
}

var fieldIDToName_DeleteJobResp = map[int16]string{}

type QueryIndicatorListReq struct {
}

func NewQueryIndicatorListReq() *QueryIndicatorListReq {
	return &QueryIndicatorListReq{}
}

func (p *QueryIndicatorListReq) InitDefault() {
}

func (p *QueryIndicatorListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryIndicatorListReq(%+v)", *p)
}

var fieldIDToName_QueryIndicatorListReq = map[int16]string{}

type QueryIndicatorListResp struct {
	Indicators []*FirstLevelIndicator `thrift:"indicators,1,required" frugal:"1,required,list<FirstLevelIndicator>" json:"indicators"`
}

func NewQueryIndicatorListResp() *QueryIndicatorListResp {
	return &QueryIndicatorListResp{}
}

func (p *QueryIndicatorListResp) InitDefault() {
}

func (p *QueryIndicatorListResp) GetIndicators() (v []*FirstLevelIndicator) {
	return p.Indicators
}
func (p *QueryIndicatorListResp) SetIndicators(val []*FirstLevelIndicator) {
	p.Indicators = val
}

func (p *QueryIndicatorListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryIndicatorListResp(%+v)", *p)
}

var fieldIDToName_QueryIndicatorListResp = map[int16]string{
	1: "indicators",
}

type QueryTaskListReq struct {
	PageNum  int64  `thrift:"page_num,1,required" frugal:"1,required,i64" json:"page_num"`
	PageSize int64  `thrift:"page_size,2,required" frugal:"2,required,i64" json:"page_size"`
	Id       *int64 `thrift:"id,3,optional" frugal:"3,optional,i64" json:"id,omitempty"`
	JobId    *int64 `thrift:"job_id,4,optional" frugal:"4,optional,i64" json:"job_id,omitempty"`
}

func NewQueryTaskListReq() *QueryTaskListReq {
	return &QueryTaskListReq{}
}

func (p *QueryTaskListReq) InitDefault() {
}

func (p *QueryTaskListReq) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryTaskListReq) GetPageSize() (v int64) {
	return p.PageSize
}

var QueryTaskListReq_Id_DEFAULT int64

func (p *QueryTaskListReq) GetId() (v int64) {
	if !p.IsSetId() {
		return QueryTaskListReq_Id_DEFAULT
	}
	return *p.Id
}

var QueryTaskListReq_JobId_DEFAULT int64

func (p *QueryTaskListReq) GetJobId() (v int64) {
	if !p.IsSetJobId() {
		return QueryTaskListReq_JobId_DEFAULT
	}
	return *p.JobId
}
func (p *QueryTaskListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryTaskListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryTaskListReq) SetId(val *int64) {
	p.Id = val
}
func (p *QueryTaskListReq) SetJobId(val *int64) {
	p.JobId = val
}

func (p *QueryTaskListReq) IsSetId() bool {
	return p.Id != nil
}

func (p *QueryTaskListReq) IsSetJobId() bool {
	return p.JobId != nil
}

func (p *QueryTaskListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTaskListReq(%+v)", *p)
}

var fieldIDToName_QueryTaskListReq = map[int16]string{
	1: "page_num",
	2: "page_size",
	3: "id",
	4: "job_id",
}

type QueryTaskListResp struct {
	TaskList []*Task `thrift:"task_list,1,required" frugal:"1,required,list<Task>" json:"task_list"`
	Total    int64   `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryTaskListResp() *QueryTaskListResp {
	return &QueryTaskListResp{}
}

func (p *QueryTaskListResp) InitDefault() {
}

func (p *QueryTaskListResp) GetTaskList() (v []*Task) {
	return p.TaskList
}

func (p *QueryTaskListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryTaskListResp) SetTaskList(val []*Task) {
	p.TaskList = val
}
func (p *QueryTaskListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryTaskListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTaskListResp(%+v)", *p)
}

var fieldIDToName_QueryTaskListResp = map[int16]string{
	1: "task_list",
	2: "total",
}

type RunTaskReq struct {
	JobId           int64   `thrift:"job_id,1,required" frugal:"1,required,i64" json:"job_id"`
	Rules           []*Rule `thrift:"rules,2,required" frugal:"2,required,list<Rule>" json:"rules"`
	LogicExpression string  `thrift:"logic_expression,3,required" frugal:"3,required,string" json:"logic_expression"`
	Limit           int64   `thrift:"limit,4,required" frugal:"4,required,i64" json:"limit"`
	Token           string  `thrift:"token,5,required" frugal:"5,required,string" json:"token"`
}

func NewRunTaskReq() *RunTaskReq {
	return &RunTaskReq{}
}

func (p *RunTaskReq) InitDefault() {
}

func (p *RunTaskReq) GetJobId() (v int64) {
	return p.JobId
}

func (p *RunTaskReq) GetRules() (v []*Rule) {
	return p.Rules
}

func (p *RunTaskReq) GetLogicExpression() (v string) {
	return p.LogicExpression
}

func (p *RunTaskReq) GetLimit() (v int64) {
	return p.Limit
}

func (p *RunTaskReq) GetToken() (v string) {
	return p.Token
}
func (p *RunTaskReq) SetJobId(val int64) {
	p.JobId = val
}
func (p *RunTaskReq) SetRules(val []*Rule) {
	p.Rules = val
}
func (p *RunTaskReq) SetLogicExpression(val string) {
	p.LogicExpression = val
}
func (p *RunTaskReq) SetLimit(val int64) {
	p.Limit = val
}
func (p *RunTaskReq) SetToken(val string) {
	p.Token = val
}

func (p *RunTaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunTaskReq(%+v)", *p)
}

var fieldIDToName_RunTaskReq = map[int16]string{
	1: "job_id",
	2: "rules",
	3: "logic_expression",
	4: "limit",
	5: "token",
}

type RunTaskResp struct {
}

func NewRunTaskResp() *RunTaskResp {
	return &RunTaskResp{}
}

func (p *RunTaskResp) InitDefault() {
}

func (p *RunTaskResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunTaskResp(%+v)", *p)
}

var fieldIDToName_RunTaskResp = map[int16]string{}

type QueryTaskResultListReq struct {
	PageNum  int64 `thrift:"page_num,1,required" frugal:"1,required,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2,required" frugal:"2,required,i64" json:"page_size"`
	TaskId   int64 `thrift:"task_id,3,required" frugal:"3,required,i64" json:"task_id"`
}

func NewQueryTaskResultListReq() *QueryTaskResultListReq {
	return &QueryTaskResultListReq{}
}

func (p *QueryTaskResultListReq) InitDefault() {
}

func (p *QueryTaskResultListReq) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryTaskResultListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryTaskResultListReq) GetTaskId() (v int64) {
	return p.TaskId
}
func (p *QueryTaskResultListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryTaskResultListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryTaskResultListReq) SetTaskId(val int64) {
	p.TaskId = val
}

func (p *QueryTaskResultListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTaskResultListReq(%+v)", *p)
}

var fieldIDToName_QueryTaskResultListReq = map[int16]string{
	1: "page_num",
	2: "page_size",
	3: "task_id",
}

type QueryTaskResultListResp struct {
	ResultList []*TaskResult_ `thrift:"result_list,1,required" frugal:"1,required,list<TaskResult_>" json:"result_list"`
	Total      int64          `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryTaskResultListResp() *QueryTaskResultListResp {
	return &QueryTaskResultListResp{}
}

func (p *QueryTaskResultListResp) InitDefault() {
}

func (p *QueryTaskResultListResp) GetResultList() (v []*TaskResult_) {
	return p.ResultList
}

func (p *QueryTaskResultListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryTaskResultListResp) SetResultList(val []*TaskResult_) {
	p.ResultList = val
}
func (p *QueryTaskResultListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryTaskResultListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTaskResultListResp(%+v)", *p)
}

var fieldIDToName_QueryTaskResultListResp = map[int16]string{
	1: "result_list",
	2: "total",
}

type Job struct {
	Id          int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name        string  `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Description string  `thrift:"description,3,required" frugal:"3,required,string" json:"description"`
	CreatedBy   *User   `thrift:"created_by,4,required" frugal:"4,required,User" json:"created_by"`
	UpdatedBy   *User   `thrift:"updated_by,5,required" frugal:"5,required,User" json:"updated_by"`
	CreatedAt   int64   `thrift:"created_at,6,required" frugal:"6,required,i64" json:"created_at"`
	UpdatedAt   int64   `thrift:"updated_at,7,required" frugal:"7,required,i64" json:"updated_at"`
	Extra       *string `thrift:"extra,8,optional" frugal:"8,optional,string" json:"extra,omitempty"`
}

func NewJob() *Job {
	return &Job{}
}

func (p *Job) InitDefault() {
}

func (p *Job) GetId() (v int64) {
	return p.Id
}

func (p *Job) GetName() (v string) {
	return p.Name
}

func (p *Job) GetDescription() (v string) {
	return p.Description
}

var Job_CreatedBy_DEFAULT *User

func (p *Job) GetCreatedBy() (v *User) {
	if !p.IsSetCreatedBy() {
		return Job_CreatedBy_DEFAULT
	}
	return p.CreatedBy
}

var Job_UpdatedBy_DEFAULT *User

func (p *Job) GetUpdatedBy() (v *User) {
	if !p.IsSetUpdatedBy() {
		return Job_UpdatedBy_DEFAULT
	}
	return p.UpdatedBy
}

func (p *Job) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Job) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var Job_Extra_DEFAULT string

func (p *Job) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Job_Extra_DEFAULT
	}
	return *p.Extra
}
func (p *Job) SetId(val int64) {
	p.Id = val
}
func (p *Job) SetName(val string) {
	p.Name = val
}
func (p *Job) SetDescription(val string) {
	p.Description = val
}
func (p *Job) SetCreatedBy(val *User) {
	p.CreatedBy = val
}
func (p *Job) SetUpdatedBy(val *User) {
	p.UpdatedBy = val
}
func (p *Job) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Job) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Job) SetExtra(val *string) {
	p.Extra = val
}

func (p *Job) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *Job) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *Job) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Job) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Job(%+v)", *p)
}

var fieldIDToName_Job = map[int16]string{
	1: "id",
	2: "name",
	3: "description",
	4: "created_by",
	5: "updated_by",
	6: "created_at",
	7: "updated_at",
	8: "extra",
}

type User struct {
	Id    int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Email string `thrift:"email,2,required" frugal:"2,required,string" json:"email"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetId() (v int64) {
	return p.Id
}

func (p *User) GetEmail() (v string) {
	return p.Email
}
func (p *User) SetId(val int64) {
	p.Id = val
}
func (p *User) SetEmail(val string) {
	p.Email = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "id",
	2: "email",
}

type FirstLevelIndicator struct {
	DisplayName string                  `thrift:"display_name,1,required" frugal:"1,required,string" json:"display_name"`
	Children    []*SecondLevelIndicator `thrift:"children,2,required" frugal:"2,required,list<SecondLevelIndicator>" json:"children"`
}

func NewFirstLevelIndicator() *FirstLevelIndicator {
	return &FirstLevelIndicator{}
}

func (p *FirstLevelIndicator) InitDefault() {
}

func (p *FirstLevelIndicator) GetDisplayName() (v string) {
	return p.DisplayName
}

func (p *FirstLevelIndicator) GetChildren() (v []*SecondLevelIndicator) {
	return p.Children
}
func (p *FirstLevelIndicator) SetDisplayName(val string) {
	p.DisplayName = val
}
func (p *FirstLevelIndicator) SetChildren(val []*SecondLevelIndicator) {
	p.Children = val
}

func (p *FirstLevelIndicator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirstLevelIndicator(%+v)", *p)
}

var fieldIDToName_FirstLevelIndicator = map[int16]string{
	1: "display_name",
	2: "children",
}

type SecondLevelIndicator struct {
	FactorCode     string            `thrift:"factor_code,1,required" frugal:"1,required,string" json:"factor_code"`
	DisplayName    string            `thrift:"display_name,2,required" frugal:"2,required,string" json:"display_name"`
	AllowOperators []*AllowOperators `thrift:"allow_operators,3,required" frugal:"3,required,list<AllowOperators>" json:"allow_operators"`
}

func NewSecondLevelIndicator() *SecondLevelIndicator {
	return &SecondLevelIndicator{}
}

func (p *SecondLevelIndicator) InitDefault() {
}

func (p *SecondLevelIndicator) GetFactorCode() (v string) {
	return p.FactorCode
}

func (p *SecondLevelIndicator) GetDisplayName() (v string) {
	return p.DisplayName
}

func (p *SecondLevelIndicator) GetAllowOperators() (v []*AllowOperators) {
	return p.AllowOperators
}
func (p *SecondLevelIndicator) SetFactorCode(val string) {
	p.FactorCode = val
}
func (p *SecondLevelIndicator) SetDisplayName(val string) {
	p.DisplayName = val
}
func (p *SecondLevelIndicator) SetAllowOperators(val []*AllowOperators) {
	p.AllowOperators = val
}

func (p *SecondLevelIndicator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondLevelIndicator(%+v)", *p)
}

var fieldIDToName_SecondLevelIndicator = map[int16]string{
	1: "factor_code",
	2: "display_name",
	3: "allow_operators",
}

type AllowOperators struct {
	OperatorCode string         `thrift:"operator_code,1,required" frugal:"1,required,string" json:"operator_code"`
	DisplayName  string         `thrift:"display_name,2,required" frugal:"2,required,string" json:"display_name"`
	InputElType  InputElType    `thrift:"input_el_type,3,required" frugal:"3,required,InputElType" json:"input_el_type"`
	AllowValues  []*AllowValues `thrift:"allow_values,4,optional" frugal:"4,optional,list<AllowValues>" json:"allow_values,omitempty"`
}

func NewAllowOperators() *AllowOperators {
	return &AllowOperators{}
}

func (p *AllowOperators) InitDefault() {
}

func (p *AllowOperators) GetOperatorCode() (v string) {
	return p.OperatorCode
}

func (p *AllowOperators) GetDisplayName() (v string) {
	return p.DisplayName
}

func (p *AllowOperators) GetInputElType() (v InputElType) {
	return p.InputElType
}

var AllowOperators_AllowValues_DEFAULT []*AllowValues

func (p *AllowOperators) GetAllowValues() (v []*AllowValues) {
	if !p.IsSetAllowValues() {
		return AllowOperators_AllowValues_DEFAULT
	}
	return p.AllowValues
}
func (p *AllowOperators) SetOperatorCode(val string) {
	p.OperatorCode = val
}
func (p *AllowOperators) SetDisplayName(val string) {
	p.DisplayName = val
}
func (p *AllowOperators) SetInputElType(val InputElType) {
	p.InputElType = val
}
func (p *AllowOperators) SetAllowValues(val []*AllowValues) {
	p.AllowValues = val
}

func (p *AllowOperators) IsSetAllowValues() bool {
	return p.AllowValues != nil
}

func (p *AllowOperators) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AllowOperators(%+v)", *p)
}

var fieldIDToName_AllowOperators = map[int16]string{
	1: "operator_code",
	2: "display_name",
	3: "input_el_type",
	4: "allow_values",
}

type AllowValues struct {
	DisplayName string `thrift:"display_name,1,required" frugal:"1,required,string" json:"display_name"`
	Value       string `thrift:"value,2,required" frugal:"2,required,string" json:"value"`
}

func NewAllowValues() *AllowValues {
	return &AllowValues{}
}

func (p *AllowValues) InitDefault() {
}

func (p *AllowValues) GetDisplayName() (v string) {
	return p.DisplayName
}

func (p *AllowValues) GetValue() (v string) {
	return p.Value
}
func (p *AllowValues) SetDisplayName(val string) {
	p.DisplayName = val
}
func (p *AllowValues) SetValue(val string) {
	p.Value = val
}

func (p *AllowValues) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AllowValues(%+v)", *p)
}

var fieldIDToName_AllowValues = map[int16]string{
	1: "display_name",
	2: "value",
}

type Task struct {
	Id              int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	JobId           int64      `thrift:"job_id,2,required" frugal:"2,required,i64" json:"job_id"`
	Name            string     `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	TotalRecords    *int64     `thrift:"total_records,4,optional" frugal:"4,optional,i64" json:"total_records,omitempty"`
	Status          TaskStatus `thrift:"status,5,required" frugal:"5,required,TaskStatus" json:"status"`
	CreatedBy       *User      `thrift:"created_by,6,required" frugal:"6,required,User" json:"created_by"`
	CreatedAt       int64      `thrift:"created_at,7,required" frugal:"7,required,i64" json:"created_at"`
	TimeCost        *int64     `thrift:"time_cost,8,optional" frugal:"8,optional,i64" json:"time_cost,omitempty"`
	Rules           []*Rule    `thrift:"rules,9,required" frugal:"9,required,list<Rule>" json:"rules"`
	LogicExpression string     `thrift:"logic_expression,10,required" frugal:"10,required,string" json:"logic_expression"`
	Limit           int64      `thrift:"limit,11,required" frugal:"11,required,i64" json:"limit"`
	Extra           *string    `thrift:"extra,12,optional" frugal:"12,optional,string" json:"extra,omitempty"`
}

func NewTask() *Task {
	return &Task{}
}

func (p *Task) InitDefault() {
}

func (p *Task) GetId() (v int64) {
	return p.Id
}

func (p *Task) GetJobId() (v int64) {
	return p.JobId
}

func (p *Task) GetName() (v string) {
	return p.Name
}

var Task_TotalRecords_DEFAULT int64

func (p *Task) GetTotalRecords() (v int64) {
	if !p.IsSetTotalRecords() {
		return Task_TotalRecords_DEFAULT
	}
	return *p.TotalRecords
}

func (p *Task) GetStatus() (v TaskStatus) {
	return p.Status
}

var Task_CreatedBy_DEFAULT *User

func (p *Task) GetCreatedBy() (v *User) {
	if !p.IsSetCreatedBy() {
		return Task_CreatedBy_DEFAULT
	}
	return p.CreatedBy
}

func (p *Task) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var Task_TimeCost_DEFAULT int64

func (p *Task) GetTimeCost() (v int64) {
	if !p.IsSetTimeCost() {
		return Task_TimeCost_DEFAULT
	}
	return *p.TimeCost
}

func (p *Task) GetRules() (v []*Rule) {
	return p.Rules
}

func (p *Task) GetLogicExpression() (v string) {
	return p.LogicExpression
}

func (p *Task) GetLimit() (v int64) {
	return p.Limit
}

var Task_Extra_DEFAULT string

func (p *Task) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Task_Extra_DEFAULT
	}
	return *p.Extra
}
func (p *Task) SetId(val int64) {
	p.Id = val
}
func (p *Task) SetJobId(val int64) {
	p.JobId = val
}
func (p *Task) SetName(val string) {
	p.Name = val
}
func (p *Task) SetTotalRecords(val *int64) {
	p.TotalRecords = val
}
func (p *Task) SetStatus(val TaskStatus) {
	p.Status = val
}
func (p *Task) SetCreatedBy(val *User) {
	p.CreatedBy = val
}
func (p *Task) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Task) SetTimeCost(val *int64) {
	p.TimeCost = val
}
func (p *Task) SetRules(val []*Rule) {
	p.Rules = val
}
func (p *Task) SetLogicExpression(val string) {
	p.LogicExpression = val
}
func (p *Task) SetLimit(val int64) {
	p.Limit = val
}
func (p *Task) SetExtra(val *string) {
	p.Extra = val
}

func (p *Task) IsSetTotalRecords() bool {
	return p.TotalRecords != nil
}

func (p *Task) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *Task) IsSetTimeCost() bool {
	return p.TimeCost != nil
}

func (p *Task) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)
}

var fieldIDToName_Task = map[int16]string{
	1:  "id",
	2:  "job_id",
	3:  "name",
	4:  "total_records",
	5:  "status",
	6:  "created_by",
	7:  "created_at",
	8:  "time_cost",
	9:  "rules",
	10: "logic_expression",
	11: "limit",
	12: "extra",
}

type Rule struct {
	Id           int64    `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	FactorCode   string   `thrift:"factor_code,2,required" frugal:"2,required,string" json:"factor_code"`
	OperatorCode string   `thrift:"operator_code,3,required" frugal:"3,required,string" json:"operator_code"`
	ValueList    []string `thrift:"value_list,4,required" frugal:"4,required,list<string>" json:"value_list"`
}

func NewRule() *Rule {
	return &Rule{}
}

func (p *Rule) InitDefault() {
}

func (p *Rule) GetId() (v int64) {
	return p.Id
}

func (p *Rule) GetFactorCode() (v string) {
	return p.FactorCode
}

func (p *Rule) GetOperatorCode() (v string) {
	return p.OperatorCode
}

func (p *Rule) GetValueList() (v []string) {
	return p.ValueList
}
func (p *Rule) SetId(val int64) {
	p.Id = val
}
func (p *Rule) SetFactorCode(val string) {
	p.FactorCode = val
}
func (p *Rule) SetOperatorCode(val string) {
	p.OperatorCode = val
}
func (p *Rule) SetValueList(val []string) {
	p.ValueList = val
}

func (p *Rule) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rule(%+v)", *p)
}

var fieldIDToName_Rule = map[int16]string{
	1: "id",
	2: "factor_code",
	3: "operator_code",
	4: "value_list",
}

type TaskResult_ struct {
	TaskId  int64    `thrift:"task_id,1,required" frugal:"1,required,i64" json:"task_id"`
	EsScore float64  `thrift:"es_score,2,required" frugal:"2,required,double" json:"es_score"`
	Product *Product `thrift:"product,3,required" frugal:"3,required,Product" json:"product"`
}

func NewTaskResult_() *TaskResult_ {
	return &TaskResult_{}
}

func (p *TaskResult_) InitDefault() {
}

func (p *TaskResult_) GetTaskId() (v int64) {
	return p.TaskId
}

func (p *TaskResult_) GetEsScore() (v float64) {
	return p.EsScore
}

var TaskResult__Product_DEFAULT *Product

func (p *TaskResult_) GetProduct() (v *Product) {
	if !p.IsSetProduct() {
		return TaskResult__Product_DEFAULT
	}
	return p.Product
}
func (p *TaskResult_) SetTaskId(val int64) {
	p.TaskId = val
}
func (p *TaskResult_) SetEsScore(val float64) {
	p.EsScore = val
}
func (p *TaskResult_) SetProduct(val *Product) {
	p.Product = val
}

func (p *TaskResult_) IsSetProduct() bool {
	return p.Product != nil
}

func (p *TaskResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskResult_(%+v)", *p)
}

var fieldIDToName_TaskResult_ = map[int16]string{
	1: "task_id",
	2: "es_score",
	3: "product",
}

type Product struct {
	ProductId           int64    `thrift:"product_id,1,required" frugal:"1,required,i64" json:"product_id"`
	ProductName         string   `thrift:"product_name,2,required" frugal:"2,required,string" json:"product_name"`
	ImageUrls           []string `thrift:"image_urls,3,required" frugal:"3,required,list<string>" json:"image_urls"`
	ShopImageUrl        string   `thrift:"shop_image_url,4,required" frugal:"4,required,string" json:"shop_image_url"`
	ShopId              int64    `thrift:"shop_id,5,required" frugal:"5,required,i64" json:"shop_id"`
	Status              int64    `thrift:"status,6,required" frugal:"6,required,i64" json:"status"`
	ShopName            string   `thrift:"shop_name,7,required" frugal:"7,required,string" json:"shop_name"`
	BrandId             *int64   `thrift:"brand_id,8,optional" frugal:"8,optional,i64" json:"brand_id,omitempty"`
	BrandName           *string  `thrift:"brand_name,9,optional" frugal:"9,optional,string" json:"brand_name,omitempty"`
	IsBrandAuthorized   *int64   `thrift:"is_brand_authorized,10,optional" frugal:"10,optional,i64" json:"is_brand_authorized,omitempty"`
	LogoModelBrandId    *int64   `thrift:"logo_model_brand_id,11,optional" frugal:"11,optional,i64" json:"logo_model_brand_id,omitempty"`
	LogoModelBrandName  *string  `thrift:"logo_model_brand_name,12,optional" frugal:"12,optional,string" json:"logo_model_brand_name,omitempty"`
	ImageModelBrandId   *int64   `thrift:"image_model_brand_id,13,optional" frugal:"13,optional,i64" json:"image_model_brand_id,omitempty"`
	ImageModelBrandName *string  `thrift:"image_model_brand_name,14,optional" frugal:"14,optional,string" json:"image_model_brand_name,omitempty"`
	Extra               *string  `thrift:"extra,15,optional" frugal:"15,optional,string" json:"extra,omitempty"`
}

func NewProduct() *Product {
	return &Product{}
}

func (p *Product) InitDefault() {
}

func (p *Product) GetProductId() (v int64) {
	return p.ProductId
}

func (p *Product) GetProductName() (v string) {
	return p.ProductName
}

func (p *Product) GetImageUrls() (v []string) {
	return p.ImageUrls
}

func (p *Product) GetShopImageUrl() (v string) {
	return p.ShopImageUrl
}

func (p *Product) GetShopId() (v int64) {
	return p.ShopId
}

func (p *Product) GetStatus() (v int64) {
	return p.Status
}

func (p *Product) GetShopName() (v string) {
	return p.ShopName
}

var Product_BrandId_DEFAULT int64

func (p *Product) GetBrandId() (v int64) {
	if !p.IsSetBrandId() {
		return Product_BrandId_DEFAULT
	}
	return *p.BrandId
}

var Product_BrandName_DEFAULT string

func (p *Product) GetBrandName() (v string) {
	if !p.IsSetBrandName() {
		return Product_BrandName_DEFAULT
	}
	return *p.BrandName
}

var Product_IsBrandAuthorized_DEFAULT int64

func (p *Product) GetIsBrandAuthorized() (v int64) {
	if !p.IsSetIsBrandAuthorized() {
		return Product_IsBrandAuthorized_DEFAULT
	}
	return *p.IsBrandAuthorized
}

var Product_LogoModelBrandId_DEFAULT int64

func (p *Product) GetLogoModelBrandId() (v int64) {
	if !p.IsSetLogoModelBrandId() {
		return Product_LogoModelBrandId_DEFAULT
	}
	return *p.LogoModelBrandId
}

var Product_LogoModelBrandName_DEFAULT string

func (p *Product) GetLogoModelBrandName() (v string) {
	if !p.IsSetLogoModelBrandName() {
		return Product_LogoModelBrandName_DEFAULT
	}
	return *p.LogoModelBrandName
}

var Product_ImageModelBrandId_DEFAULT int64

func (p *Product) GetImageModelBrandId() (v int64) {
	if !p.IsSetImageModelBrandId() {
		return Product_ImageModelBrandId_DEFAULT
	}
	return *p.ImageModelBrandId
}

var Product_ImageModelBrandName_DEFAULT string

func (p *Product) GetImageModelBrandName() (v string) {
	if !p.IsSetImageModelBrandName() {
		return Product_ImageModelBrandName_DEFAULT
	}
	return *p.ImageModelBrandName
}

var Product_Extra_DEFAULT string

func (p *Product) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Product_Extra_DEFAULT
	}
	return *p.Extra
}
func (p *Product) SetProductId(val int64) {
	p.ProductId = val
}
func (p *Product) SetProductName(val string) {
	p.ProductName = val
}
func (p *Product) SetImageUrls(val []string) {
	p.ImageUrls = val
}
func (p *Product) SetShopImageUrl(val string) {
	p.ShopImageUrl = val
}
func (p *Product) SetShopId(val int64) {
	p.ShopId = val
}
func (p *Product) SetStatus(val int64) {
	p.Status = val
}
func (p *Product) SetShopName(val string) {
	p.ShopName = val
}
func (p *Product) SetBrandId(val *int64) {
	p.BrandId = val
}
func (p *Product) SetBrandName(val *string) {
	p.BrandName = val
}
func (p *Product) SetIsBrandAuthorized(val *int64) {
	p.IsBrandAuthorized = val
}
func (p *Product) SetLogoModelBrandId(val *int64) {
	p.LogoModelBrandId = val
}
func (p *Product) SetLogoModelBrandName(val *string) {
	p.LogoModelBrandName = val
}
func (p *Product) SetImageModelBrandId(val *int64) {
	p.ImageModelBrandId = val
}
func (p *Product) SetImageModelBrandName(val *string) {
	p.ImageModelBrandName = val
}
func (p *Product) SetExtra(val *string) {
	p.Extra = val
}

func (p *Product) IsSetBrandId() bool {
	return p.BrandId != nil
}

func (p *Product) IsSetBrandName() bool {
	return p.BrandName != nil
}

func (p *Product) IsSetIsBrandAuthorized() bool {
	return p.IsBrandAuthorized != nil
}

func (p *Product) IsSetLogoModelBrandId() bool {
	return p.LogoModelBrandId != nil
}

func (p *Product) IsSetLogoModelBrandName() bool {
	return p.LogoModelBrandName != nil
}

func (p *Product) IsSetImageModelBrandId() bool {
	return p.ImageModelBrandId != nil
}

func (p *Product) IsSetImageModelBrandName() bool {
	return p.ImageModelBrandName != nil
}

func (p *Product) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Product) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Product(%+v)", *p)
}

var fieldIDToName_Product = map[int16]string{
	1:  "product_id",
	2:  "product_name",
	3:  "image_urls",
	4:  "shop_image_url",
	5:  "shop_id",
	6:  "status",
	7:  "shop_name",
	8:  "brand_id",
	9:  "brand_name",
	10: "is_brand_authorized",
	11: "logo_model_brand_id",
	12: "logo_model_brand_name",
	13: "image_model_brand_id",
	14: "image_model_brand_name",
	15: "extra",
}

type MinerCore interface {
	SignUp(ctx context.Context, req *SignUpReq) (r *SignUpResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	QueryUserList(ctx context.Context, req *QueryUserListReq) (r *QueryUserListResp, err error)

	QueryJobList(ctx context.Context, req *QueryJobListReq) (r *QueryJobListResp, err error)

	CreateJob(ctx context.Context, req *CreateJobReq) (r *CreateJobResp, err error)

	DeleteJob(ctx context.Context, req *DeleteJobReq) (r *DeleteJobResp, err error)

	QueryIndicatorList(ctx context.Context, req *QueryIndicatorListReq) (r *QueryIndicatorListResp, err error)

	QueryTaskList(ctx context.Context, req *QueryTaskListReq) (r *QueryTaskListResp, err error)

	RunTask(ctx context.Context, req *RunTaskReq) (r *RunTaskResp, err error)

	QueryTaskResultList(ctx context.Context, req *QueryTaskResultListReq) (r *QueryTaskResultListResp, err error)
}

type MinerCoreSignUpArgs struct {
	Req *SignUpReq `thrift:"req,1" frugal:"1,default,SignUpReq" json:"req"`
}

func NewMinerCoreSignUpArgs() *MinerCoreSignUpArgs {
	return &MinerCoreSignUpArgs{}
}

func (p *MinerCoreSignUpArgs) InitDefault() {
}

var MinerCoreSignUpArgs_Req_DEFAULT *SignUpReq

func (p *MinerCoreSignUpArgs) GetReq() (v *SignUpReq) {
	if !p.IsSetReq() {
		return MinerCoreSignUpArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreSignUpArgs) SetReq(val *SignUpReq) {
	p.Req = val
}

func (p *MinerCoreSignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreSignUpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreSignUpArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreSignUpArgs = map[int16]string{
	1: "req",
}

type MinerCoreSignUpResult struct {
	Success *SignUpResp `thrift:"success,0,optional" frugal:"0,optional,SignUpResp" json:"success,omitempty"`
}

func NewMinerCoreSignUpResult() *MinerCoreSignUpResult {
	return &MinerCoreSignUpResult{}
}

func (p *MinerCoreSignUpResult) InitDefault() {
}

var MinerCoreSignUpResult_Success_DEFAULT *SignUpResp

func (p *MinerCoreSignUpResult) GetSuccess() (v *SignUpResp) {
	if !p.IsSetSuccess() {
		return MinerCoreSignUpResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreSignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*SignUpResp)
}

func (p *MinerCoreSignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreSignUpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreSignUpResult(%+v)", *p)
}

var fieldIDToName_MinerCoreSignUpResult = map[int16]string{
	0: "success",
}

type MinerCoreLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewMinerCoreLoginArgs() *MinerCoreLoginArgs {
	return &MinerCoreLoginArgs{}
}

func (p *MinerCoreLoginArgs) InitDefault() {
}

var MinerCoreLoginArgs_Req_DEFAULT *LoginReq

func (p *MinerCoreLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return MinerCoreLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

func (p *MinerCoreLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreLoginArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreLoginArgs = map[int16]string{
	1: "req",
}

type MinerCoreLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewMinerCoreLoginResult() *MinerCoreLoginResult {
	return &MinerCoreLoginResult{}
}

func (p *MinerCoreLoginResult) InitDefault() {
}

var MinerCoreLoginResult_Success_DEFAULT *LoginResp

func (p *MinerCoreLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return MinerCoreLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

func (p *MinerCoreLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreLoginResult(%+v)", *p)
}

var fieldIDToName_MinerCoreLoginResult = map[int16]string{
	0: "success",
}

type MinerCoreQueryUserListArgs struct {
	Req *QueryUserListReq `thrift:"req,1" frugal:"1,default,QueryUserListReq" json:"req"`
}

func NewMinerCoreQueryUserListArgs() *MinerCoreQueryUserListArgs {
	return &MinerCoreQueryUserListArgs{}
}

func (p *MinerCoreQueryUserListArgs) InitDefault() {
}

var MinerCoreQueryUserListArgs_Req_DEFAULT *QueryUserListReq

func (p *MinerCoreQueryUserListArgs) GetReq() (v *QueryUserListReq) {
	if !p.IsSetReq() {
		return MinerCoreQueryUserListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreQueryUserListArgs) SetReq(val *QueryUserListReq) {
	p.Req = val
}

func (p *MinerCoreQueryUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreQueryUserListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryUserListArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryUserListArgs = map[int16]string{
	1: "req",
}

type MinerCoreQueryUserListResult struct {
	Success *QueryUserListResp `thrift:"success,0,optional" frugal:"0,optional,QueryUserListResp" json:"success,omitempty"`
}

func NewMinerCoreQueryUserListResult() *MinerCoreQueryUserListResult {
	return &MinerCoreQueryUserListResult{}
}

func (p *MinerCoreQueryUserListResult) InitDefault() {
}

var MinerCoreQueryUserListResult_Success_DEFAULT *QueryUserListResp

func (p *MinerCoreQueryUserListResult) GetSuccess() (v *QueryUserListResp) {
	if !p.IsSetSuccess() {
		return MinerCoreQueryUserListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreQueryUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryUserListResp)
}

func (p *MinerCoreQueryUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreQueryUserListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryUserListResult(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryUserListResult = map[int16]string{
	0: "success",
}

type MinerCoreQueryJobListArgs struct {
	Req *QueryJobListReq `thrift:"req,1" frugal:"1,default,QueryJobListReq" json:"req"`
}

func NewMinerCoreQueryJobListArgs() *MinerCoreQueryJobListArgs {
	return &MinerCoreQueryJobListArgs{}
}

func (p *MinerCoreQueryJobListArgs) InitDefault() {
}

var MinerCoreQueryJobListArgs_Req_DEFAULT *QueryJobListReq

func (p *MinerCoreQueryJobListArgs) GetReq() (v *QueryJobListReq) {
	if !p.IsSetReq() {
		return MinerCoreQueryJobListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreQueryJobListArgs) SetReq(val *QueryJobListReq) {
	p.Req = val
}

func (p *MinerCoreQueryJobListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreQueryJobListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryJobListArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryJobListArgs = map[int16]string{
	1: "req",
}

type MinerCoreQueryJobListResult struct {
	Success *QueryJobListResp `thrift:"success,0,optional" frugal:"0,optional,QueryJobListResp" json:"success,omitempty"`
}

func NewMinerCoreQueryJobListResult() *MinerCoreQueryJobListResult {
	return &MinerCoreQueryJobListResult{}
}

func (p *MinerCoreQueryJobListResult) InitDefault() {
}

var MinerCoreQueryJobListResult_Success_DEFAULT *QueryJobListResp

func (p *MinerCoreQueryJobListResult) GetSuccess() (v *QueryJobListResp) {
	if !p.IsSetSuccess() {
		return MinerCoreQueryJobListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreQueryJobListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryJobListResp)
}

func (p *MinerCoreQueryJobListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreQueryJobListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryJobListResult(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryJobListResult = map[int16]string{
	0: "success",
}

type MinerCoreCreateJobArgs struct {
	Req *CreateJobReq `thrift:"req,1" frugal:"1,default,CreateJobReq" json:"req"`
}

func NewMinerCoreCreateJobArgs() *MinerCoreCreateJobArgs {
	return &MinerCoreCreateJobArgs{}
}

func (p *MinerCoreCreateJobArgs) InitDefault() {
}

var MinerCoreCreateJobArgs_Req_DEFAULT *CreateJobReq

func (p *MinerCoreCreateJobArgs) GetReq() (v *CreateJobReq) {
	if !p.IsSetReq() {
		return MinerCoreCreateJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreCreateJobArgs) SetReq(val *CreateJobReq) {
	p.Req = val
}

func (p *MinerCoreCreateJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreCreateJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreCreateJobArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreCreateJobArgs = map[int16]string{
	1: "req",
}

type MinerCoreCreateJobResult struct {
	Success *CreateJobResp `thrift:"success,0,optional" frugal:"0,optional,CreateJobResp" json:"success,omitempty"`
}

func NewMinerCoreCreateJobResult() *MinerCoreCreateJobResult {
	return &MinerCoreCreateJobResult{}
}

func (p *MinerCoreCreateJobResult) InitDefault() {
}

var MinerCoreCreateJobResult_Success_DEFAULT *CreateJobResp

func (p *MinerCoreCreateJobResult) GetSuccess() (v *CreateJobResp) {
	if !p.IsSetSuccess() {
		return MinerCoreCreateJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreCreateJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateJobResp)
}

func (p *MinerCoreCreateJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreCreateJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreCreateJobResult(%+v)", *p)
}

var fieldIDToName_MinerCoreCreateJobResult = map[int16]string{
	0: "success",
}

type MinerCoreDeleteJobArgs struct {
	Req *DeleteJobReq `thrift:"req,1" frugal:"1,default,DeleteJobReq" json:"req"`
}

func NewMinerCoreDeleteJobArgs() *MinerCoreDeleteJobArgs {
	return &MinerCoreDeleteJobArgs{}
}

func (p *MinerCoreDeleteJobArgs) InitDefault() {
}

var MinerCoreDeleteJobArgs_Req_DEFAULT *DeleteJobReq

func (p *MinerCoreDeleteJobArgs) GetReq() (v *DeleteJobReq) {
	if !p.IsSetReq() {
		return MinerCoreDeleteJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreDeleteJobArgs) SetReq(val *DeleteJobReq) {
	p.Req = val
}

func (p *MinerCoreDeleteJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreDeleteJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreDeleteJobArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreDeleteJobArgs = map[int16]string{
	1: "req",
}

type MinerCoreDeleteJobResult struct {
	Success *DeleteJobResp `thrift:"success,0,optional" frugal:"0,optional,DeleteJobResp" json:"success,omitempty"`
}

func NewMinerCoreDeleteJobResult() *MinerCoreDeleteJobResult {
	return &MinerCoreDeleteJobResult{}
}

func (p *MinerCoreDeleteJobResult) InitDefault() {
}

var MinerCoreDeleteJobResult_Success_DEFAULT *DeleteJobResp

func (p *MinerCoreDeleteJobResult) GetSuccess() (v *DeleteJobResp) {
	if !p.IsSetSuccess() {
		return MinerCoreDeleteJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreDeleteJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteJobResp)
}

func (p *MinerCoreDeleteJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreDeleteJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreDeleteJobResult(%+v)", *p)
}

var fieldIDToName_MinerCoreDeleteJobResult = map[int16]string{
	0: "success",
}

type MinerCoreQueryIndicatorListArgs struct {
	Req *QueryIndicatorListReq `thrift:"req,1" frugal:"1,default,QueryIndicatorListReq" json:"req"`
}

func NewMinerCoreQueryIndicatorListArgs() *MinerCoreQueryIndicatorListArgs {
	return &MinerCoreQueryIndicatorListArgs{}
}

func (p *MinerCoreQueryIndicatorListArgs) InitDefault() {
}

var MinerCoreQueryIndicatorListArgs_Req_DEFAULT *QueryIndicatorListReq

func (p *MinerCoreQueryIndicatorListArgs) GetReq() (v *QueryIndicatorListReq) {
	if !p.IsSetReq() {
		return MinerCoreQueryIndicatorListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreQueryIndicatorListArgs) SetReq(val *QueryIndicatorListReq) {
	p.Req = val
}

func (p *MinerCoreQueryIndicatorListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreQueryIndicatorListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryIndicatorListArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryIndicatorListArgs = map[int16]string{
	1: "req",
}

type MinerCoreQueryIndicatorListResult struct {
	Success *QueryIndicatorListResp `thrift:"success,0,optional" frugal:"0,optional,QueryIndicatorListResp" json:"success,omitempty"`
}

func NewMinerCoreQueryIndicatorListResult() *MinerCoreQueryIndicatorListResult {
	return &MinerCoreQueryIndicatorListResult{}
}

func (p *MinerCoreQueryIndicatorListResult) InitDefault() {
}

var MinerCoreQueryIndicatorListResult_Success_DEFAULT *QueryIndicatorListResp

func (p *MinerCoreQueryIndicatorListResult) GetSuccess() (v *QueryIndicatorListResp) {
	if !p.IsSetSuccess() {
		return MinerCoreQueryIndicatorListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreQueryIndicatorListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryIndicatorListResp)
}

func (p *MinerCoreQueryIndicatorListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreQueryIndicatorListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryIndicatorListResult(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryIndicatorListResult = map[int16]string{
	0: "success",
}

type MinerCoreQueryTaskListArgs struct {
	Req *QueryTaskListReq `thrift:"req,1" frugal:"1,default,QueryTaskListReq" json:"req"`
}

func NewMinerCoreQueryTaskListArgs() *MinerCoreQueryTaskListArgs {
	return &MinerCoreQueryTaskListArgs{}
}

func (p *MinerCoreQueryTaskListArgs) InitDefault() {
}

var MinerCoreQueryTaskListArgs_Req_DEFAULT *QueryTaskListReq

func (p *MinerCoreQueryTaskListArgs) GetReq() (v *QueryTaskListReq) {
	if !p.IsSetReq() {
		return MinerCoreQueryTaskListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreQueryTaskListArgs) SetReq(val *QueryTaskListReq) {
	p.Req = val
}

func (p *MinerCoreQueryTaskListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreQueryTaskListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryTaskListArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryTaskListArgs = map[int16]string{
	1: "req",
}

type MinerCoreQueryTaskListResult struct {
	Success *QueryTaskListResp `thrift:"success,0,optional" frugal:"0,optional,QueryTaskListResp" json:"success,omitempty"`
}

func NewMinerCoreQueryTaskListResult() *MinerCoreQueryTaskListResult {
	return &MinerCoreQueryTaskListResult{}
}

func (p *MinerCoreQueryTaskListResult) InitDefault() {
}

var MinerCoreQueryTaskListResult_Success_DEFAULT *QueryTaskListResp

func (p *MinerCoreQueryTaskListResult) GetSuccess() (v *QueryTaskListResp) {
	if !p.IsSetSuccess() {
		return MinerCoreQueryTaskListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreQueryTaskListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryTaskListResp)
}

func (p *MinerCoreQueryTaskListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreQueryTaskListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryTaskListResult(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryTaskListResult = map[int16]string{
	0: "success",
}

type MinerCoreRunTaskArgs struct {
	Req *RunTaskReq `thrift:"req,1" frugal:"1,default,RunTaskReq" json:"req"`
}

func NewMinerCoreRunTaskArgs() *MinerCoreRunTaskArgs {
	return &MinerCoreRunTaskArgs{}
}

func (p *MinerCoreRunTaskArgs) InitDefault() {
}

var MinerCoreRunTaskArgs_Req_DEFAULT *RunTaskReq

func (p *MinerCoreRunTaskArgs) GetReq() (v *RunTaskReq) {
	if !p.IsSetReq() {
		return MinerCoreRunTaskArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreRunTaskArgs) SetReq(val *RunTaskReq) {
	p.Req = val
}

func (p *MinerCoreRunTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreRunTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreRunTaskArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreRunTaskArgs = map[int16]string{
	1: "req",
}

type MinerCoreRunTaskResult struct {
	Success *RunTaskResp `thrift:"success,0,optional" frugal:"0,optional,RunTaskResp" json:"success,omitempty"`
}

func NewMinerCoreRunTaskResult() *MinerCoreRunTaskResult {
	return &MinerCoreRunTaskResult{}
}

func (p *MinerCoreRunTaskResult) InitDefault() {
}

var MinerCoreRunTaskResult_Success_DEFAULT *RunTaskResp

func (p *MinerCoreRunTaskResult) GetSuccess() (v *RunTaskResp) {
	if !p.IsSetSuccess() {
		return MinerCoreRunTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreRunTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*RunTaskResp)
}

func (p *MinerCoreRunTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreRunTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreRunTaskResult(%+v)", *p)
}

var fieldIDToName_MinerCoreRunTaskResult = map[int16]string{
	0: "success",
}

type MinerCoreQueryTaskResultListArgs struct {
	Req *QueryTaskResultListReq `thrift:"req,1" frugal:"1,default,QueryTaskResultListReq" json:"req"`
}

func NewMinerCoreQueryTaskResultListArgs() *MinerCoreQueryTaskResultListArgs {
	return &MinerCoreQueryTaskResultListArgs{}
}

func (p *MinerCoreQueryTaskResultListArgs) InitDefault() {
}

var MinerCoreQueryTaskResultListArgs_Req_DEFAULT *QueryTaskResultListReq

func (p *MinerCoreQueryTaskResultListArgs) GetReq() (v *QueryTaskResultListReq) {
	if !p.IsSetReq() {
		return MinerCoreQueryTaskResultListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerCoreQueryTaskResultListArgs) SetReq(val *QueryTaskResultListReq) {
	p.Req = val
}

func (p *MinerCoreQueryTaskResultListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerCoreQueryTaskResultListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryTaskResultListArgs(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryTaskResultListArgs = map[int16]string{
	1: "req",
}

type MinerCoreQueryTaskResultListResult struct {
	Success *QueryTaskResultListResp `thrift:"success,0,optional" frugal:"0,optional,QueryTaskResultListResp" json:"success,omitempty"`
}

func NewMinerCoreQueryTaskResultListResult() *MinerCoreQueryTaskResultListResult {
	return &MinerCoreQueryTaskResultListResult{}
}

func (p *MinerCoreQueryTaskResultListResult) InitDefault() {
}

var MinerCoreQueryTaskResultListResult_Success_DEFAULT *QueryTaskResultListResp

func (p *MinerCoreQueryTaskResultListResult) GetSuccess() (v *QueryTaskResultListResp) {
	if !p.IsSetSuccess() {
		return MinerCoreQueryTaskResultListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerCoreQueryTaskResultListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryTaskResultListResp)
}

func (p *MinerCoreQueryTaskResultListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerCoreQueryTaskResultListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerCoreQueryTaskResultListResult(%+v)", *p)
}

var fieldIDToName_MinerCoreQueryTaskResultListResult = map[int16]string{
	0: "success",
}
