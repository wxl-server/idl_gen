// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package fabric_ebl

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type CompanyType int64

const (
	CompanyType_Ship   CompanyType = 1
	CompanyType_Bank   CompanyType = 2
	CompanyType_Common CompanyType = 3
)

func (p CompanyType) String() string {
	switch p {
	case CompanyType_Ship:
		return "Ship"
	case CompanyType_Bank:
		return "Bank"
	case CompanyType_Common:
		return "Common"
	}
	return "<UNSET>"
}

func CompanyTypeFromString(s string) (CompanyType, error) {
	switch s {
	case "Ship":
		return CompanyType_Ship, nil
	case "Bank":
		return CompanyType_Bank, nil
	case "Common":
		return CompanyType_Common, nil
	}
	return CompanyType(0), fmt.Errorf("not a valid CompanyType string")
}

func CompanyTypePtr(v CompanyType) *CompanyType { return &v }
func (p *CompanyType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CompanyType(result.Int64)
	return
}

func (p *CompanyType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserType int64

const (
	UserType_Admin UserType = 1
	UserType_User  UserType = 2
)

func (p UserType) String() string {
	switch p {
	case UserType_Admin:
		return "Admin"
	case UserType_User:
		return "User"
	}
	return "<UNSET>"
}

func UserTypeFromString(s string) (UserType, error) {
	switch s {
	case "Admin":
		return UserType_Admin, nil
	case "User":
		return UserType_User, nil
	}
	return UserType(0), fmt.Errorf("not a valid UserType string")
}

func UserTypePtr(v UserType) *UserType { return &v }
func (p *UserType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = UserType(result.Int64)
	return
}

func (p *UserType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CreateCompanyReq struct {
	CompanyCode   string      `thrift:"company_code,1,required" frugal:"1,required,string" json:"company_code"`
	CompanyName   string      `thrift:"company_name,2,required" frugal:"2,required,string" json:"company_name"`
	CompanyType   CompanyType `thrift:"company_type,3,required" frugal:"3,required,CompanyType" json:"company_type"`
	AdminEmail    string      `thrift:"admin_email,4,required" frugal:"4,required,string" json:"admin_email"`
	AdminPassword string      `thrift:"admin_password,5,required" frugal:"5,required,string" json:"admin_password"`
	AdminName     string      `thrift:"admin_name,6,required" frugal:"6,required,string" json:"admin_name"`
}

func NewCreateCompanyReq() *CreateCompanyReq {
	return &CreateCompanyReq{}
}

func (p *CreateCompanyReq) InitDefault() {
}

func (p *CreateCompanyReq) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *CreateCompanyReq) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *CreateCompanyReq) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}

func (p *CreateCompanyReq) GetAdminEmail() (v string) {
	return p.AdminEmail
}

func (p *CreateCompanyReq) GetAdminPassword() (v string) {
	return p.AdminPassword
}

func (p *CreateCompanyReq) GetAdminName() (v string) {
	return p.AdminName
}
func (p *CreateCompanyReq) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *CreateCompanyReq) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *CreateCompanyReq) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}
func (p *CreateCompanyReq) SetAdminEmail(val string) {
	p.AdminEmail = val
}
func (p *CreateCompanyReq) SetAdminPassword(val string) {
	p.AdminPassword = val
}
func (p *CreateCompanyReq) SetAdminName(val string) {
	p.AdminName = val
}

var fieldIDToName_CreateCompanyReq = map[int16]string{
	1: "company_code",
	2: "company_name",
	3: "company_type",
	4: "admin_email",
	5: "admin_password",
	6: "admin_name",
}

func (p *CreateCompanyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCompanyCode bool = false
	var issetCompanyName bool = false
	var issetCompanyType bool = false
	var issetAdminEmail bool = false
	var issetAdminPassword bool = false
	var issetAdminName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAdminEmail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAdminPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAdminName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCompanyCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCompanyType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAdminEmail {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAdminPassword {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAdminName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCompanyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCompanyReq[fieldId]))
}

func (p *CreateCompanyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyCode = _field
	return nil
}
func (p *CreateCompanyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *CreateCompanyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field CompanyType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CompanyType(v)
	}
	p.CompanyType = _field
	return nil
}
func (p *CreateCompanyReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdminEmail = _field
	return nil
}
func (p *CreateCompanyReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdminPassword = _field
	return nil
}
func (p *CreateCompanyReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdminName = _field
	return nil
}

func (p *CreateCompanyReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompanyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCompanyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CompanyType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("admin_email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AdminEmail); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("admin_password", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AdminPassword); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("admin_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AdminName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateCompanyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyReq(%+v)", *p)

}

func (p *CreateCompanyReq) DeepEqual(ano *CreateCompanyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CompanyCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field3DeepEqual(ano.CompanyType) {
		return false
	}
	if !p.Field4DeepEqual(ano.AdminEmail) {
		return false
	}
	if !p.Field5DeepEqual(ano.AdminPassword) {
		return false
	}
	if !p.Field6DeepEqual(ano.AdminName) {
		return false
	}
	return true
}

func (p *CreateCompanyReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CompanyCode, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field3DeepEqual(src CompanyType) bool {

	if p.CompanyType != src {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.AdminEmail, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AdminPassword, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AdminName, src) != 0 {
		return false
	}
	return true
}

type CreateCompanyResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateCompanyResp() *CreateCompanyResp {
	return &CreateCompanyResp{}
}

func (p *CreateCompanyResp) InitDefault() {
}

func (p *CreateCompanyResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateCompanyResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateCompanyResp = map[int16]string{
	1: "id",
}

func (p *CreateCompanyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCompanyResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCompanyResp[fieldId]))
}

func (p *CreateCompanyResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateCompanyResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompanyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCompanyResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCompanyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyResp(%+v)", *p)

}

func (p *CreateCompanyResp) DeepEqual(ano *CreateCompanyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateCompanyResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type LoginReq struct {
	Email    string `thrift:"email,1,required" frugal:"1,required,string" json:"email"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetEmail() (v string) {
	return p.Email
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetEmail(val string) {
	p.Email = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "email",
	2: "password",
}

func (p *LoginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEmail bool = false
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEmail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEmail {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginReq[fieldId]))
}

func (p *LoginReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *LoginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *LoginReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LoginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)

}

func (p *LoginReq) DeepEqual(ano *LoginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Email) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *LoginReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *LoginReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type LoginResp struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

func (p *LoginResp) GetToken() (v string) {
	return p.Token
}
func (p *LoginResp) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_LoginResp = map[int16]string{
	1: "token",
}

func (p *LoginResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginResp[fieldId]))
}

func (p *LoginResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *LoginResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LoginResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)

}

func (p *LoginResp) DeepEqual(ano *LoginResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *LoginResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type GetUserInfoReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewGetUserInfoReq() *GetUserInfoReq {
	return &GetUserInfoReq{}
}

func (p *GetUserInfoReq) InitDefault() {
}

func (p *GetUserInfoReq) GetToken() (v string) {
	return p.Token
}
func (p *GetUserInfoReq) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_GetUserInfoReq = map[int16]string{
	1: "token",
}

func (p *GetUserInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetUserInfoReq[fieldId]))
}

func (p *GetUserInfoReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *GetUserInfoReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoReq(%+v)", *p)

}

func (p *GetUserInfoReq) DeepEqual(ano *GetUserInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *GetUserInfoReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type GetUserInfoResp struct {
	UserId      int64       `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	UserEmail   string      `thrift:"user_email,2,required" frugal:"2,required,string" json:"user_email"`
	UserName    string      `thrift:"user_name,3,required" frugal:"3,required,string" json:"user_name"`
	UserType    UserType    `thrift:"user_type,4,required" frugal:"4,required,UserType" json:"user_type"`
	CompanyId   int64       `thrift:"company_id,5,required" frugal:"5,required,i64" json:"company_id"`
	CompanyName string      `thrift:"company_name,6,required" frugal:"6,required,string" json:"company_name"`
	CompanyCode string      `thrift:"company_code,7,required" frugal:"7,required,string" json:"company_code"`
	CompanyType CompanyType `thrift:"company_type,8,required" frugal:"8,required,CompanyType" json:"company_type"`
}

func NewGetUserInfoResp() *GetUserInfoResp {
	return &GetUserInfoResp{}
}

func (p *GetUserInfoResp) InitDefault() {
}

func (p *GetUserInfoResp) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetUserInfoResp) GetUserEmail() (v string) {
	return p.UserEmail
}

func (p *GetUserInfoResp) GetUserName() (v string) {
	return p.UserName
}

func (p *GetUserInfoResp) GetUserType() (v UserType) {
	return p.UserType
}

func (p *GetUserInfoResp) GetCompanyId() (v int64) {
	return p.CompanyId
}

func (p *GetUserInfoResp) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *GetUserInfoResp) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *GetUserInfoResp) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}
func (p *GetUserInfoResp) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetUserInfoResp) SetUserEmail(val string) {
	p.UserEmail = val
}
func (p *GetUserInfoResp) SetUserName(val string) {
	p.UserName = val
}
func (p *GetUserInfoResp) SetUserType(val UserType) {
	p.UserType = val
}
func (p *GetUserInfoResp) SetCompanyId(val int64) {
	p.CompanyId = val
}
func (p *GetUserInfoResp) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *GetUserInfoResp) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *GetUserInfoResp) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}

var fieldIDToName_GetUserInfoResp = map[int16]string{
	1: "user_id",
	2: "user_email",
	3: "user_name",
	4: "user_type",
	5: "company_id",
	6: "company_name",
	7: "company_code",
	8: "company_type",
}

func (p *GetUserInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetUserEmail bool = false
	var issetUserName bool = false
	var issetUserType bool = false
	var issetCompanyId bool = false
	var issetCompanyName bool = false
	var issetCompanyCode bool = false
	var issetCompanyType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserEmail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUserEmail {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUserName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUserType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCompanyId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCompanyCode {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetCompanyType {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetUserInfoResp[fieldId]))
}

func (p *GetUserInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *GetUserInfoResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserEmail = _field
	return nil
}
func (p *GetUserInfoResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *GetUserInfoResp) ReadField4(iprot thrift.TProtocol) error {

	var _field UserType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = UserType(v)
	}
	p.UserType = _field
	return nil
}
func (p *GetUserInfoResp) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyId = _field
	return nil
}
func (p *GetUserInfoResp) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *GetUserInfoResp) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyCode = _field
	return nil
}
func (p *GetUserInfoResp) ReadField8(iprot thrift.TProtocol) error {

	var _field CompanyType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CompanyType(v)
	}
	p.CompanyType = _field
	return nil
}

func (p *GetUserInfoResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_email", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserEmail); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.UserType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CompanyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_code", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_type", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CompanyType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetUserInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResp(%+v)", *p)

}

func (p *GetUserInfoResp) DeepEqual(ano *GetUserInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserEmail) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserType) {
		return false
	}
	if !p.Field5DeepEqual(ano.CompanyId) {
		return false
	}
	if !p.Field6DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field7DeepEqual(ano.CompanyCode) {
		return false
	}
	if !p.Field8DeepEqual(ano.CompanyType) {
		return false
	}
	return true
}

func (p *GetUserInfoResp) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserEmail, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field4DeepEqual(src UserType) bool {

	if p.UserType != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field5DeepEqual(src int64) bool {

	if p.CompanyId != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CompanyCode, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field8DeepEqual(src CompanyType) bool {

	if p.CompanyType != src {
		return false
	}
	return true
}

type GetCompanyAllListReq struct {
}

func NewGetCompanyAllListReq() *GetCompanyAllListReq {
	return &GetCompanyAllListReq{}
}

func (p *GetCompanyAllListReq) InitDefault() {
}

var fieldIDToName_GetCompanyAllListReq = map[int16]string{}

func (p *GetCompanyAllListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCompanyAllListReq) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GetCompanyAllListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCompanyAllListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompanyAllListReq(%+v)", *p)

}

func (p *GetCompanyAllListReq) DeepEqual(ano *GetCompanyAllListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetCompanyAllListResp struct {
	CompanyList []*Company `thrift:"company_list,1,required" frugal:"1,required,list<Company>" json:"company_list"`
}

func NewGetCompanyAllListResp() *GetCompanyAllListResp {
	return &GetCompanyAllListResp{}
}

func (p *GetCompanyAllListResp) InitDefault() {
}

func (p *GetCompanyAllListResp) GetCompanyList() (v []*Company) {
	return p.CompanyList
}
func (p *GetCompanyAllListResp) SetCompanyList(val []*Company) {
	p.CompanyList = val
}

var fieldIDToName_GetCompanyAllListResp = map[int16]string{
	1: "company_list",
}

func (p *GetCompanyAllListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCompanyList bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCompanyList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCompanyAllListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetCompanyAllListResp[fieldId]))
}

func (p *GetCompanyAllListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Company, 0, size)
	values := make([]Company, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CompanyList = _field
	return nil
}

func (p *GetCompanyAllListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCompanyAllListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCompanyAllListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CompanyList)); err != nil {
		return err
	}
	for _, v := range p.CompanyList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCompanyAllListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompanyAllListResp(%+v)", *p)

}

func (p *GetCompanyAllListResp) DeepEqual(ano *GetCompanyAllListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CompanyList) {
		return false
	}
	return true
}

func (p *GetCompanyAllListResp) Field1DeepEqual(src []*Company) bool {

	if len(p.CompanyList) != len(src) {
		return false
	}
	for i, v := range p.CompanyList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateEblReq struct {
	Ebl   *Ebl   `thrift:"ebl,1,required" frugal:"1,required,Ebl" json:"ebl"`
	Token string `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewCreateEblReq() *CreateEblReq {
	return &CreateEblReq{}
}

func (p *CreateEblReq) InitDefault() {
}

var CreateEblReq_Ebl_DEFAULT *Ebl

func (p *CreateEblReq) GetEbl() (v *Ebl) {
	if !p.IsSetEbl() {
		return CreateEblReq_Ebl_DEFAULT
	}
	return p.Ebl
}

func (p *CreateEblReq) GetToken() (v string) {
	return p.Token
}
func (p *CreateEblReq) SetEbl(val *Ebl) {
	p.Ebl = val
}
func (p *CreateEblReq) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_CreateEblReq = map[int16]string{
	1: "ebl",
	2: "token",
}

func (p *CreateEblReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *CreateEblReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEbl bool = false
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEbl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetToken {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblReq[fieldId]))
}

func (p *CreateEblReq) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEbl()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ebl = _field
	return nil
}
func (p *CreateEblReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *CreateEblReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ebl", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Ebl.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblReq(%+v)", *p)

}

func (p *CreateEblReq) DeepEqual(ano *CreateEblReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ebl) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *CreateEblReq) Field1DeepEqual(src *Ebl) bool {

	if !p.Ebl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEblReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type CreateEblResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateEblResp() *CreateEblResp {
	return &CreateEblResp{}
}

func (p *CreateEblResp) InitDefault() {
}

func (p *CreateEblResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateEblResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateEblResp = map[int16]string{
	1: "id",
}

func (p *CreateEblResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblResp[fieldId]))
}

func (p *CreateEblResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateEblResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblResp(%+v)", *p)

}

func (p *CreateEblResp) DeepEqual(ano *CreateEblResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateEblResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type Ebl struct {
	EblNo                  string   `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID        string   `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	OriginCompanyName      string   `thrift:"originCompanyName,3,required" frugal:"3,required,string" json:"originCompanyName"`
	ShipperCompanyID       string   `thrift:"shipperCompanyID,4,required" frugal:"4,required,string" json:"shipperCompanyID"`
	ShipperCompanyName     string   `thrift:"shipperCompanyName,5,required" frugal:"5,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyID     string   `thrift:"consigneeCompanyID,6,required" frugal:"6,required,string" json:"consigneeCompanyID"`
	ConsigneeCompanyName   string   `thrift:"consigneeCompanyName,7,required" frugal:"7,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyID   string   `thrift:"notifyPartyCompanyID,8,required" frugal:"8,required,string" json:"notifyPartyCompanyID"`
	NotifyPartyCompanyName string   `thrift:"notifyPartyCompanyName,9,required" frugal:"9,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string   `thrift:"placeOfReceipt,10,required" frugal:"10,required,string" json:"placeOfReceipt"`
	OceanVessel            string   `thrift:"oceanVessel,11,required" frugal:"11,required,string" json:"oceanVessel"`
	PortOfLoading          string   `thrift:"portOfLoading,12,required" frugal:"12,required,string" json:"portOfLoading"`
	PortOfDescharge        string   `thrift:"portOfDescharge,13,required" frugal:"13,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string   `thrift:"placeOfDestination,14,required" frugal:"14,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string   `thrift:"placeOfDelivery,15,required" frugal:"15,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string   `thrift:"shippingMarkes,16,required" frugal:"16,required,string" json:"shippingMarkes"`
	QuantityOfPackages     float64  `thrift:"quantityOfPackages,17,required" frugal:"17,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW       string   `thrift:"kindOfPackagesGW,18,required" frugal:"18,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string   `thrift:"kindOfPackagesM,19,required" frugal:"19,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string   `thrift:"descriptionOfGoods,20,required" frugal:"20,required,string" json:"descriptionOfGoods"`
	GrossWeight            float64  `thrift:"grossWeight,21,required" frugal:"21,required,double" json:"grossWeight"`
	Measurement            float64  `thrift:"measurement,22,required" frugal:"22,required,double" json:"measurement"`
	FreightAndCharges      string   `thrift:"freightAndCharges,23,required" frugal:"23,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string   `thrift:"placeOfIssue,24,required" frugal:"24,required,string" json:"placeOfIssue"`
	DateOfIssue            int64    `thrift:"dateOfIssue,25,required" frugal:"25,required,i64" json:"dateOfIssue"`
	DeliveryAgent          string   `thrift:"deliveryAgent,26,required" frugal:"26,required,string" json:"deliveryAgent"`
	ShippedOnBoard         int64    `thrift:"shippedOnBoard,27,required" frugal:"27,required,i64" json:"shippedOnBoard"`
	NumOfEBL               int64    `thrift:"numOfEBL,28,required" frugal:"28,required,i64" json:"numOfEBL"`
	DateOfIssueDeadline    int64    `thrift:"dateOfIssueDeadline,29,required" frugal:"29,required,i64" json:"dateOfIssueDeadline"`
	Status                 string   `thrift:"status,30,required" frugal:"30,required,string" json:"status"`
	File                   string   `thrift:"file,31,required" frugal:"31,required,string" json:"file"`
	ContractFiles          []string `thrift:"contractFiles,32,required" frugal:"32,required,list<string>" json:"contractFiles"`
	InvoiceFiles           []string `thrift:"invoiceFiles,33,required" frugal:"33,required,list<string>" json:"invoiceFiles"`
	TransferCompanyID      string   `thrift:"transferCompanyID,34,required" frugal:"34,required,string" json:"transferCompanyID"`
	TransferCompanyName    string   `thrift:"transferCompanyName,35,required" frugal:"35,required,string" json:"transferCompanyName"`
	CompanyID              int64    `thrift:"companyID,36,required" frugal:"36,required,i64" json:"companyID"`
	CompanyName            string   `thrift:"companyName,37,required" frugal:"37,required,string" json:"companyName"`
}

func NewEbl() *Ebl {
	return &Ebl{}
}

func (p *Ebl) InitDefault() {
}

func (p *Ebl) GetEblNo() (v string) {
	return p.EblNo
}

func (p *Ebl) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *Ebl) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *Ebl) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *Ebl) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *Ebl) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *Ebl) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *Ebl) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *Ebl) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *Ebl) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *Ebl) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *Ebl) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *Ebl) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *Ebl) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *Ebl) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *Ebl) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *Ebl) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *Ebl) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *Ebl) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *Ebl) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *Ebl) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *Ebl) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *Ebl) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *Ebl) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *Ebl) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *Ebl) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *Ebl) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *Ebl) GetNumOfEBL() (v int64) {
	return p.NumOfEBL
}

func (p *Ebl) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *Ebl) GetStatus() (v string) {
	return p.Status
}

func (p *Ebl) GetFile() (v string) {
	return p.File
}

func (p *Ebl) GetContractFiles() (v []string) {
	return p.ContractFiles
}

func (p *Ebl) GetInvoiceFiles() (v []string) {
	return p.InvoiceFiles
}

func (p *Ebl) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *Ebl) GetTransferCompanyName() (v string) {
	return p.TransferCompanyName
}

func (p *Ebl) GetCompanyID() (v int64) {
	return p.CompanyID
}

func (p *Ebl) GetCompanyName() (v string) {
	return p.CompanyName
}
func (p *Ebl) SetEblNo(val string) {
	p.EblNo = val
}
func (p *Ebl) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *Ebl) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *Ebl) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *Ebl) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *Ebl) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *Ebl) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *Ebl) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *Ebl) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *Ebl) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *Ebl) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *Ebl) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *Ebl) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *Ebl) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *Ebl) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *Ebl) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *Ebl) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *Ebl) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *Ebl) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *Ebl) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *Ebl) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *Ebl) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *Ebl) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *Ebl) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *Ebl) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *Ebl) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *Ebl) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *Ebl) SetNumOfEBL(val int64) {
	p.NumOfEBL = val
}
func (p *Ebl) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *Ebl) SetStatus(val string) {
	p.Status = val
}
func (p *Ebl) SetFile(val string) {
	p.File = val
}
func (p *Ebl) SetContractFiles(val []string) {
	p.ContractFiles = val
}
func (p *Ebl) SetInvoiceFiles(val []string) {
	p.InvoiceFiles = val
}
func (p *Ebl) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *Ebl) SetTransferCompanyName(val string) {
	p.TransferCompanyName = val
}
func (p *Ebl) SetCompanyID(val int64) {
	p.CompanyID = val
}
func (p *Ebl) SetCompanyName(val string) {
	p.CompanyName = val
}

var fieldIDToName_Ebl = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "originCompanyName",
	4:  "shipperCompanyID",
	5:  "shipperCompanyName",
	6:  "consigneeCompanyID",
	7:  "consigneeCompanyName",
	8:  "notifyPartyCompanyID",
	9:  "notifyPartyCompanyName",
	10: "placeOfReceipt",
	11: "oceanVessel",
	12: "portOfLoading",
	13: "portOfDescharge",
	14: "placeOfDestination",
	15: "placeOfDelivery",
	16: "shippingMarkes",
	17: "quantityOfPackages",
	18: "kindOfPackagesGW",
	19: "kindOfPackagesM",
	20: "descriptionOfGoods",
	21: "grossWeight",
	22: "measurement",
	23: "freightAndCharges",
	24: "placeOfIssue",
	25: "dateOfIssue",
	26: "deliveryAgent",
	27: "shippedOnBoard",
	28: "numOfEBL",
	29: "dateOfIssueDeadline",
	30: "status",
	31: "file",
	32: "contractFiles",
	33: "invoiceFiles",
	34: "transferCompanyID",
	35: "transferCompanyName",
	36: "companyID",
	37: "companyName",
}

func (p *Ebl) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblNo bool = false
	var issetOriginCompanyID bool = false
	var issetOriginCompanyName bool = false
	var issetShipperCompanyID bool = false
	var issetShipperCompanyName bool = false
	var issetConsigneeCompanyID bool = false
	var issetConsigneeCompanyName bool = false
	var issetNotifyPartyCompanyID bool = false
	var issetNotifyPartyCompanyName bool = false
	var issetPlaceOfReceipt bool = false
	var issetOceanVessel bool = false
	var issetPortOfLoading bool = false
	var issetPortOfDescharge bool = false
	var issetPlaceOfDestination bool = false
	var issetPlaceOfDelivery bool = false
	var issetShippingMarkes bool = false
	var issetQuantityOfPackages bool = false
	var issetKindOfPackagesGW bool = false
	var issetKindOfPackagesM bool = false
	var issetDescriptionOfGoods bool = false
	var issetGrossWeight bool = false
	var issetMeasurement bool = false
	var issetFreightAndCharges bool = false
	var issetPlaceOfIssue bool = false
	var issetDateOfIssue bool = false
	var issetDeliveryAgent bool = false
	var issetShippedOnBoard bool = false
	var issetNumOfEBL bool = false
	var issetDateOfIssueDeadline bool = false
	var issetStatus bool = false
	var issetFile bool = false
	var issetContractFiles bool = false
	var issetInvoiceFiles bool = false
	var issetTransferCompanyID bool = false
	var issetTransferCompanyName bool = false
	var issetCompanyID bool = false
	var issetCompanyName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfReceipt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetOceanVessel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfLoading = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfDescharge = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDestination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDelivery = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippingMarkes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetQuantityOfPackages = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesGW = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesM = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionOfGoods = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetGrossWeight = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetMeasurement = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreightAndCharges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeliveryAgent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippedOnBoard = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumOfEBL = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssueDeadline = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
				issetFile = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
				issetContractFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoiceFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyName {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyID {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyName {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyID {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfReceipt {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetOceanVessel {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetPortOfLoading {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetPortOfDescharge {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDestination {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDelivery {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetShippingMarkes {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetQuantityOfPackages {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesGW {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesM {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionOfGoods {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetGrossWeight {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetMeasurement {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetFreightAndCharges {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfIssue {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssue {
		fieldId = 25
		goto RequiredFieldNotSetError
	}

	if !issetDeliveryAgent {
		fieldId = 26
		goto RequiredFieldNotSetError
	}

	if !issetShippedOnBoard {
		fieldId = 27
		goto RequiredFieldNotSetError
	}

	if !issetNumOfEBL {
		fieldId = 28
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssueDeadline {
		fieldId = 29
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 30
		goto RequiredFieldNotSetError
	}

	if !issetFile {
		fieldId = 31
		goto RequiredFieldNotSetError
	}

	if !issetContractFiles {
		fieldId = 32
		goto RequiredFieldNotSetError
	}

	if !issetInvoiceFiles {
		fieldId = 33
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyID {
		fieldId = 34
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyName {
		fieldId = 35
		goto RequiredFieldNotSetError
	}

	if !issetCompanyID {
		fieldId = 36
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 37
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Ebl[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Ebl[fieldId]))
}

func (p *Ebl) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *Ebl) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyID = _field
	return nil
}
func (p *Ebl) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyName = _field
	return nil
}
func (p *Ebl) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyID = _field
	return nil
}
func (p *Ebl) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyName = _field
	return nil
}
func (p *Ebl) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyID = _field
	return nil
}
func (p *Ebl) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyName = _field
	return nil
}
func (p *Ebl) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyID = _field
	return nil
}
func (p *Ebl) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyName = _field
	return nil
}
func (p *Ebl) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfReceipt = _field
	return nil
}
func (p *Ebl) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OceanVessel = _field
	return nil
}
func (p *Ebl) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfLoading = _field
	return nil
}
func (p *Ebl) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfDescharge = _field
	return nil
}
func (p *Ebl) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDestination = _field
	return nil
}
func (p *Ebl) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDelivery = _field
	return nil
}
func (p *Ebl) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippingMarkes = _field
	return nil
}
func (p *Ebl) ReadField17(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QuantityOfPackages = _field
	return nil
}
func (p *Ebl) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesGW = _field
	return nil
}
func (p *Ebl) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesM = _field
	return nil
}
func (p *Ebl) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionOfGoods = _field
	return nil
}
func (p *Ebl) ReadField21(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GrossWeight = _field
	return nil
}
func (p *Ebl) ReadField22(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Measurement = _field
	return nil
}
func (p *Ebl) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FreightAndCharges = _field
	return nil
}
func (p *Ebl) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfIssue = _field
	return nil
}
func (p *Ebl) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssue = _field
	return nil
}
func (p *Ebl) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeliveryAgent = _field
	return nil
}
func (p *Ebl) ReadField27(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippedOnBoard = _field
	return nil
}
func (p *Ebl) ReadField28(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumOfEBL = _field
	return nil
}
func (p *Ebl) ReadField29(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssueDeadline = _field
	return nil
}
func (p *Ebl) ReadField30(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *Ebl) ReadField31(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.File = _field
	return nil
}
func (p *Ebl) ReadField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ContractFiles = _field
	return nil
}
func (p *Ebl) ReadField33(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InvoiceFiles = _field
	return nil
}
func (p *Ebl) ReadField34(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyID = _field
	return nil
}
func (p *Ebl) ReadField35(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyName = _field
	return nil
}
func (p *Ebl) ReadField36(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyID = _field
	return nil
}
func (p *Ebl) ReadField37(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}

func (p *Ebl) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Ebl"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Ebl) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Ebl) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Ebl) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Ebl) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyID", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Ebl) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Ebl) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyID", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Ebl) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Ebl) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyID", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Ebl) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyName", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Ebl) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfReceipt", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfReceipt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Ebl) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("oceanVessel", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OceanVessel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Ebl) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfLoading", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfLoading); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Ebl) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfDescharge", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfDescharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Ebl) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDestination", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDestination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Ebl) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDelivery", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDelivery); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *Ebl) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippingMarkes", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShippingMarkes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Ebl) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("quantityOfPackages", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.QuantityOfPackages); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *Ebl) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesGW", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesGW); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *Ebl) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesM", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesM); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *Ebl) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("descriptionOfGoods", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionOfGoods); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *Ebl) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grossWeight", thrift.DOUBLE, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.GrossWeight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *Ebl) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("measurement", thrift.DOUBLE, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Measurement); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *Ebl) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("freightAndCharges", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreightAndCharges); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *Ebl) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfIssue", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *Ebl) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssue", thrift.I64, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *Ebl) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deliveryAgent", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DeliveryAgent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *Ebl) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippedOnBoard", thrift.I64, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ShippedOnBoard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *Ebl) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numOfEBL", thrift.I64, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NumOfEBL); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *Ebl) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssueDeadline", thrift.I64, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssueDeadline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *Ebl) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *Ebl) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.File); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *Ebl) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contractFiles", thrift.LIST, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContractFiles)); err != nil {
		return err
	}
	for _, v := range p.ContractFiles {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *Ebl) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoiceFiles", thrift.LIST, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InvoiceFiles)); err != nil {
		return err
	}
	for _, v := range p.InvoiceFiles {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *Ebl) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyID", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *Ebl) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyName", thrift.STRING, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *Ebl) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyID", thrift.I64, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *Ebl) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyName", thrift.STRING, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *Ebl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ebl(%+v)", *p)

}

func (p *Ebl) DeepEqual(ano *Ebl) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.OriginCompanyID) {
		return false
	}
	if !p.Field3DeepEqual(ano.OriginCompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.ShipperCompanyID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ShipperCompanyName) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConsigneeCompanyID) {
		return false
	}
	if !p.Field7DeepEqual(ano.ConsigneeCompanyName) {
		return false
	}
	if !p.Field8DeepEqual(ano.NotifyPartyCompanyID) {
		return false
	}
	if !p.Field9DeepEqual(ano.NotifyPartyCompanyName) {
		return false
	}
	if !p.Field10DeepEqual(ano.PlaceOfReceipt) {
		return false
	}
	if !p.Field11DeepEqual(ano.OceanVessel) {
		return false
	}
	if !p.Field12DeepEqual(ano.PortOfLoading) {
		return false
	}
	if !p.Field13DeepEqual(ano.PortOfDescharge) {
		return false
	}
	if !p.Field14DeepEqual(ano.PlaceOfDestination) {
		return false
	}
	if !p.Field15DeepEqual(ano.PlaceOfDelivery) {
		return false
	}
	if !p.Field16DeepEqual(ano.ShippingMarkes) {
		return false
	}
	if !p.Field17DeepEqual(ano.QuantityOfPackages) {
		return false
	}
	if !p.Field18DeepEqual(ano.KindOfPackagesGW) {
		return false
	}
	if !p.Field19DeepEqual(ano.KindOfPackagesM) {
		return false
	}
	if !p.Field20DeepEqual(ano.DescriptionOfGoods) {
		return false
	}
	if !p.Field21DeepEqual(ano.GrossWeight) {
		return false
	}
	if !p.Field22DeepEqual(ano.Measurement) {
		return false
	}
	if !p.Field23DeepEqual(ano.FreightAndCharges) {
		return false
	}
	if !p.Field24DeepEqual(ano.PlaceOfIssue) {
		return false
	}
	if !p.Field25DeepEqual(ano.DateOfIssue) {
		return false
	}
	if !p.Field26DeepEqual(ano.DeliveryAgent) {
		return false
	}
	if !p.Field27DeepEqual(ano.ShippedOnBoard) {
		return false
	}
	if !p.Field28DeepEqual(ano.NumOfEBL) {
		return false
	}
	if !p.Field29DeepEqual(ano.DateOfIssueDeadline) {
		return false
	}
	if !p.Field30DeepEqual(ano.Status) {
		return false
	}
	if !p.Field31DeepEqual(ano.File) {
		return false
	}
	if !p.Field32DeepEqual(ano.ContractFiles) {
		return false
	}
	if !p.Field33DeepEqual(ano.InvoiceFiles) {
		return false
	}
	if !p.Field34DeepEqual(ano.TransferCompanyID) {
		return false
	}
	if !p.Field35DeepEqual(ano.TransferCompanyName) {
		return false
	}
	if !p.Field36DeepEqual(ano.CompanyID) {
		return false
	}
	if !p.Field37DeepEqual(ano.CompanyName) {
		return false
	}
	return true
}

func (p *Ebl) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field8DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field9DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfReceipt, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field11DeepEqual(src string) bool {

	if strings.Compare(p.OceanVessel, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field12DeepEqual(src string) bool {

	if strings.Compare(p.PortOfLoading, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field13DeepEqual(src string) bool {

	if strings.Compare(p.PortOfDescharge, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field14DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDestination, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field15DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDelivery, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ShippingMarkes, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field17DeepEqual(src float64) bool {

	if p.QuantityOfPackages != src {
		return false
	}
	return true
}
func (p *Ebl) Field18DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesGW, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field19DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesM, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field20DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionOfGoods, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field21DeepEqual(src float64) bool {

	if p.GrossWeight != src {
		return false
	}
	return true
}
func (p *Ebl) Field22DeepEqual(src float64) bool {

	if p.Measurement != src {
		return false
	}
	return true
}
func (p *Ebl) Field23DeepEqual(src string) bool {

	if strings.Compare(p.FreightAndCharges, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field24DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfIssue, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field25DeepEqual(src int64) bool {

	if p.DateOfIssue != src {
		return false
	}
	return true
}
func (p *Ebl) Field26DeepEqual(src string) bool {

	if strings.Compare(p.DeliveryAgent, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field27DeepEqual(src int64) bool {

	if p.ShippedOnBoard != src {
		return false
	}
	return true
}
func (p *Ebl) Field28DeepEqual(src int64) bool {

	if p.NumOfEBL != src {
		return false
	}
	return true
}
func (p *Ebl) Field29DeepEqual(src int64) bool {

	if p.DateOfIssueDeadline != src {
		return false
	}
	return true
}
func (p *Ebl) Field30DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field31DeepEqual(src string) bool {

	if strings.Compare(p.File, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field32DeepEqual(src []string) bool {

	if len(p.ContractFiles) != len(src) {
		return false
	}
	for i, v := range p.ContractFiles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Ebl) Field33DeepEqual(src []string) bool {

	if len(p.InvoiceFiles) != len(src) {
		return false
	}
	for i, v := range p.InvoiceFiles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Ebl) Field34DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field35DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field36DeepEqual(src int64) bool {

	if p.CompanyID != src {
		return false
	}
	return true
}
func (p *Ebl) Field37DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}

type QueryAllEblListReq struct {
	Token    string  `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Bookmark *string `thrift:"bookmark,3,optional" frugal:"3,optional,string" json:"bookmark,omitempty"`
}

func NewQueryAllEblListReq() *QueryAllEblListReq {
	return &QueryAllEblListReq{}
}

func (p *QueryAllEblListReq) InitDefault() {
}

func (p *QueryAllEblListReq) GetToken() (v string) {
	return p.Token
}

var QueryAllEblListReq_PageSize_DEFAULT int64

func (p *QueryAllEblListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return QueryAllEblListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var QueryAllEblListReq_Bookmark_DEFAULT string

func (p *QueryAllEblListReq) GetBookmark() (v string) {
	if !p.IsSetBookmark() {
		return QueryAllEblListReq_Bookmark_DEFAULT
	}
	return *p.Bookmark
}
func (p *QueryAllEblListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryAllEblListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *QueryAllEblListReq) SetBookmark(val *string) {
	p.Bookmark = val
}

var fieldIDToName_QueryAllEblListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "bookmark",
}

func (p *QueryAllEblListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *QueryAllEblListReq) IsSetBookmark() bool {
	return p.Bookmark != nil
}

func (p *QueryAllEblListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryAllEblListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryAllEblListReq[fieldId]))
}

func (p *QueryAllEblListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryAllEblListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryAllEblListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Bookmark = _field
	return nil
}

func (p *QueryAllEblListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryAllEblListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryAllEblListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryAllEblListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBookmark() {
		if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Bookmark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryAllEblListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllEblListReq(%+v)", *p)

}

func (p *QueryAllEblListReq) DeepEqual(ano *QueryAllEblListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	return true
}

func (p *QueryAllEblListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryAllEblListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *QueryAllEblListReq) Field3DeepEqual(src *string) bool {

	if p.Bookmark == src {
		return true
	} else if p.Bookmark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Bookmark, *src) != 0 {
		return false
	}
	return true
}

type QueryAllEblListResp struct {
	EblList             []*Ebl `thrift:"eblList,1,required" frugal:"1,required,list<Ebl>" json:"eblList"`
	FetchedRecordsCount int64  `thrift:"fetchedRecordsCount,2,required" frugal:"2,required,i64" json:"fetchedRecordsCount"`
	Bookmark            string `thrift:"bookmark,3,required" frugal:"3,required,string" json:"bookmark"`
}

func NewQueryAllEblListResp() *QueryAllEblListResp {
	return &QueryAllEblListResp{}
}

func (p *QueryAllEblListResp) InitDefault() {
}

func (p *QueryAllEblListResp) GetEblList() (v []*Ebl) {
	return p.EblList
}

func (p *QueryAllEblListResp) GetFetchedRecordsCount() (v int64) {
	return p.FetchedRecordsCount
}

func (p *QueryAllEblListResp) GetBookmark() (v string) {
	return p.Bookmark
}
func (p *QueryAllEblListResp) SetEblList(val []*Ebl) {
	p.EblList = val
}
func (p *QueryAllEblListResp) SetFetchedRecordsCount(val int64) {
	p.FetchedRecordsCount = val
}
func (p *QueryAllEblListResp) SetBookmark(val string) {
	p.Bookmark = val
}

var fieldIDToName_QueryAllEblListResp = map[int16]string{
	1: "eblList",
	2: "fetchedRecordsCount",
	3: "bookmark",
}

func (p *QueryAllEblListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblList bool = false
	var issetFetchedRecordsCount bool = false
	var issetBookmark bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFetchedRecordsCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBookmark = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFetchedRecordsCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBookmark {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryAllEblListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryAllEblListResp[fieldId]))
}

func (p *QueryAllEblListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Ebl, 0, size)
	values := make([]Ebl, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EblList = _field
	return nil
}
func (p *QueryAllEblListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FetchedRecordsCount = _field
	return nil
}
func (p *QueryAllEblListResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Bookmark = _field
	return nil
}

func (p *QueryAllEblListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryAllEblListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EblList)); err != nil {
		return err
	}
	for _, v := range p.EblList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryAllEblListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fetchedRecordsCount", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FetchedRecordsCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryAllEblListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Bookmark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryAllEblListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllEblListResp(%+v)", *p)

}

func (p *QueryAllEblListResp) DeepEqual(ano *QueryAllEblListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblList) {
		return false
	}
	if !p.Field2DeepEqual(ano.FetchedRecordsCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	return true
}

func (p *QueryAllEblListResp) Field1DeepEqual(src []*Ebl) bool {

	if len(p.EblList) != len(src) {
		return false
	}
	for i, v := range p.EblList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryAllEblListResp) Field2DeepEqual(src int64) bool {

	if p.FetchedRecordsCount != src {
		return false
	}
	return true
}
func (p *QueryAllEblListResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Bookmark, src) != 0 {
		return false
	}
	return true
}

type QueryEblListReq struct {
	Token     string  `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize  *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Bookmark  *string `thrift:"bookmark,3,optional" frugal:"3,optional,string" json:"bookmark,omitempty"`
	EblFilter *Ebl    `thrift:"eblFilter,4,required" frugal:"4,required,Ebl" json:"eblFilter"`
}

func NewQueryEblListReq() *QueryEblListReq {
	return &QueryEblListReq{}
}

func (p *QueryEblListReq) InitDefault() {
}

func (p *QueryEblListReq) GetToken() (v string) {
	return p.Token
}

var QueryEblListReq_PageSize_DEFAULT int64

func (p *QueryEblListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return QueryEblListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var QueryEblListReq_Bookmark_DEFAULT string

func (p *QueryEblListReq) GetBookmark() (v string) {
	if !p.IsSetBookmark() {
		return QueryEblListReq_Bookmark_DEFAULT
	}
	return *p.Bookmark
}

var QueryEblListReq_EblFilter_DEFAULT *Ebl

func (p *QueryEblListReq) GetEblFilter() (v *Ebl) {
	if !p.IsSetEblFilter() {
		return QueryEblListReq_EblFilter_DEFAULT
	}
	return p.EblFilter
}
func (p *QueryEblListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryEblListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *QueryEblListReq) SetBookmark(val *string) {
	p.Bookmark = val
}
func (p *QueryEblListReq) SetEblFilter(val *Ebl) {
	p.EblFilter = val
}

var fieldIDToName_QueryEblListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "bookmark",
	4: "eblFilter",
}

func (p *QueryEblListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *QueryEblListReq) IsSetBookmark() bool {
	return p.Bookmark != nil
}

func (p *QueryEblListReq) IsSetEblFilter() bool {
	return p.EblFilter != nil
}

func (p *QueryEblListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetEblFilter bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblFilter = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEblFilter {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEblListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryEblListReq[fieldId]))
}

func (p *QueryEblListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryEblListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryEblListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Bookmark = _field
	return nil
}
func (p *QueryEblListReq) ReadField4(iprot thrift.TProtocol) error {
	_field := NewEbl()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EblFilter = _field
	return nil
}

func (p *QueryEblListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEblListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryEblListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryEblListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBookmark() {
		if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Bookmark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryEblListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblFilter", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EblFilter.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryEblListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblListReq(%+v)", *p)

}

func (p *QueryEblListReq) DeepEqual(ano *QueryEblListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	if !p.Field4DeepEqual(ano.EblFilter) {
		return false
	}
	return true
}

func (p *QueryEblListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryEblListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *QueryEblListReq) Field3DeepEqual(src *string) bool {

	if p.Bookmark == src {
		return true
	} else if p.Bookmark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Bookmark, *src) != 0 {
		return false
	}
	return true
}
func (p *QueryEblListReq) Field4DeepEqual(src *Ebl) bool {

	if !p.EblFilter.DeepEqual(src) {
		return false
	}
	return true
}

type QueryEblListResp struct {
	EblList             []*Ebl `thrift:"eblList,1,required" frugal:"1,required,list<Ebl>" json:"eblList"`
	FetchedRecordsCount int64  `thrift:"fetchedRecordsCount,2,required" frugal:"2,required,i64" json:"fetchedRecordsCount"`
	Bookmark            string `thrift:"bookmark,3,required" frugal:"3,required,string" json:"bookmark"`
}

func NewQueryEblListResp() *QueryEblListResp {
	return &QueryEblListResp{}
}

func (p *QueryEblListResp) InitDefault() {
}

func (p *QueryEblListResp) GetEblList() (v []*Ebl) {
	return p.EblList
}

func (p *QueryEblListResp) GetFetchedRecordsCount() (v int64) {
	return p.FetchedRecordsCount
}

func (p *QueryEblListResp) GetBookmark() (v string) {
	return p.Bookmark
}
func (p *QueryEblListResp) SetEblList(val []*Ebl) {
	p.EblList = val
}
func (p *QueryEblListResp) SetFetchedRecordsCount(val int64) {
	p.FetchedRecordsCount = val
}
func (p *QueryEblListResp) SetBookmark(val string) {
	p.Bookmark = val
}

var fieldIDToName_QueryEblListResp = map[int16]string{
	1: "eblList",
	2: "fetchedRecordsCount",
	3: "bookmark",
}

func (p *QueryEblListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblList bool = false
	var issetFetchedRecordsCount bool = false
	var issetBookmark bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFetchedRecordsCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBookmark = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFetchedRecordsCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBookmark {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEblListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryEblListResp[fieldId]))
}

func (p *QueryEblListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Ebl, 0, size)
	values := make([]Ebl, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EblList = _field
	return nil
}
func (p *QueryEblListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FetchedRecordsCount = _field
	return nil
}
func (p *QueryEblListResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Bookmark = _field
	return nil
}

func (p *QueryEblListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEblListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EblList)); err != nil {
		return err
	}
	for _, v := range p.EblList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryEblListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fetchedRecordsCount", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FetchedRecordsCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryEblListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Bookmark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryEblListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblListResp(%+v)", *p)

}

func (p *QueryEblListResp) DeepEqual(ano *QueryEblListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblList) {
		return false
	}
	if !p.Field2DeepEqual(ano.FetchedRecordsCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	return true
}

func (p *QueryEblListResp) Field1DeepEqual(src []*Ebl) bool {

	if len(p.EblList) != len(src) {
		return false
	}
	for i, v := range p.EblList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryEblListResp) Field2DeepEqual(src int64) bool {

	if p.FetchedRecordsCount != src {
		return false
	}
	return true
}
func (p *QueryEblListResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Bookmark, src) != 0 {
		return false
	}
	return true
}

type OperateEblReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	EblNo string `thrift:"eblNo,2,required" frugal:"2,required,string" json:"eblNo"`
	Type  string `thrift:"type,3,required" frugal:"3,required,string" json:"type"`
}

func NewOperateEblReq() *OperateEblReq {
	return &OperateEblReq{}
}

func (p *OperateEblReq) InitDefault() {
}

func (p *OperateEblReq) GetToken() (v string) {
	return p.Token
}

func (p *OperateEblReq) GetEblNo() (v string) {
	return p.EblNo
}

func (p *OperateEblReq) GetType() (v string) {
	return p.Type
}
func (p *OperateEblReq) SetToken(val string) {
	p.Token = val
}
func (p *OperateEblReq) SetEblNo(val string) {
	p.EblNo = val
}
func (p *OperateEblReq) SetType(val string) {
	p.Type = val
}

var fieldIDToName_OperateEblReq = map[int16]string{
	1: "token",
	2: "eblNo",
	3: "type",
}

func (p *OperateEblReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetEblNo bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEblNo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OperateEblReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_OperateEblReq[fieldId]))
}

func (p *OperateEblReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *OperateEblReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *OperateEblReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}

func (p *OperateEblReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEblReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OperateEblReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OperateEblReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OperateEblReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *OperateEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateEblReq(%+v)", *p)

}

func (p *OperateEblReq) DeepEqual(ano *OperateEblReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *OperateEblReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *OperateEblReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *OperateEblReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}

type OperateEblResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewOperateEblResp() *OperateEblResp {
	return &OperateEblResp{}
}

func (p *OperateEblResp) InitDefault() {
}

func (p *OperateEblResp) GetId() (v int64) {
	return p.Id
}
func (p *OperateEblResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_OperateEblResp = map[int16]string{
	1: "id",
}

func (p *OperateEblResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OperateEblResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_OperateEblResp[fieldId]))
}

func (p *OperateEblResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *OperateEblResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEblResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OperateEblResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OperateEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateEblResp(%+v)", *p)

}

func (p *OperateEblResp) DeepEqual(ano *OperateEblResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *OperateEblResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type Company struct {
	Id          int64       `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	CompanyCode string      `thrift:"company_code,2,required" frugal:"2,required,string" json:"company_code"`
	CompanyName string      `thrift:"company_name,3,required" frugal:"3,required,string" json:"company_name"`
	CompanyType CompanyType `thrift:"company_type,4,required" frugal:"4,required,CompanyType" json:"company_type"`
}

func NewCompany() *Company {
	return &Company{}
}

func (p *Company) InitDefault() {
}

func (p *Company) GetId() (v int64) {
	return p.Id
}

func (p *Company) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *Company) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *Company) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}
func (p *Company) SetId(val int64) {
	p.Id = val
}
func (p *Company) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *Company) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *Company) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}

var fieldIDToName_Company = map[int16]string{
	1: "id",
	2: "company_code",
	3: "company_name",
	4: "company_type",
}

func (p *Company) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCompanyCode bool = false
	var issetCompanyName bool = false
	var issetCompanyType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCompanyCode {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCompanyType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Company[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Company[fieldId]))
}

func (p *Company) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Company) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyCode = _field
	return nil
}
func (p *Company) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *Company) ReadField4(iprot thrift.TProtocol) error {

	var _field CompanyType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CompanyType(v)
	}
	p.CompanyType = _field
	return nil
}

func (p *Company) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Company"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Company) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Company) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_code", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Company) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Company) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CompanyType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Company) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Company(%+v)", *p)

}

func (p *Company) DeepEqual(ano *Company) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompanyCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.CompanyType) {
		return false
	}
	return true
}

func (p *Company) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Company) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CompanyCode, src) != 0 {
		return false
	}
	return true
}
func (p *Company) Field3DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Company) Field4DeepEqual(src CompanyType) bool {

	if p.CompanyType != src {
		return false
	}
	return true
}

type FabricEbl interface {
	CreateCompany(ctx context.Context, req *CreateCompanyReq) (r *CreateCompanyResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	GetUserInfo(ctx context.Context, req *GetUserInfoReq) (r *GetUserInfoResp, err error)

	GetCompanyAllList(ctx context.Context, req *GetCompanyAllListReq) (r *GetCompanyAllListResp, err error)

	CreateEbl(ctx context.Context, req *CreateEblReq) (r *CreateEblResp, err error)

	QueryAllEblList(ctx context.Context, req *QueryAllEblListReq) (r *QueryAllEblListResp, err error)

	QueryEblList(ctx context.Context, req *QueryEblListReq) (r *QueryEblListResp, err error)

	OperateEbl(ctx context.Context, req *OperateEblReq) (r *OperateEblResp, err error)
}

type FabricEblCreateCompanyArgs struct {
	Req *CreateCompanyReq `thrift:"req,1" frugal:"1,default,CreateCompanyReq" json:"req"`
}

func NewFabricEblCreateCompanyArgs() *FabricEblCreateCompanyArgs {
	return &FabricEblCreateCompanyArgs{}
}

func (p *FabricEblCreateCompanyArgs) InitDefault() {
}

var FabricEblCreateCompanyArgs_Req_DEFAULT *CreateCompanyReq

func (p *FabricEblCreateCompanyArgs) GetReq() (v *CreateCompanyReq) {
	if !p.IsSetReq() {
		return FabricEblCreateCompanyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateCompanyArgs) SetReq(val *CreateCompanyReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateCompanyArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateCompanyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateCompanyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateCompanyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateCompanyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateCompanyArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompany_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateCompanyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyArgs(%+v)", *p)

}

func (p *FabricEblCreateCompanyArgs) DeepEqual(ano *FabricEblCreateCompanyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateCompanyArgs) Field1DeepEqual(src *CreateCompanyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateCompanyResult struct {
	Success *CreateCompanyResp `thrift:"success,0,optional" frugal:"0,optional,CreateCompanyResp" json:"success,omitempty"`
}

func NewFabricEblCreateCompanyResult() *FabricEblCreateCompanyResult {
	return &FabricEblCreateCompanyResult{}
}

func (p *FabricEblCreateCompanyResult) InitDefault() {
}

var FabricEblCreateCompanyResult_Success_DEFAULT *CreateCompanyResp

func (p *FabricEblCreateCompanyResult) GetSuccess() (v *CreateCompanyResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateCompanyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateCompanyResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCompanyResp)
}

var fieldIDToName_FabricEblCreateCompanyResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateCompanyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateCompanyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateCompanyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateCompanyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateCompanyResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompany_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateCompanyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyResult(%+v)", *p)

}

func (p *FabricEblCreateCompanyResult) DeepEqual(ano *FabricEblCreateCompanyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateCompanyResult) Field0DeepEqual(src *CreateCompanyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewFabricEblLoginArgs() *FabricEblLoginArgs {
	return &FabricEblLoginArgs{}
}

func (p *FabricEblLoginArgs) InitDefault() {
}

var FabricEblLoginArgs_Req_DEFAULT *LoginReq

func (p *FabricEblLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return FabricEblLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

var fieldIDToName_FabricEblLoginArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLoginReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblLoginArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Login_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblLoginArgs(%+v)", *p)

}

func (p *FabricEblLoginArgs) DeepEqual(ano *FabricEblLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblLoginArgs) Field1DeepEqual(src *LoginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewFabricEblLoginResult() *FabricEblLoginResult {
	return &FabricEblLoginResult{}
}

func (p *FabricEblLoginResult) InitDefault() {
}

var FabricEblLoginResult_Success_DEFAULT *LoginResp

func (p *FabricEblLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return FabricEblLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

var fieldIDToName_FabricEblLoginResult = map[int16]string{
	0: "success",
}

func (p *FabricEblLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLoginResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblLoginResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Login_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblLoginResult(%+v)", *p)

}

func (p *FabricEblLoginResult) DeepEqual(ano *FabricEblLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblLoginResult) Field0DeepEqual(src *LoginResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetUserInfoArgs struct {
	Req *GetUserInfoReq `thrift:"req,1" frugal:"1,default,GetUserInfoReq" json:"req"`
}

func NewFabricEblGetUserInfoArgs() *FabricEblGetUserInfoArgs {
	return &FabricEblGetUserInfoArgs{}
}

func (p *FabricEblGetUserInfoArgs) InitDefault() {
}

var FabricEblGetUserInfoArgs_Req_DEFAULT *GetUserInfoReq

func (p *FabricEblGetUserInfoArgs) GetReq() (v *GetUserInfoReq) {
	if !p.IsSetReq() {
		return FabricEblGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetUserInfoArgs) SetReq(val *GetUserInfoReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetUserInfoArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetUserInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetUserInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetUserInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetUserInfoArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetUserInfoArgs(%+v)", *p)

}

func (p *FabricEblGetUserInfoArgs) DeepEqual(ano *FabricEblGetUserInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetUserInfoArgs) Field1DeepEqual(src *GetUserInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetUserInfoResult struct {
	Success *GetUserInfoResp `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResp" json:"success,omitempty"`
}

func NewFabricEblGetUserInfoResult() *FabricEblGetUserInfoResult {
	return &FabricEblGetUserInfoResult{}
}

func (p *FabricEblGetUserInfoResult) InitDefault() {
}

var FabricEblGetUserInfoResult_Success_DEFAULT *GetUserInfoResp

func (p *FabricEblGetUserInfoResult) GetSuccess() (v *GetUserInfoResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResp)
}

var fieldIDToName_FabricEblGetUserInfoResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetUserInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetUserInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetUserInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetUserInfoResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetUserInfoResult(%+v)", *p)

}

func (p *FabricEblGetUserInfoResult) DeepEqual(ano *FabricEblGetUserInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetUserInfoResult) Field0DeepEqual(src *GetUserInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetCompanyAllListArgs struct {
	Req *GetCompanyAllListReq `thrift:"req,1" frugal:"1,default,GetCompanyAllListReq" json:"req"`
}

func NewFabricEblGetCompanyAllListArgs() *FabricEblGetCompanyAllListArgs {
	return &FabricEblGetCompanyAllListArgs{}
}

func (p *FabricEblGetCompanyAllListArgs) InitDefault() {
}

var FabricEblGetCompanyAllListArgs_Req_DEFAULT *GetCompanyAllListReq

func (p *FabricEblGetCompanyAllListArgs) GetReq() (v *GetCompanyAllListReq) {
	if !p.IsSetReq() {
		return FabricEblGetCompanyAllListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetCompanyAllListArgs) SetReq(val *GetCompanyAllListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetCompanyAllListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetCompanyAllListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetCompanyAllListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetCompanyAllListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCompanyAllListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetCompanyAllListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCompanyAllList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetCompanyAllListArgs(%+v)", *p)

}

func (p *FabricEblGetCompanyAllListArgs) DeepEqual(ano *FabricEblGetCompanyAllListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetCompanyAllListArgs) Field1DeepEqual(src *GetCompanyAllListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetCompanyAllListResult struct {
	Success *GetCompanyAllListResp `thrift:"success,0,optional" frugal:"0,optional,GetCompanyAllListResp" json:"success,omitempty"`
}

func NewFabricEblGetCompanyAllListResult() *FabricEblGetCompanyAllListResult {
	return &FabricEblGetCompanyAllListResult{}
}

func (p *FabricEblGetCompanyAllListResult) InitDefault() {
}

var FabricEblGetCompanyAllListResult_Success_DEFAULT *GetCompanyAllListResp

func (p *FabricEblGetCompanyAllListResult) GetSuccess() (v *GetCompanyAllListResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetCompanyAllListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetCompanyAllListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCompanyAllListResp)
}

var fieldIDToName_FabricEblGetCompanyAllListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetCompanyAllListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetCompanyAllListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetCompanyAllListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCompanyAllListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetCompanyAllListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCompanyAllList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetCompanyAllListResult(%+v)", *p)

}

func (p *FabricEblGetCompanyAllListResult) DeepEqual(ano *FabricEblGetCompanyAllListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetCompanyAllListResult) Field0DeepEqual(src *GetCompanyAllListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateEblArgs struct {
	Req *CreateEblReq `thrift:"req,1" frugal:"1,default,CreateEblReq" json:"req"`
}

func NewFabricEblCreateEblArgs() *FabricEblCreateEblArgs {
	return &FabricEblCreateEblArgs{}
}

func (p *FabricEblCreateEblArgs) InitDefault() {
}

var FabricEblCreateEblArgs_Req_DEFAULT *CreateEblReq

func (p *FabricEblCreateEblArgs) GetReq() (v *CreateEblReq) {
	if !p.IsSetReq() {
		return FabricEblCreateEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateEblArgs) SetReq(val *CreateEblReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateEblArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateEblArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateEblArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateEblArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEblReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateEblArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEbl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateEblArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateEblArgs(%+v)", *p)

}

func (p *FabricEblCreateEblArgs) DeepEqual(ano *FabricEblCreateEblArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateEblArgs) Field1DeepEqual(src *CreateEblReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateEblResult struct {
	Success *CreateEblResp `thrift:"success,0,optional" frugal:"0,optional,CreateEblResp" json:"success,omitempty"`
}

func NewFabricEblCreateEblResult() *FabricEblCreateEblResult {
	return &FabricEblCreateEblResult{}
}

func (p *FabricEblCreateEblResult) InitDefault() {
}

var FabricEblCreateEblResult_Success_DEFAULT *CreateEblResp

func (p *FabricEblCreateEblResult) GetSuccess() (v *CreateEblResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEblResp)
}

var fieldIDToName_FabricEblCreateEblResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateEblResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateEblResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateEblResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEblResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateEblResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEbl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateEblResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateEblResult(%+v)", *p)

}

func (p *FabricEblCreateEblResult) DeepEqual(ano *FabricEblCreateEblResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateEblResult) Field0DeepEqual(src *CreateEblResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryAllEblListArgs struct {
	Req *QueryAllEblListReq `thrift:"req,1" frugal:"1,default,QueryAllEblListReq" json:"req"`
}

func NewFabricEblQueryAllEblListArgs() *FabricEblQueryAllEblListArgs {
	return &FabricEblQueryAllEblListArgs{}
}

func (p *FabricEblQueryAllEblListArgs) InitDefault() {
}

var FabricEblQueryAllEblListArgs_Req_DEFAULT *QueryAllEblListReq

func (p *FabricEblQueryAllEblListArgs) GetReq() (v *QueryAllEblListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryAllEblListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryAllEblListArgs) SetReq(val *QueryAllEblListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryAllEblListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryAllEblListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryAllEblListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryAllEblListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryAllEblListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryAllEblListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryAllEblListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryAllEblListArgs(%+v)", *p)

}

func (p *FabricEblQueryAllEblListArgs) DeepEqual(ano *FabricEblQueryAllEblListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryAllEblListArgs) Field1DeepEqual(src *QueryAllEblListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryAllEblListResult struct {
	Success *QueryAllEblListResp `thrift:"success,0,optional" frugal:"0,optional,QueryAllEblListResp" json:"success,omitempty"`
}

func NewFabricEblQueryAllEblListResult() *FabricEblQueryAllEblListResult {
	return &FabricEblQueryAllEblListResult{}
}

func (p *FabricEblQueryAllEblListResult) InitDefault() {
}

var FabricEblQueryAllEblListResult_Success_DEFAULT *QueryAllEblListResp

func (p *FabricEblQueryAllEblListResult) GetSuccess() (v *QueryAllEblListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryAllEblListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryAllEblListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryAllEblListResp)
}

var fieldIDToName_FabricEblQueryAllEblListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryAllEblListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryAllEblListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryAllEblListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryAllEblListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryAllEblListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryAllEblListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryAllEblListResult(%+v)", *p)

}

func (p *FabricEblQueryAllEblListResult) DeepEqual(ano *FabricEblQueryAllEblListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryAllEblListResult) Field0DeepEqual(src *QueryAllEblListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryEblListArgs struct {
	Req *QueryEblListReq `thrift:"req,1" frugal:"1,default,QueryEblListReq" json:"req"`
}

func NewFabricEblQueryEblListArgs() *FabricEblQueryEblListArgs {
	return &FabricEblQueryEblListArgs{}
}

func (p *FabricEblQueryEblListArgs) InitDefault() {
}

var FabricEblQueryEblListArgs_Req_DEFAULT *QueryEblListReq

func (p *FabricEblQueryEblListArgs) GetReq() (v *QueryEblListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryEblListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryEblListArgs) SetReq(val *QueryEblListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryEblListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryEblListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryEblListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryEblListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryEblListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryEblListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryEblListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryEblListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryEblListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblListArgs(%+v)", *p)

}

func (p *FabricEblQueryEblListArgs) DeepEqual(ano *FabricEblQueryEblListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryEblListArgs) Field1DeepEqual(src *QueryEblListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryEblListResult struct {
	Success *QueryEblListResp `thrift:"success,0,optional" frugal:"0,optional,QueryEblListResp" json:"success,omitempty"`
}

func NewFabricEblQueryEblListResult() *FabricEblQueryEblListResult {
	return &FabricEblQueryEblListResult{}
}

func (p *FabricEblQueryEblListResult) InitDefault() {
}

var FabricEblQueryEblListResult_Success_DEFAULT *QueryEblListResp

func (p *FabricEblQueryEblListResult) GetSuccess() (v *QueryEblListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryEblListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryEblListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryEblListResp)
}

var fieldIDToName_FabricEblQueryEblListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryEblListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryEblListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryEblListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryEblListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryEblListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryEblListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryEblListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryEblListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblListResult(%+v)", *p)

}

func (p *FabricEblQueryEblListResult) DeepEqual(ano *FabricEblQueryEblListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryEblListResult) Field0DeepEqual(src *QueryEblListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblOperateEblArgs struct {
	Req *OperateEblReq `thrift:"req,1" frugal:"1,default,OperateEblReq" json:"req"`
}

func NewFabricEblOperateEblArgs() *FabricEblOperateEblArgs {
	return &FabricEblOperateEblArgs{}
}

func (p *FabricEblOperateEblArgs) InitDefault() {
}

var FabricEblOperateEblArgs_Req_DEFAULT *OperateEblReq

func (p *FabricEblOperateEblArgs) GetReq() (v *OperateEblReq) {
	if !p.IsSetReq() {
		return FabricEblOperateEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblOperateEblArgs) SetReq(val *OperateEblReq) {
	p.Req = val
}

var fieldIDToName_FabricEblOperateEblArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblOperateEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblOperateEblArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblOperateEblArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblOperateEblArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewOperateEblReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblOperateEblArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEbl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblOperateEblArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblOperateEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblOperateEblArgs(%+v)", *p)

}

func (p *FabricEblOperateEblArgs) DeepEqual(ano *FabricEblOperateEblArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblOperateEblArgs) Field1DeepEqual(src *OperateEblReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblOperateEblResult struct {
	Success *OperateEblResp `thrift:"success,0,optional" frugal:"0,optional,OperateEblResp" json:"success,omitempty"`
}

func NewFabricEblOperateEblResult() *FabricEblOperateEblResult {
	return &FabricEblOperateEblResult{}
}

func (p *FabricEblOperateEblResult) InitDefault() {
}

var FabricEblOperateEblResult_Success_DEFAULT *OperateEblResp

func (p *FabricEblOperateEblResult) GetSuccess() (v *OperateEblResp) {
	if !p.IsSetSuccess() {
		return FabricEblOperateEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblOperateEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*OperateEblResp)
}

var fieldIDToName_FabricEblOperateEblResult = map[int16]string{
	0: "success",
}

func (p *FabricEblOperateEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblOperateEblResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblOperateEblResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblOperateEblResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewOperateEblResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblOperateEblResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEbl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblOperateEblResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblOperateEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblOperateEblResult(%+v)", *p)

}

func (p *FabricEblOperateEblResult) DeepEqual(ano *FabricEblOperateEblResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblOperateEblResult) Field0DeepEqual(src *OperateEblResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
