// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package fabric_ebl

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type FileType int64

const (
	FileType_Invoice  FileType = 1
	FileType_Contract FileType = 2
	FileType_Document FileType = 3
	FileType_Seal     FileType = 4
	FileType_Ebl      FileType = 5
)

func (p FileType) String() string {
	switch p {
	case FileType_Invoice:
		return "Invoice"
	case FileType_Contract:
		return "Contract"
	case FileType_Document:
		return "Document"
	case FileType_Seal:
		return "Seal"
	case FileType_Ebl:
		return "Ebl"
	}
	return "<UNSET>"
}

func FileTypeFromString(s string) (FileType, error) {
	switch s {
	case "Invoice":
		return FileType_Invoice, nil
	case "Contract":
		return FileType_Contract, nil
	case "Document":
		return FileType_Document, nil
	case "Seal":
		return FileType_Seal, nil
	case "Ebl":
		return FileType_Ebl, nil
	}
	return FileType(0), fmt.Errorf("not a valid FileType string")
}

func FileTypePtr(v FileType) *FileType { return &v }
func (p *FileType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FileType(result.Int64)
	return
}

func (p *FileType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type OperationType int64

const (
	OperationType_Submit   OperationType = 1
	OperationType_Approve  OperationType = 2
	OperationType_Reject   OperationType = 3
	OperationType_Retreat  OperationType = 4
	OperationType_Seal     OperationType = 5
	OperationType_Issue    OperationType = 6
	OperationType_Accept   OperationType = 7
	OperationType_Transfer OperationType = 8
	OperationType_Redeem   OperationType = 9
)

func (p OperationType) String() string {
	switch p {
	case OperationType_Submit:
		return "Submit"
	case OperationType_Approve:
		return "Approve"
	case OperationType_Reject:
		return "Reject"
	case OperationType_Retreat:
		return "Retreat"
	case OperationType_Seal:
		return "Seal"
	case OperationType_Issue:
		return "Issue"
	case OperationType_Accept:
		return "Accept"
	case OperationType_Transfer:
		return "Transfer"
	case OperationType_Redeem:
		return "Redeem"
	}
	return "<UNSET>"
}

func OperationTypeFromString(s string) (OperationType, error) {
	switch s {
	case "Submit":
		return OperationType_Submit, nil
	case "Approve":
		return OperationType_Approve, nil
	case "Reject":
		return OperationType_Reject, nil
	case "Retreat":
		return OperationType_Retreat, nil
	case "Seal":
		return OperationType_Seal, nil
	case "Issue":
		return OperationType_Issue, nil
	case "Accept":
		return OperationType_Accept, nil
	case "Transfer":
		return OperationType_Transfer, nil
	case "Redeem":
		return OperationType_Redeem, nil
	}
	return OperationType(0), fmt.Errorf("not a valid OperationType string")
}

func OperationTypePtr(v OperationType) *OperationType { return &v }
func (p *OperationType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = OperationType(result.Int64)
	return
}

func (p *OperationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CompanyType int64

const (
	CompanyType_Ship   CompanyType = 1
	CompanyType_Bank   CompanyType = 2
	CompanyType_Common CompanyType = 3
)

func (p CompanyType) String() string {
	switch p {
	case CompanyType_Ship:
		return "Ship"
	case CompanyType_Bank:
		return "Bank"
	case CompanyType_Common:
		return "Common"
	}
	return "<UNSET>"
}

func CompanyTypeFromString(s string) (CompanyType, error) {
	switch s {
	case "Ship":
		return CompanyType_Ship, nil
	case "Bank":
		return CompanyType_Bank, nil
	case "Common":
		return CompanyType_Common, nil
	}
	return CompanyType(0), fmt.Errorf("not a valid CompanyType string")
}

func CompanyTypePtr(v CompanyType) *CompanyType { return &v }
func (p *CompanyType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CompanyType(result.Int64)
	return
}

func (p *CompanyType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserType int64

const (
	UserType_Admin UserType = 1
	UserType_User  UserType = 2
)

func (p UserType) String() string {
	switch p {
	case UserType_Admin:
		return "Admin"
	case UserType_User:
		return "User"
	}
	return "<UNSET>"
}

func UserTypeFromString(s string) (UserType, error) {
	switch s {
	case "Admin":
		return UserType_Admin, nil
	case "User":
		return UserType_User, nil
	}
	return UserType(0), fmt.Errorf("not a valid UserType string")
}

func UserTypePtr(v UserType) *UserType { return &v }
func (p *UserType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = UserType(result.Int64)
	return
}

func (p *UserType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type InvoiceType int64

const (
	InvoiceType_Electronic InvoiceType = 1
	InvoiceType_Paper      InvoiceType = 2
)

func (p InvoiceType) String() string {
	switch p {
	case InvoiceType_Electronic:
		return "Electronic"
	case InvoiceType_Paper:
		return "Paper"
	}
	return "<UNSET>"
}

func InvoiceTypeFromString(s string) (InvoiceType, error) {
	switch s {
	case "Electronic":
		return InvoiceType_Electronic, nil
	case "Paper":
		return InvoiceType_Paper, nil
	}
	return InvoiceType(0), fmt.Errorf("not a valid InvoiceType string")
}

func InvoiceTypePtr(v InvoiceType) *InvoiceType { return &v }
func (p *InvoiceType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = InvoiceType(result.Int64)
	return
}

func (p *InvoiceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContractStatus int64

const (
	ContractStatus_Active     ContractStatus = 1
	ContractStatus_Terminated ContractStatus = 2
)

func (p ContractStatus) String() string {
	switch p {
	case ContractStatus_Active:
		return "Active"
	case ContractStatus_Terminated:
		return "Terminated"
	}
	return "<UNSET>"
}

func ContractStatusFromString(s string) (ContractStatus, error) {
	switch s {
	case "Active":
		return ContractStatus_Active, nil
	case "Terminated":
		return ContractStatus_Terminated, nil
	}
	return ContractStatus(0), fmt.Errorf("not a valid ContractStatus string")
}

func ContractStatusPtr(v ContractStatus) *ContractStatus { return &v }
func (p *ContractStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ContractStatus(result.Int64)
	return
}

func (p *ContractStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DocType int64

const (
	DocType_StorageIn  DocType = 1
	DocType_StorageOut DocType = 2
	DocType_Settlement DocType = 3
)

func (p DocType) String() string {
	switch p {
	case DocType_StorageIn:
		return "StorageIn"
	case DocType_StorageOut:
		return "StorageOut"
	case DocType_Settlement:
		return "Settlement"
	}
	return "<UNSET>"
}

func DocTypeFromString(s string) (DocType, error) {
	switch s {
	case "StorageIn":
		return DocType_StorageIn, nil
	case "StorageOut":
		return DocType_StorageOut, nil
	case "Settlement":
		return DocType_Settlement, nil
	}
	return DocType(0), fmt.Errorf("not a valid DocType string")
}

func DocTypePtr(v DocType) *DocType { return &v }
func (p *DocType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DocType(result.Int64)
	return
}

func (p *DocType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CreateCompanyReq struct {
	CompanyCode   string      `thrift:"company_code,1,required" frugal:"1,required,string" json:"company_code"`
	CompanyName   string      `thrift:"company_name,2,required" frugal:"2,required,string" json:"company_name"`
	CompanyType   CompanyType `thrift:"company_type,3,required" frugal:"3,required,CompanyType" json:"company_type"`
	AdminEmail    string      `thrift:"admin_email,4,required" frugal:"4,required,string" json:"admin_email"`
	AdminPassword string      `thrift:"admin_password,5,required" frugal:"5,required,string" json:"admin_password"`
	AdminName     string      `thrift:"admin_name,6,required" frugal:"6,required,string" json:"admin_name"`
}

func NewCreateCompanyReq() *CreateCompanyReq {
	return &CreateCompanyReq{}
}

func (p *CreateCompanyReq) InitDefault() {
}

func (p *CreateCompanyReq) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *CreateCompanyReq) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *CreateCompanyReq) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}

func (p *CreateCompanyReq) GetAdminEmail() (v string) {
	return p.AdminEmail
}

func (p *CreateCompanyReq) GetAdminPassword() (v string) {
	return p.AdminPassword
}

func (p *CreateCompanyReq) GetAdminName() (v string) {
	return p.AdminName
}
func (p *CreateCompanyReq) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *CreateCompanyReq) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *CreateCompanyReq) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}
func (p *CreateCompanyReq) SetAdminEmail(val string) {
	p.AdminEmail = val
}
func (p *CreateCompanyReq) SetAdminPassword(val string) {
	p.AdminPassword = val
}
func (p *CreateCompanyReq) SetAdminName(val string) {
	p.AdminName = val
}

var fieldIDToName_CreateCompanyReq = map[int16]string{
	1: "company_code",
	2: "company_name",
	3: "company_type",
	4: "admin_email",
	5: "admin_password",
	6: "admin_name",
}

func (p *CreateCompanyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCompanyCode bool = false
	var issetCompanyName bool = false
	var issetCompanyType bool = false
	var issetAdminEmail bool = false
	var issetAdminPassword bool = false
	var issetAdminName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAdminEmail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAdminPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAdminName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCompanyCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCompanyType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAdminEmail {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAdminPassword {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAdminName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCompanyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCompanyReq[fieldId]))
}

func (p *CreateCompanyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyCode = _field
	return nil
}
func (p *CreateCompanyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *CreateCompanyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field CompanyType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CompanyType(v)
	}
	p.CompanyType = _field
	return nil
}
func (p *CreateCompanyReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdminEmail = _field
	return nil
}
func (p *CreateCompanyReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdminPassword = _field
	return nil
}
func (p *CreateCompanyReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AdminName = _field
	return nil
}

func (p *CreateCompanyReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompanyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCompanyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CompanyType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("admin_email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AdminEmail); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("admin_password", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AdminPassword); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateCompanyReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("admin_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AdminName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateCompanyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyReq(%+v)", *p)

}

func (p *CreateCompanyReq) DeepEqual(ano *CreateCompanyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CompanyCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field3DeepEqual(ano.CompanyType) {
		return false
	}
	if !p.Field4DeepEqual(ano.AdminEmail) {
		return false
	}
	if !p.Field5DeepEqual(ano.AdminPassword) {
		return false
	}
	if !p.Field6DeepEqual(ano.AdminName) {
		return false
	}
	return true
}

func (p *CreateCompanyReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CompanyCode, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field3DeepEqual(src CompanyType) bool {

	if p.CompanyType != src {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.AdminEmail, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AdminPassword, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCompanyReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AdminName, src) != 0 {
		return false
	}
	return true
}

type CreateCompanyResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateCompanyResp() *CreateCompanyResp {
	return &CreateCompanyResp{}
}

func (p *CreateCompanyResp) InitDefault() {
}

func (p *CreateCompanyResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateCompanyResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateCompanyResp = map[int16]string{
	1: "id",
}

func (p *CreateCompanyResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCompanyResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCompanyResp[fieldId]))
}

func (p *CreateCompanyResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateCompanyResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompanyResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCompanyResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCompanyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyResp(%+v)", *p)

}

func (p *CreateCompanyResp) DeepEqual(ano *CreateCompanyResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateCompanyResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type LoginReq struct {
	Email    string `thrift:"email,1,required" frugal:"1,required,string" json:"email"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetEmail() (v string) {
	return p.Email
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetEmail(val string) {
	p.Email = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "email",
	2: "password",
}

func (p *LoginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEmail bool = false
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEmail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEmail {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginReq[fieldId]))
}

func (p *LoginReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *LoginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *LoginReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LoginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)

}

func (p *LoginReq) DeepEqual(ano *LoginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Email) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *LoginReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *LoginReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type LoginResp struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

func (p *LoginResp) GetToken() (v string) {
	return p.Token
}
func (p *LoginResp) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_LoginResp = map[int16]string{
	1: "token",
}

func (p *LoginResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginResp[fieldId]))
}

func (p *LoginResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *LoginResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LoginResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)

}

func (p *LoginResp) DeepEqual(ano *LoginResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *LoginResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type GetUserInfoReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewGetUserInfoReq() *GetUserInfoReq {
	return &GetUserInfoReq{}
}

func (p *GetUserInfoReq) InitDefault() {
}

func (p *GetUserInfoReq) GetToken() (v string) {
	return p.Token
}
func (p *GetUserInfoReq) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_GetUserInfoReq = map[int16]string{
	1: "token",
}

func (p *GetUserInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetUserInfoReq[fieldId]))
}

func (p *GetUserInfoReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *GetUserInfoReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoReq(%+v)", *p)

}

func (p *GetUserInfoReq) DeepEqual(ano *GetUserInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *GetUserInfoReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type GetUserInfoResp struct {
	UserId      int64       `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	UserEmail   string      `thrift:"user_email,2,required" frugal:"2,required,string" json:"user_email"`
	UserName    string      `thrift:"user_name,3,required" frugal:"3,required,string" json:"user_name"`
	UserType    UserType    `thrift:"user_type,4,required" frugal:"4,required,UserType" json:"user_type"`
	CompanyId   int64       `thrift:"company_id,5,required" frugal:"5,required,i64" json:"company_id"`
	CompanyName string      `thrift:"company_name,6,required" frugal:"6,required,string" json:"company_name"`
	CompanyCode string      `thrift:"company_code,7,required" frugal:"7,required,string" json:"company_code"`
	CompanyType CompanyType `thrift:"company_type,8,required" frugal:"8,required,CompanyType" json:"company_type"`
}

func NewGetUserInfoResp() *GetUserInfoResp {
	return &GetUserInfoResp{}
}

func (p *GetUserInfoResp) InitDefault() {
}

func (p *GetUserInfoResp) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetUserInfoResp) GetUserEmail() (v string) {
	return p.UserEmail
}

func (p *GetUserInfoResp) GetUserName() (v string) {
	return p.UserName
}

func (p *GetUserInfoResp) GetUserType() (v UserType) {
	return p.UserType
}

func (p *GetUserInfoResp) GetCompanyId() (v int64) {
	return p.CompanyId
}

func (p *GetUserInfoResp) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *GetUserInfoResp) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *GetUserInfoResp) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}
func (p *GetUserInfoResp) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetUserInfoResp) SetUserEmail(val string) {
	p.UserEmail = val
}
func (p *GetUserInfoResp) SetUserName(val string) {
	p.UserName = val
}
func (p *GetUserInfoResp) SetUserType(val UserType) {
	p.UserType = val
}
func (p *GetUserInfoResp) SetCompanyId(val int64) {
	p.CompanyId = val
}
func (p *GetUserInfoResp) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *GetUserInfoResp) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *GetUserInfoResp) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}

var fieldIDToName_GetUserInfoResp = map[int16]string{
	1: "user_id",
	2: "user_email",
	3: "user_name",
	4: "user_type",
	5: "company_id",
	6: "company_name",
	7: "company_code",
	8: "company_type",
}

func (p *GetUserInfoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetUserEmail bool = false
	var issetUserName bool = false
	var issetUserType bool = false
	var issetCompanyId bool = false
	var issetCompanyName bool = false
	var issetCompanyCode bool = false
	var issetCompanyType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserEmail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUserEmail {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUserName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUserType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCompanyId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCompanyCode {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetCompanyType {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserInfoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetUserInfoResp[fieldId]))
}

func (p *GetUserInfoResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *GetUserInfoResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserEmail = _field
	return nil
}
func (p *GetUserInfoResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *GetUserInfoResp) ReadField4(iprot thrift.TProtocol) error {

	var _field UserType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = UserType(v)
	}
	p.UserType = _field
	return nil
}
func (p *GetUserInfoResp) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyId = _field
	return nil
}
func (p *GetUserInfoResp) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *GetUserInfoResp) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyCode = _field
	return nil
}
func (p *GetUserInfoResp) ReadField8(iprot thrift.TProtocol) error {

	var _field CompanyType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CompanyType(v)
	}
	p.CompanyType = _field
	return nil
}

func (p *GetUserInfoResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_email", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserEmail); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.UserType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CompanyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_code", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetUserInfoResp) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_type", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CompanyType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetUserInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResp(%+v)", *p)

}

func (p *GetUserInfoResp) DeepEqual(ano *GetUserInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserEmail) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserType) {
		return false
	}
	if !p.Field5DeepEqual(ano.CompanyId) {
		return false
	}
	if !p.Field6DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field7DeepEqual(ano.CompanyCode) {
		return false
	}
	if !p.Field8DeepEqual(ano.CompanyType) {
		return false
	}
	return true
}

func (p *GetUserInfoResp) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserEmail, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field4DeepEqual(src UserType) bool {

	if p.UserType != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field5DeepEqual(src int64) bool {

	if p.CompanyId != src {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CompanyCode, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserInfoResp) Field8DeepEqual(src CompanyType) bool {

	if p.CompanyType != src {
		return false
	}
	return true
}

type GetCompanyAllListReq struct {
}

func NewGetCompanyAllListReq() *GetCompanyAllListReq {
	return &GetCompanyAllListReq{}
}

func (p *GetCompanyAllListReq) InitDefault() {
}

var fieldIDToName_GetCompanyAllListReq = map[int16]string{}

func (p *GetCompanyAllListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCompanyAllListReq) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GetCompanyAllListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCompanyAllListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompanyAllListReq(%+v)", *p)

}

func (p *GetCompanyAllListReq) DeepEqual(ano *GetCompanyAllListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetCompanyAllListResp struct {
	CompanyList []*Company `thrift:"company_list,1,required" frugal:"1,required,list<Company>" json:"company_list"`
}

func NewGetCompanyAllListResp() *GetCompanyAllListResp {
	return &GetCompanyAllListResp{}
}

func (p *GetCompanyAllListResp) InitDefault() {
}

func (p *GetCompanyAllListResp) GetCompanyList() (v []*Company) {
	return p.CompanyList
}
func (p *GetCompanyAllListResp) SetCompanyList(val []*Company) {
	p.CompanyList = val
}

var fieldIDToName_GetCompanyAllListResp = map[int16]string{
	1: "company_list",
}

func (p *GetCompanyAllListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCompanyList bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCompanyList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCompanyAllListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetCompanyAllListResp[fieldId]))
}

func (p *GetCompanyAllListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Company, 0, size)
	values := make([]Company, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CompanyList = _field
	return nil
}

func (p *GetCompanyAllListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCompanyAllListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCompanyAllListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CompanyList)); err != nil {
		return err
	}
	for _, v := range p.CompanyList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCompanyAllListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompanyAllListResp(%+v)", *p)

}

func (p *GetCompanyAllListResp) DeepEqual(ano *GetCompanyAllListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CompanyList) {
		return false
	}
	return true
}

func (p *GetCompanyAllListResp) Field1DeepEqual(src []*Company) bool {

	if len(p.CompanyList) != len(src) {
		return false
	}
	for i, v := range p.CompanyList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateEblReq struct {
	Ebl   *Ebl   `thrift:"ebl,1,required" frugal:"1,required,Ebl" json:"ebl"`
	Token string `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewCreateEblReq() *CreateEblReq {
	return &CreateEblReq{}
}

func (p *CreateEblReq) InitDefault() {
}

var CreateEblReq_Ebl_DEFAULT *Ebl

func (p *CreateEblReq) GetEbl() (v *Ebl) {
	if !p.IsSetEbl() {
		return CreateEblReq_Ebl_DEFAULT
	}
	return p.Ebl
}

func (p *CreateEblReq) GetToken() (v string) {
	return p.Token
}
func (p *CreateEblReq) SetEbl(val *Ebl) {
	p.Ebl = val
}
func (p *CreateEblReq) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_CreateEblReq = map[int16]string{
	1: "ebl",
	2: "token",
}

func (p *CreateEblReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *CreateEblReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEbl bool = false
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEbl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetToken {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblReq[fieldId]))
}

func (p *CreateEblReq) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEbl()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ebl = _field
	return nil
}
func (p *CreateEblReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *CreateEblReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ebl", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Ebl.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblReq(%+v)", *p)

}

func (p *CreateEblReq) DeepEqual(ano *CreateEblReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ebl) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *CreateEblReq) Field1DeepEqual(src *Ebl) bool {

	if !p.Ebl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEblReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type CreateEblResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateEblResp() *CreateEblResp {
	return &CreateEblResp{}
}

func (p *CreateEblResp) InitDefault() {
}

func (p *CreateEblResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateEblResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateEblResp = map[int16]string{
	1: "id",
}

func (p *CreateEblResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblResp[fieldId]))
}

func (p *CreateEblResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateEblResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblResp(%+v)", *p)

}

func (p *CreateEblResp) DeepEqual(ano *CreateEblResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateEblResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type QueryAllEblListReq struct {
	Token    string  `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Bookmark *string `thrift:"bookmark,3,optional" frugal:"3,optional,string" json:"bookmark,omitempty"`
}

func NewQueryAllEblListReq() *QueryAllEblListReq {
	return &QueryAllEblListReq{}
}

func (p *QueryAllEblListReq) InitDefault() {
}

func (p *QueryAllEblListReq) GetToken() (v string) {
	return p.Token
}

var QueryAllEblListReq_PageSize_DEFAULT int64

func (p *QueryAllEblListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return QueryAllEblListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var QueryAllEblListReq_Bookmark_DEFAULT string

func (p *QueryAllEblListReq) GetBookmark() (v string) {
	if !p.IsSetBookmark() {
		return QueryAllEblListReq_Bookmark_DEFAULT
	}
	return *p.Bookmark
}
func (p *QueryAllEblListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryAllEblListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *QueryAllEblListReq) SetBookmark(val *string) {
	p.Bookmark = val
}

var fieldIDToName_QueryAllEblListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "bookmark",
}

func (p *QueryAllEblListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *QueryAllEblListReq) IsSetBookmark() bool {
	return p.Bookmark != nil
}

func (p *QueryAllEblListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryAllEblListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryAllEblListReq[fieldId]))
}

func (p *QueryAllEblListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryAllEblListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryAllEblListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Bookmark = _field
	return nil
}

func (p *QueryAllEblListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryAllEblListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryAllEblListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryAllEblListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBookmark() {
		if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Bookmark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryAllEblListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllEblListReq(%+v)", *p)

}

func (p *QueryAllEblListReq) DeepEqual(ano *QueryAllEblListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	return true
}

func (p *QueryAllEblListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryAllEblListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *QueryAllEblListReq) Field3DeepEqual(src *string) bool {

	if p.Bookmark == src {
		return true
	} else if p.Bookmark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Bookmark, *src) != 0 {
		return false
	}
	return true
}

type QueryAllEblListResp struct {
	EblList             []*EblExtra `thrift:"eblList,1,required" frugal:"1,required,list<EblExtra>" json:"eblList"`
	FetchedRecordsCount int64       `thrift:"fetchedRecordsCount,2,required" frugal:"2,required,i64" json:"fetchedRecordsCount"`
	Bookmark            string      `thrift:"bookmark,3,required" frugal:"3,required,string" json:"bookmark"`
}

func NewQueryAllEblListResp() *QueryAllEblListResp {
	return &QueryAllEblListResp{}
}

func (p *QueryAllEblListResp) InitDefault() {
}

func (p *QueryAllEblListResp) GetEblList() (v []*EblExtra) {
	return p.EblList
}

func (p *QueryAllEblListResp) GetFetchedRecordsCount() (v int64) {
	return p.FetchedRecordsCount
}

func (p *QueryAllEblListResp) GetBookmark() (v string) {
	return p.Bookmark
}
func (p *QueryAllEblListResp) SetEblList(val []*EblExtra) {
	p.EblList = val
}
func (p *QueryAllEblListResp) SetFetchedRecordsCount(val int64) {
	p.FetchedRecordsCount = val
}
func (p *QueryAllEblListResp) SetBookmark(val string) {
	p.Bookmark = val
}

var fieldIDToName_QueryAllEblListResp = map[int16]string{
	1: "eblList",
	2: "fetchedRecordsCount",
	3: "bookmark",
}

func (p *QueryAllEblListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblList bool = false
	var issetFetchedRecordsCount bool = false
	var issetBookmark bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFetchedRecordsCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBookmark = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFetchedRecordsCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBookmark {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryAllEblListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryAllEblListResp[fieldId]))
}

func (p *QueryAllEblListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EblExtra, 0, size)
	values := make([]EblExtra, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EblList = _field
	return nil
}
func (p *QueryAllEblListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FetchedRecordsCount = _field
	return nil
}
func (p *QueryAllEblListResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Bookmark = _field
	return nil
}

func (p *QueryAllEblListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryAllEblListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EblList)); err != nil {
		return err
	}
	for _, v := range p.EblList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryAllEblListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fetchedRecordsCount", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FetchedRecordsCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryAllEblListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Bookmark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryAllEblListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllEblListResp(%+v)", *p)

}

func (p *QueryAllEblListResp) DeepEqual(ano *QueryAllEblListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblList) {
		return false
	}
	if !p.Field2DeepEqual(ano.FetchedRecordsCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	return true
}

func (p *QueryAllEblListResp) Field1DeepEqual(src []*EblExtra) bool {

	if len(p.EblList) != len(src) {
		return false
	}
	for i, v := range p.EblList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryAllEblListResp) Field2DeepEqual(src int64) bool {

	if p.FetchedRecordsCount != src {
		return false
	}
	return true
}
func (p *QueryAllEblListResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Bookmark, src) != 0 {
		return false
	}
	return true
}

type QueryEblListReq struct {
	Token     string     `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize  *int64     `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Bookmark  *string    `thrift:"bookmark,3,optional" frugal:"3,optional,string" json:"bookmark,omitempty"`
	EblFilter *EblFilter `thrift:"eblFilter,4,required" frugal:"4,required,EblFilter" json:"eblFilter"`
}

func NewQueryEblListReq() *QueryEblListReq {
	return &QueryEblListReq{}
}

func (p *QueryEblListReq) InitDefault() {
}

func (p *QueryEblListReq) GetToken() (v string) {
	return p.Token
}

var QueryEblListReq_PageSize_DEFAULT int64

func (p *QueryEblListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return QueryEblListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var QueryEblListReq_Bookmark_DEFAULT string

func (p *QueryEblListReq) GetBookmark() (v string) {
	if !p.IsSetBookmark() {
		return QueryEblListReq_Bookmark_DEFAULT
	}
	return *p.Bookmark
}

var QueryEblListReq_EblFilter_DEFAULT *EblFilter

func (p *QueryEblListReq) GetEblFilter() (v *EblFilter) {
	if !p.IsSetEblFilter() {
		return QueryEblListReq_EblFilter_DEFAULT
	}
	return p.EblFilter
}
func (p *QueryEblListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryEblListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *QueryEblListReq) SetBookmark(val *string) {
	p.Bookmark = val
}
func (p *QueryEblListReq) SetEblFilter(val *EblFilter) {
	p.EblFilter = val
}

var fieldIDToName_QueryEblListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "bookmark",
	4: "eblFilter",
}

func (p *QueryEblListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *QueryEblListReq) IsSetBookmark() bool {
	return p.Bookmark != nil
}

func (p *QueryEblListReq) IsSetEblFilter() bool {
	return p.EblFilter != nil
}

func (p *QueryEblListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetEblFilter bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblFilter = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEblFilter {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEblListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryEblListReq[fieldId]))
}

func (p *QueryEblListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryEblListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryEblListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Bookmark = _field
	return nil
}
func (p *QueryEblListReq) ReadField4(iprot thrift.TProtocol) error {
	_field := NewEblFilter()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EblFilter = _field
	return nil
}

func (p *QueryEblListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEblListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryEblListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryEblListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBookmark() {
		if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Bookmark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryEblListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblFilter", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EblFilter.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryEblListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblListReq(%+v)", *p)

}

func (p *QueryEblListReq) DeepEqual(ano *QueryEblListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	if !p.Field4DeepEqual(ano.EblFilter) {
		return false
	}
	return true
}

func (p *QueryEblListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryEblListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *QueryEblListReq) Field3DeepEqual(src *string) bool {

	if p.Bookmark == src {
		return true
	} else if p.Bookmark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Bookmark, *src) != 0 {
		return false
	}
	return true
}
func (p *QueryEblListReq) Field4DeepEqual(src *EblFilter) bool {

	if !p.EblFilter.DeepEqual(src) {
		return false
	}
	return true
}

type QueryEblListResp struct {
	EblList             []*EblExtra `thrift:"eblList,1,required" frugal:"1,required,list<EblExtra>" json:"eblList"`
	FetchedRecordsCount int64       `thrift:"fetchedRecordsCount,2,required" frugal:"2,required,i64" json:"fetchedRecordsCount"`
	Bookmark            string      `thrift:"bookmark,3,required" frugal:"3,required,string" json:"bookmark"`
}

func NewQueryEblListResp() *QueryEblListResp {
	return &QueryEblListResp{}
}

func (p *QueryEblListResp) InitDefault() {
}

func (p *QueryEblListResp) GetEblList() (v []*EblExtra) {
	return p.EblList
}

func (p *QueryEblListResp) GetFetchedRecordsCount() (v int64) {
	return p.FetchedRecordsCount
}

func (p *QueryEblListResp) GetBookmark() (v string) {
	return p.Bookmark
}
func (p *QueryEblListResp) SetEblList(val []*EblExtra) {
	p.EblList = val
}
func (p *QueryEblListResp) SetFetchedRecordsCount(val int64) {
	p.FetchedRecordsCount = val
}
func (p *QueryEblListResp) SetBookmark(val string) {
	p.Bookmark = val
}

var fieldIDToName_QueryEblListResp = map[int16]string{
	1: "eblList",
	2: "fetchedRecordsCount",
	3: "bookmark",
}

func (p *QueryEblListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblList bool = false
	var issetFetchedRecordsCount bool = false
	var issetBookmark bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFetchedRecordsCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBookmark = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFetchedRecordsCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBookmark {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryEblListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryEblListResp[fieldId]))
}

func (p *QueryEblListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EblExtra, 0, size)
	values := make([]EblExtra, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EblList = _field
	return nil
}
func (p *QueryEblListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FetchedRecordsCount = _field
	return nil
}
func (p *QueryEblListResp) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Bookmark = _field
	return nil
}

func (p *QueryEblListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryEblListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EblList)); err != nil {
		return err
	}
	for _, v := range p.EblList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryEblListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fetchedRecordsCount", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FetchedRecordsCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryEblListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bookmark", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Bookmark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryEblListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblListResp(%+v)", *p)

}

func (p *QueryEblListResp) DeepEqual(ano *QueryEblListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblList) {
		return false
	}
	if !p.Field2DeepEqual(ano.FetchedRecordsCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.Bookmark) {
		return false
	}
	return true
}

func (p *QueryEblListResp) Field1DeepEqual(src []*EblExtra) bool {

	if len(p.EblList) != len(src) {
		return false
	}
	for i, v := range p.EblList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryEblListResp) Field2DeepEqual(src int64) bool {

	if p.FetchedRecordsCount != src {
		return false
	}
	return true
}
func (p *QueryEblListResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Bookmark, src) != 0 {
		return false
	}
	return true
}

type OperateEblReq struct {
	Token             string        `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	EblNo             string        `thrift:"eblNo,2,required" frugal:"2,required,string" json:"eblNo"`
	Type              OperationType `thrift:"type,3,required" frugal:"3,required,OperationType" json:"type"`
	SealId            *int64        `thrift:"sealId,4,optional" frugal:"4,optional,i64" json:"sealId,omitempty"`
	TransferCompanyId *int64        `thrift:"transferCompanyId,5,optional" frugal:"5,optional,i64" json:"transferCompanyId,omitempty"`
}

func NewOperateEblReq() *OperateEblReq {
	return &OperateEblReq{}
}

func (p *OperateEblReq) InitDefault() {
}

func (p *OperateEblReq) GetToken() (v string) {
	return p.Token
}

func (p *OperateEblReq) GetEblNo() (v string) {
	return p.EblNo
}

func (p *OperateEblReq) GetType() (v OperationType) {
	return p.Type
}

var OperateEblReq_SealId_DEFAULT int64

func (p *OperateEblReq) GetSealId() (v int64) {
	if !p.IsSetSealId() {
		return OperateEblReq_SealId_DEFAULT
	}
	return *p.SealId
}

var OperateEblReq_TransferCompanyId_DEFAULT int64

func (p *OperateEblReq) GetTransferCompanyId() (v int64) {
	if !p.IsSetTransferCompanyId() {
		return OperateEblReq_TransferCompanyId_DEFAULT
	}
	return *p.TransferCompanyId
}
func (p *OperateEblReq) SetToken(val string) {
	p.Token = val
}
func (p *OperateEblReq) SetEblNo(val string) {
	p.EblNo = val
}
func (p *OperateEblReq) SetType(val OperationType) {
	p.Type = val
}
func (p *OperateEblReq) SetSealId(val *int64) {
	p.SealId = val
}
func (p *OperateEblReq) SetTransferCompanyId(val *int64) {
	p.TransferCompanyId = val
}

var fieldIDToName_OperateEblReq = map[int16]string{
	1: "token",
	2: "eblNo",
	3: "type",
	4: "sealId",
	5: "transferCompanyId",
}

func (p *OperateEblReq) IsSetSealId() bool {
	return p.SealId != nil
}

func (p *OperateEblReq) IsSetTransferCompanyId() bool {
	return p.TransferCompanyId != nil
}

func (p *OperateEblReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetEblNo bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEblNo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OperateEblReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_OperateEblReq[fieldId]))
}

func (p *OperateEblReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *OperateEblReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *OperateEblReq) ReadField3(iprot thrift.TProtocol) error {

	var _field OperationType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = OperationType(v)
	}
	p.Type = _field
	return nil
}
func (p *OperateEblReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SealId = _field
	return nil
}
func (p *OperateEblReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TransferCompanyId = _field
	return nil
}

func (p *OperateEblReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEblReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OperateEblReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OperateEblReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OperateEblReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *OperateEblReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSealId() {
		if err = oprot.WriteFieldBegin("sealId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SealId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *OperateEblReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransferCompanyId() {
		if err = oprot.WriteFieldBegin("transferCompanyId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TransferCompanyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *OperateEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateEblReq(%+v)", *p)

}

func (p *OperateEblReq) DeepEqual(ano *OperateEblReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.SealId) {
		return false
	}
	if !p.Field5DeepEqual(ano.TransferCompanyId) {
		return false
	}
	return true
}

func (p *OperateEblReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *OperateEblReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *OperateEblReq) Field3DeepEqual(src OperationType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *OperateEblReq) Field4DeepEqual(src *int64) bool {

	if p.SealId == src {
		return true
	} else if p.SealId == nil || src == nil {
		return false
	}
	if *p.SealId != *src {
		return false
	}
	return true
}
func (p *OperateEblReq) Field5DeepEqual(src *int64) bool {

	if p.TransferCompanyId == src {
		return true
	} else if p.TransferCompanyId == nil || src == nil {
		return false
	}
	if *p.TransferCompanyId != *src {
		return false
	}
	return true
}

type OperateEblResp struct {
}

func NewOperateEblResp() *OperateEblResp {
	return &OperateEblResp{}
}

func (p *OperateEblResp) InitDefault() {
}

var fieldIDToName_OperateEblResp = map[int16]string{}

func (p *OperateEblResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OperateEblResp) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("OperateEblResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OperateEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateEblResp(%+v)", *p)

}

func (p *OperateEblResp) DeepEqual(ano *OperateEblResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type UploadSealReq struct {
	Token          string       `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Seal           *CompanySeal `thrift:"seal,2,required" frugal:"2,required,CompanySeal" json:"seal"`
	OriginFileName string       `thrift:"originFileName,3,required" frugal:"3,required,string" json:"originFileName"`
}

func NewUploadSealReq() *UploadSealReq {
	return &UploadSealReq{}
}

func (p *UploadSealReq) InitDefault() {
}

func (p *UploadSealReq) GetToken() (v string) {
	return p.Token
}

var UploadSealReq_Seal_DEFAULT *CompanySeal

func (p *UploadSealReq) GetSeal() (v *CompanySeal) {
	if !p.IsSetSeal() {
		return UploadSealReq_Seal_DEFAULT
	}
	return p.Seal
}

func (p *UploadSealReq) GetOriginFileName() (v string) {
	return p.OriginFileName
}
func (p *UploadSealReq) SetToken(val string) {
	p.Token = val
}
func (p *UploadSealReq) SetSeal(val *CompanySeal) {
	p.Seal = val
}
func (p *UploadSealReq) SetOriginFileName(val string) {
	p.OriginFileName = val
}

var fieldIDToName_UploadSealReq = map[int16]string{
	1: "token",
	2: "seal",
	3: "originFileName",
}

func (p *UploadSealReq) IsSetSeal() bool {
	return p.Seal != nil
}

func (p *UploadSealReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetSeal bool = false
	var issetOriginFileName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSeal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginFileName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSeal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOriginFileName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadSealReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadSealReq[fieldId]))
}

func (p *UploadSealReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *UploadSealReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewCompanySeal()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Seal = _field
	return nil
}
func (p *UploadSealReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginFileName = _field
	return nil
}

func (p *UploadSealReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadSealReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadSealReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadSealReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("seal", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Seal.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadSealReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originFileName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginFileName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UploadSealReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadSealReq(%+v)", *p)

}

func (p *UploadSealReq) DeepEqual(ano *UploadSealReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Seal) {
		return false
	}
	if !p.Field3DeepEqual(ano.OriginFileName) {
		return false
	}
	return true
}

func (p *UploadSealReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *UploadSealReq) Field2DeepEqual(src *CompanySeal) bool {

	if !p.Seal.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UploadSealReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OriginFileName, src) != 0 {
		return false
	}
	return true
}

type CompanySeal struct {
	Id        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name      string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Seal      []int8 `thrift:"seal,3,required" frugal:"3,required,list<byte>" json:"seal"`
	Url       string `thrift:"url,4,required" frugal:"4,required,string" json:"url"`
	CreatedAt *int64 `thrift:"created_at,5,optional" frugal:"5,optional,i64" json:"created_at,omitempty"`
	UpdatedAt *int64 `thrift:"updated_at,6,optional" frugal:"6,optional,i64" json:"updated_at,omitempty"`
	DeletedAt *int64 `thrift:"deleted_at,7,optional" frugal:"7,optional,i64" json:"deleted_at,omitempty"`
	CompanyId int64  `thrift:"company_id,8,required" frugal:"8,required,i64" json:"company_id"`
}

func NewCompanySeal() *CompanySeal {
	return &CompanySeal{}
}

func (p *CompanySeal) InitDefault() {
}

func (p *CompanySeal) GetId() (v int64) {
	return p.Id
}

func (p *CompanySeal) GetName() (v string) {
	return p.Name
}

func (p *CompanySeal) GetSeal() (v []int8) {
	return p.Seal
}

func (p *CompanySeal) GetUrl() (v string) {
	return p.Url
}

var CompanySeal_CreatedAt_DEFAULT int64

func (p *CompanySeal) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return CompanySeal_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var CompanySeal_UpdatedAt_DEFAULT int64

func (p *CompanySeal) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return CompanySeal_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var CompanySeal_DeletedAt_DEFAULT int64

func (p *CompanySeal) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return CompanySeal_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

func (p *CompanySeal) GetCompanyId() (v int64) {
	return p.CompanyId
}
func (p *CompanySeal) SetId(val int64) {
	p.Id = val
}
func (p *CompanySeal) SetName(val string) {
	p.Name = val
}
func (p *CompanySeal) SetSeal(val []int8) {
	p.Seal = val
}
func (p *CompanySeal) SetUrl(val string) {
	p.Url = val
}
func (p *CompanySeal) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *CompanySeal) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *CompanySeal) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}
func (p *CompanySeal) SetCompanyId(val int64) {
	p.CompanyId = val
}

var fieldIDToName_CompanySeal = map[int16]string{
	1: "id",
	2: "name",
	3: "seal",
	4: "url",
	5: "created_at",
	6: "updated_at",
	7: "deleted_at",
	8: "company_id",
}

func (p *CompanySeal) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *CompanySeal) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *CompanySeal) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *CompanySeal) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetSeal bool = false
	var issetUrl bool = false
	var issetCompanyId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSeal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSeal {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUrl {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCompanyId {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanySeal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CompanySeal[fieldId]))
}

func (p *CompanySeal) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *CompanySeal) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CompanySeal) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int8, 0, size)
	for i := 0; i < size; i++ {

		var _elem int8
		if v, err := iprot.ReadByte(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Seal = _field
	return nil
}
func (p *CompanySeal) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *CompanySeal) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *CompanySeal) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *CompanySeal) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeletedAt = _field
	return nil
}
func (p *CompanySeal) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyId = _field
	return nil
}

func (p *CompanySeal) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CompanySeal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanySeal) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanySeal) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CompanySeal) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("seal", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.BYTE, len(p.Seal)); err != nil {
		return err
	}
	for _, v := range p.Seal {
		if err := oprot.WriteByte(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CompanySeal) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CompanySeal) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CompanySeal) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CompanySeal) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletedAt() {
		if err = oprot.WriteFieldBegin("deleted_at", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DeletedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CompanySeal) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_id", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CompanyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CompanySeal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanySeal(%+v)", *p)

}

func (p *CompanySeal) DeepEqual(ano *CompanySeal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Seal) {
		return false
	}
	if !p.Field4DeepEqual(ano.Url) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field8DeepEqual(ano.CompanyId) {
		return false
	}
	return true
}

func (p *CompanySeal) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *CompanySeal) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CompanySeal) Field3DeepEqual(src []int8) bool {

	if len(p.Seal) != len(src) {
		return false
	}
	for i, v := range p.Seal {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CompanySeal) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *CompanySeal) Field5DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *CompanySeal) Field6DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *CompanySeal) Field7DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *CompanySeal) Field8DeepEqual(src int64) bool {

	if p.CompanyId != src {
		return false
	}
	return true
}

type UploadSealResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewUploadSealResp() *UploadSealResp {
	return &UploadSealResp{}
}

func (p *UploadSealResp) InitDefault() {
}

func (p *UploadSealResp) GetId() (v int64) {
	return p.Id
}
func (p *UploadSealResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_UploadSealResp = map[int16]string{
	1: "id",
}

func (p *UploadSealResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadSealResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadSealResp[fieldId]))
}

func (p *UploadSealResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *UploadSealResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadSealResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadSealResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadSealResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadSealResp(%+v)", *p)

}

func (p *UploadSealResp) DeepEqual(ano *UploadSealResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *UploadSealResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type QuerySealReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewQuerySealReq() *QuerySealReq {
	return &QuerySealReq{}
}

func (p *QuerySealReq) InitDefault() {
}

func (p *QuerySealReq) GetToken() (v string) {
	return p.Token
}
func (p *QuerySealReq) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_QuerySealReq = map[int16]string{
	1: "token",
}

func (p *QuerySealReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QuerySealReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QuerySealReq[fieldId]))
}

func (p *QuerySealReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *QuerySealReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QuerySealReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QuerySealReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QuerySealReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuerySealReq(%+v)", *p)

}

func (p *QuerySealReq) DeepEqual(ano *QuerySealReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *QuerySealReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type QuerySealResp struct {
	Seal []*CompanySeal `thrift:"seal,1,required" frugal:"1,required,list<CompanySeal>" json:"seal"`
}

func NewQuerySealResp() *QuerySealResp {
	return &QuerySealResp{}
}

func (p *QuerySealResp) InitDefault() {
}

func (p *QuerySealResp) GetSeal() (v []*CompanySeal) {
	return p.Seal
}
func (p *QuerySealResp) SetSeal(val []*CompanySeal) {
	p.Seal = val
}

var fieldIDToName_QuerySealResp = map[int16]string{
	1: "seal",
}

func (p *QuerySealResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSeal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSeal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSeal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QuerySealResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QuerySealResp[fieldId]))
}

func (p *QuerySealResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*CompanySeal, 0, size)
	values := make([]CompanySeal, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Seal = _field
	return nil
}

func (p *QuerySealResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QuerySealResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QuerySealResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("seal", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Seal)); err != nil {
		return err
	}
	for _, v := range p.Seal {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QuerySealResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuerySealResp(%+v)", *p)

}

func (p *QuerySealResp) DeepEqual(ano *QuerySealResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Seal) {
		return false
	}
	return true
}

func (p *QuerySealResp) Field1DeepEqual(src []*CompanySeal) bool {

	if len(p.Seal) != len(src) {
		return false
	}
	for i, v := range p.Seal {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DeleteSealReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewDeleteSealReq() *DeleteSealReq {
	return &DeleteSealReq{}
}

func (p *DeleteSealReq) InitDefault() {
}

func (p *DeleteSealReq) GetToken() (v string) {
	return p.Token
}

func (p *DeleteSealReq) GetId() (v int64) {
	return p.Id
}
func (p *DeleteSealReq) SetToken(val string) {
	p.Token = val
}
func (p *DeleteSealReq) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_DeleteSealReq = map[int16]string{
	1: "token",
	2: "id",
}

func (p *DeleteSealReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteSealReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteSealReq[fieldId]))
}

func (p *DeleteSealReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *DeleteSealReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *DeleteSealReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSealReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteSealReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteSealReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteSealReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSealReq(%+v)", *p)

}

func (p *DeleteSealReq) DeepEqual(ano *DeleteSealReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *DeleteSealReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteSealReq) Field2DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type DeleteSealResp struct {
}

func NewDeleteSealResp() *DeleteSealResp {
	return &DeleteSealResp{}
}

func (p *DeleteSealResp) InitDefault() {
}

var fieldIDToName_DeleteSealResp = map[int16]string{}

func (p *DeleteSealResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteSealResp) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("DeleteSealResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteSealResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSealResp(%+v)", *p)

}

func (p *DeleteSealResp) DeepEqual(ano *DeleteSealResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CheckTokenReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewCheckTokenReq() *CheckTokenReq {
	return &CheckTokenReq{}
}

func (p *CheckTokenReq) InitDefault() {
}

func (p *CheckTokenReq) GetToken() (v string) {
	return p.Token
}
func (p *CheckTokenReq) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_CheckTokenReq = map[int16]string{
	1: "token",
}

func (p *CheckTokenReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckTokenReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CheckTokenReq[fieldId]))
}

func (p *CheckTokenReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *CheckTokenReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckTokenReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckTokenReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckTokenReq(%+v)", *p)

}

func (p *CheckTokenReq) DeepEqual(ano *CheckTokenReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *CheckTokenReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type CheckTokenResp struct {
	Valid bool `thrift:"valid,1,required" frugal:"1,required,bool" json:"valid"`
}

func NewCheckTokenResp() *CheckTokenResp {
	return &CheckTokenResp{}
}

func (p *CheckTokenResp) InitDefault() {
}

func (p *CheckTokenResp) GetValid() (v bool) {
	return p.Valid
}
func (p *CheckTokenResp) SetValid(val bool) {
	p.Valid = val
}

var fieldIDToName_CheckTokenResp = map[int16]string{
	1: "valid",
}

func (p *CheckTokenResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValid = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValid {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckTokenResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CheckTokenResp[fieldId]))
}

func (p *CheckTokenResp) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Valid = _field
	return nil
}

func (p *CheckTokenResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckTokenResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckTokenResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Valid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckTokenResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckTokenResp(%+v)", *p)

}

func (p *CheckTokenResp) DeepEqual(ano *CheckTokenResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Valid) {
		return false
	}
	return true
}

func (p *CheckTokenResp) Field1DeepEqual(src bool) bool {

	if p.Valid != src {
		return false
	}
	return true
}

type CreateInvoiceReq struct {
	Token   string   `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Invoice *Invoice `thrift:"invoice,2,required" frugal:"2,required,Invoice" json:"invoice"`
}

func NewCreateInvoiceReq() *CreateInvoiceReq {
	return &CreateInvoiceReq{}
}

func (p *CreateInvoiceReq) InitDefault() {
}

func (p *CreateInvoiceReq) GetToken() (v string) {
	return p.Token
}

var CreateInvoiceReq_Invoice_DEFAULT *Invoice

func (p *CreateInvoiceReq) GetInvoice() (v *Invoice) {
	if !p.IsSetInvoice() {
		return CreateInvoiceReq_Invoice_DEFAULT
	}
	return p.Invoice
}
func (p *CreateInvoiceReq) SetToken(val string) {
	p.Token = val
}
func (p *CreateInvoiceReq) SetInvoice(val *Invoice) {
	p.Invoice = val
}

var fieldIDToName_CreateInvoiceReq = map[int16]string{
	1: "token",
	2: "invoice",
}

func (p *CreateInvoiceReq) IsSetInvoice() bool {
	return p.Invoice != nil
}

func (p *CreateInvoiceReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetInvoice bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoice = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInvoice {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateInvoiceReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateInvoiceReq[fieldId]))
}

func (p *CreateInvoiceReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *CreateInvoiceReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewInvoice()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Invoice = _field
	return nil
}

func (p *CreateInvoiceReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInvoiceReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateInvoiceReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateInvoiceReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoice", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Invoice.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateInvoiceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateInvoiceReq(%+v)", *p)

}

func (p *CreateInvoiceReq) DeepEqual(ano *CreateInvoiceReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Invoice) {
		return false
	}
	return true
}

func (p *CreateInvoiceReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *CreateInvoiceReq) Field2DeepEqual(src *Invoice) bool {

	if !p.Invoice.DeepEqual(src) {
		return false
	}
	return true
}

type CreateInvoiceResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateInvoiceResp() *CreateInvoiceResp {
	return &CreateInvoiceResp{}
}

func (p *CreateInvoiceResp) InitDefault() {
}

func (p *CreateInvoiceResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateInvoiceResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateInvoiceResp = map[int16]string{
	1: "id",
}

func (p *CreateInvoiceResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateInvoiceResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateInvoiceResp[fieldId]))
}

func (p *CreateInvoiceResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateInvoiceResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInvoiceResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateInvoiceResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateInvoiceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateInvoiceResp(%+v)", *p)

}

func (p *CreateInvoiceResp) DeepEqual(ano *CreateInvoiceResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateInvoiceResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type CreateContractReq struct {
	Token    string    `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Contract *Contract `thrift:"contract,2,required" frugal:"2,required,Contract" json:"contract"`
}

func NewCreateContractReq() *CreateContractReq {
	return &CreateContractReq{}
}

func (p *CreateContractReq) InitDefault() {
}

func (p *CreateContractReq) GetToken() (v string) {
	return p.Token
}

var CreateContractReq_Contract_DEFAULT *Contract

func (p *CreateContractReq) GetContract() (v *Contract) {
	if !p.IsSetContract() {
		return CreateContractReq_Contract_DEFAULT
	}
	return p.Contract
}
func (p *CreateContractReq) SetToken(val string) {
	p.Token = val
}
func (p *CreateContractReq) SetContract(val *Contract) {
	p.Contract = val
}

var fieldIDToName_CreateContractReq = map[int16]string{
	1: "token",
	2: "contract",
}

func (p *CreateContractReq) IsSetContract() bool {
	return p.Contract != nil
}

func (p *CreateContractReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetContract bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetContract = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetContract {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateContractReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateContractReq[fieldId]))
}

func (p *CreateContractReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *CreateContractReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewContract()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Contract = _field
	return nil
}

func (p *CreateContractReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateContractReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateContractReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateContractReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contract", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Contract.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateContractReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateContractReq(%+v)", *p)

}

func (p *CreateContractReq) DeepEqual(ano *CreateContractReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Contract) {
		return false
	}
	return true
}

func (p *CreateContractReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *CreateContractReq) Field2DeepEqual(src *Contract) bool {

	if !p.Contract.DeepEqual(src) {
		return false
	}
	return true
}

type CreateContractResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateContractResp() *CreateContractResp {
	return &CreateContractResp{}
}

func (p *CreateContractResp) InitDefault() {
}

func (p *CreateContractResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateContractResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateContractResp = map[int16]string{
	1: "id",
}

func (p *CreateContractResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateContractResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateContractResp[fieldId]))
}

func (p *CreateContractResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateContractResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateContractResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateContractResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateContractResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateContractResp(%+v)", *p)

}

func (p *CreateContractResp) DeepEqual(ano *CreateContractResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateContractResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type CreateDocumentReq struct {
	Token    string    `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Document *Document `thrift:"document,2,required" frugal:"2,required,Document" json:"document"`
}

func NewCreateDocumentReq() *CreateDocumentReq {
	return &CreateDocumentReq{}
}

func (p *CreateDocumentReq) InitDefault() {
}

func (p *CreateDocumentReq) GetToken() (v string) {
	return p.Token
}

var CreateDocumentReq_Document_DEFAULT *Document

func (p *CreateDocumentReq) GetDocument() (v *Document) {
	if !p.IsSetDocument() {
		return CreateDocumentReq_Document_DEFAULT
	}
	return p.Document
}
func (p *CreateDocumentReq) SetToken(val string) {
	p.Token = val
}
func (p *CreateDocumentReq) SetDocument(val *Document) {
	p.Document = val
}

var fieldIDToName_CreateDocumentReq = map[int16]string{
	1: "token",
	2: "document",
}

func (p *CreateDocumentReq) IsSetDocument() bool {
	return p.Document != nil
}

func (p *CreateDocumentReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetDocument bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocument = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDocument {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDocumentReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateDocumentReq[fieldId]))
}

func (p *CreateDocumentReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *CreateDocumentReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewDocument()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Document = _field
	return nil
}

func (p *CreateDocumentReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDocumentReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDocumentReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateDocumentReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("document", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Document.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateDocumentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDocumentReq(%+v)", *p)

}

func (p *CreateDocumentReq) DeepEqual(ano *CreateDocumentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Document) {
		return false
	}
	return true
}

func (p *CreateDocumentReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDocumentReq) Field2DeepEqual(src *Document) bool {

	if !p.Document.DeepEqual(src) {
		return false
	}
	return true
}

type CreateDocumentResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateDocumentResp() *CreateDocumentResp {
	return &CreateDocumentResp{}
}

func (p *CreateDocumentResp) InitDefault() {
}

func (p *CreateDocumentResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateDocumentResp) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_CreateDocumentResp = map[int16]string{
	1: "id",
}

func (p *CreateDocumentResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDocumentResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateDocumentResp[fieldId]))
}

func (p *CreateDocumentResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *CreateDocumentResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDocumentResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDocumentResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateDocumentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDocumentResp(%+v)", *p)

}

func (p *CreateDocumentResp) DeepEqual(ano *CreateDocumentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *CreateDocumentResp) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type QueryInvoiceListReq struct {
	Token    string         `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64          `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64          `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
	Invoice  *InvoiceFilter `thrift:"invoice,4,required" frugal:"4,required,InvoiceFilter" json:"invoice"`
}

func NewQueryInvoiceListReq() *QueryInvoiceListReq {
	return &QueryInvoiceListReq{}
}

func (p *QueryInvoiceListReq) InitDefault() {
}

func (p *QueryInvoiceListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryInvoiceListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryInvoiceListReq) GetPageNum() (v int64) {
	return p.PageNum
}

var QueryInvoiceListReq_Invoice_DEFAULT *InvoiceFilter

func (p *QueryInvoiceListReq) GetInvoice() (v *InvoiceFilter) {
	if !p.IsSetInvoice() {
		return QueryInvoiceListReq_Invoice_DEFAULT
	}
	return p.Invoice
}
func (p *QueryInvoiceListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryInvoiceListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryInvoiceListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryInvoiceListReq) SetInvoice(val *InvoiceFilter) {
	p.Invoice = val
}

var fieldIDToName_QueryInvoiceListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
	4: "invoice",
}

func (p *QueryInvoiceListReq) IsSetInvoice() bool {
	return p.Invoice != nil
}

func (p *QueryInvoiceListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetPageSize bool = false
	var issetPageNum bool = false
	var issetInvoice bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoice = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPageNum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetInvoice {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryInvoiceListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryInvoiceListReq[fieldId]))
}

func (p *QueryInvoiceListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryInvoiceListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryInvoiceListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNum = _field
	return nil
}
func (p *QueryInvoiceListReq) ReadField4(iprot thrift.TProtocol) error {
	_field := NewInvoiceFilter()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Invoice = _field
	return nil
}

func (p *QueryInvoiceListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryInvoiceListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryInvoiceListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryInvoiceListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryInvoiceListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryInvoiceListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoice", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Invoice.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryInvoiceListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryInvoiceListReq(%+v)", *p)

}

func (p *QueryInvoiceListReq) DeepEqual(ano *QueryInvoiceListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.Invoice) {
		return false
	}
	return true
}

func (p *QueryInvoiceListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryInvoiceListReq) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *QueryInvoiceListReq) Field3DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *QueryInvoiceListReq) Field4DeepEqual(src *InvoiceFilter) bool {

	if !p.Invoice.DeepEqual(src) {
		return false
	}
	return true
}

type QueryInvoiceListResp struct {
	InvoiceList []*Invoice `thrift:"invoiceList,1,required" frugal:"1,required,list<Invoice>" json:"invoiceList"`
	Total       int64      `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryInvoiceListResp() *QueryInvoiceListResp {
	return &QueryInvoiceListResp{}
}

func (p *QueryInvoiceListResp) InitDefault() {
}

func (p *QueryInvoiceListResp) GetInvoiceList() (v []*Invoice) {
	return p.InvoiceList
}

func (p *QueryInvoiceListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryInvoiceListResp) SetInvoiceList(val []*Invoice) {
	p.InvoiceList = val
}
func (p *QueryInvoiceListResp) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_QueryInvoiceListResp = map[int16]string{
	1: "invoiceList",
	2: "total",
}

func (p *QueryInvoiceListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInvoiceList bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoiceList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInvoiceList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryInvoiceListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryInvoiceListResp[fieldId]))
}

func (p *QueryInvoiceListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Invoice, 0, size)
	values := make([]Invoice, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InvoiceList = _field
	return nil
}
func (p *QueryInvoiceListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *QueryInvoiceListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryInvoiceListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryInvoiceListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoiceList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InvoiceList)); err != nil {
		return err
	}
	for _, v := range p.InvoiceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryInvoiceListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryInvoiceListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryInvoiceListResp(%+v)", *p)

}

func (p *QueryInvoiceListResp) DeepEqual(ano *QueryInvoiceListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InvoiceList) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *QueryInvoiceListResp) Field1DeepEqual(src []*Invoice) bool {

	if len(p.InvoiceList) != len(src) {
		return false
	}
	for i, v := range p.InvoiceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryInvoiceListResp) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type QueryContractListReq struct {
	Token    string          `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64           `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64           `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
	Contract *ContractFilter `thrift:"contract,4,optional" frugal:"4,optional,ContractFilter" json:"contract,omitempty"`
}

func NewQueryContractListReq() *QueryContractListReq {
	return &QueryContractListReq{}
}

func (p *QueryContractListReq) InitDefault() {
}

func (p *QueryContractListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryContractListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryContractListReq) GetPageNum() (v int64) {
	return p.PageNum
}

var QueryContractListReq_Contract_DEFAULT *ContractFilter

func (p *QueryContractListReq) GetContract() (v *ContractFilter) {
	if !p.IsSetContract() {
		return QueryContractListReq_Contract_DEFAULT
	}
	return p.Contract
}
func (p *QueryContractListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryContractListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryContractListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryContractListReq) SetContract(val *ContractFilter) {
	p.Contract = val
}

var fieldIDToName_QueryContractListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
	4: "contract",
}

func (p *QueryContractListReq) IsSetContract() bool {
	return p.Contract != nil
}

func (p *QueryContractListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetPageSize bool = false
	var issetPageNum bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPageNum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryContractListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryContractListReq[fieldId]))
}

func (p *QueryContractListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryContractListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryContractListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNum = _field
	return nil
}
func (p *QueryContractListReq) ReadField4(iprot thrift.TProtocol) error {
	_field := NewContractFilter()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Contract = _field
	return nil
}

func (p *QueryContractListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryContractListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryContractListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryContractListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryContractListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryContractListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContract() {
		if err = oprot.WriteFieldBegin("contract", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Contract.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryContractListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryContractListReq(%+v)", *p)

}

func (p *QueryContractListReq) DeepEqual(ano *QueryContractListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.Contract) {
		return false
	}
	return true
}

func (p *QueryContractListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryContractListReq) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *QueryContractListReq) Field3DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *QueryContractListReq) Field4DeepEqual(src *ContractFilter) bool {

	if !p.Contract.DeepEqual(src) {
		return false
	}
	return true
}

type QueryContractListResp struct {
	ContractList []*Contract `thrift:"contractList,1,required" frugal:"1,required,list<Contract>" json:"contractList"`
	Total        int64       `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryContractListResp() *QueryContractListResp {
	return &QueryContractListResp{}
}

func (p *QueryContractListResp) InitDefault() {
}

func (p *QueryContractListResp) GetContractList() (v []*Contract) {
	return p.ContractList
}

func (p *QueryContractListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryContractListResp) SetContractList(val []*Contract) {
	p.ContractList = val
}
func (p *QueryContractListResp) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_QueryContractListResp = map[int16]string{
	1: "contractList",
	2: "total",
}

func (p *QueryContractListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetContractList bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetContractList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetContractList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryContractListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryContractListResp[fieldId]))
}

func (p *QueryContractListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Contract, 0, size)
	values := make([]Contract, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ContractList = _field
	return nil
}
func (p *QueryContractListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *QueryContractListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryContractListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryContractListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contractList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContractList)); err != nil {
		return err
	}
	for _, v := range p.ContractList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryContractListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryContractListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryContractListResp(%+v)", *p)

}

func (p *QueryContractListResp) DeepEqual(ano *QueryContractListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContractList) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *QueryContractListResp) Field1DeepEqual(src []*Contract) bool {

	if len(p.ContractList) != len(src) {
		return false
	}
	for i, v := range p.ContractList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryContractListResp) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type QueryDocumentListReq struct {
	Token    string          `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64           `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64           `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
	Document *DocumentFilter `thrift:"document,4,optional" frugal:"4,optional,DocumentFilter" json:"document,omitempty"`
}

func NewQueryDocumentListReq() *QueryDocumentListReq {
	return &QueryDocumentListReq{}
}

func (p *QueryDocumentListReq) InitDefault() {
}

func (p *QueryDocumentListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryDocumentListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryDocumentListReq) GetPageNum() (v int64) {
	return p.PageNum
}

var QueryDocumentListReq_Document_DEFAULT *DocumentFilter

func (p *QueryDocumentListReq) GetDocument() (v *DocumentFilter) {
	if !p.IsSetDocument() {
		return QueryDocumentListReq_Document_DEFAULT
	}
	return p.Document
}
func (p *QueryDocumentListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryDocumentListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryDocumentListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryDocumentListReq) SetDocument(val *DocumentFilter) {
	p.Document = val
}

var fieldIDToName_QueryDocumentListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
	4: "document",
}

func (p *QueryDocumentListReq) IsSetDocument() bool {
	return p.Document != nil
}

func (p *QueryDocumentListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetPageSize bool = false
	var issetPageNum bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPageNum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryDocumentListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryDocumentListReq[fieldId]))
}

func (p *QueryDocumentListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *QueryDocumentListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *QueryDocumentListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNum = _field
	return nil
}
func (p *QueryDocumentListReq) ReadField4(iprot thrift.TProtocol) error {
	_field := NewDocumentFilter()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Document = _field
	return nil
}

func (p *QueryDocumentListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryDocumentListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryDocumentListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryDocumentListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryDocumentListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryDocumentListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocument() {
		if err = oprot.WriteFieldBegin("document", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Document.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryDocumentListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDocumentListReq(%+v)", *p)

}

func (p *QueryDocumentListReq) DeepEqual(ano *QueryDocumentListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.Document) {
		return false
	}
	return true
}

func (p *QueryDocumentListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *QueryDocumentListReq) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *QueryDocumentListReq) Field3DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *QueryDocumentListReq) Field4DeepEqual(src *DocumentFilter) bool {

	if !p.Document.DeepEqual(src) {
		return false
	}
	return true
}

type QueryDocumentListResp struct {
	DocumentList []*Document `thrift:"documentList,1,required" frugal:"1,required,list<Document>" json:"documentList"`
	Total        int64       `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryDocumentListResp() *QueryDocumentListResp {
	return &QueryDocumentListResp{}
}

func (p *QueryDocumentListResp) InitDefault() {
}

func (p *QueryDocumentListResp) GetDocumentList() (v []*Document) {
	return p.DocumentList
}

func (p *QueryDocumentListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryDocumentListResp) SetDocumentList(val []*Document) {
	p.DocumentList = val
}
func (p *QueryDocumentListResp) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_QueryDocumentListResp = map[int16]string{
	1: "documentList",
	2: "total",
}

func (p *QueryDocumentListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDocumentList bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocumentList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDocumentList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryDocumentListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryDocumentListResp[fieldId]))
}

func (p *QueryDocumentListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Document, 0, size)
	values := make([]Document, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DocumentList = _field
	return nil
}
func (p *QueryDocumentListResp) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *QueryDocumentListResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryDocumentListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryDocumentListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("documentList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DocumentList)); err != nil {
		return err
	}
	for _, v := range p.DocumentList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryDocumentListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryDocumentListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDocumentListResp(%+v)", *p)

}

func (p *QueryDocumentListResp) DeepEqual(ano *QueryDocumentListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DocumentList) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *QueryDocumentListResp) Field1DeepEqual(src []*Document) bool {

	if len(p.DocumentList) != len(src) {
		return false
	}
	for i, v := range p.DocumentList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *QueryDocumentListResp) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type GetInvoiceReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewGetInvoiceReq() *GetInvoiceReq {
	return &GetInvoiceReq{}
}

func (p *GetInvoiceReq) InitDefault() {
}

func (p *GetInvoiceReq) GetToken() (v string) {
	return p.Token
}

func (p *GetInvoiceReq) GetId() (v int64) {
	return p.Id
}
func (p *GetInvoiceReq) SetToken(val string) {
	p.Token = val
}
func (p *GetInvoiceReq) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_GetInvoiceReq = map[int16]string{
	1: "token",
	2: "id",
}

func (p *GetInvoiceReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetInvoiceReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetInvoiceReq[fieldId]))
}

func (p *GetInvoiceReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *GetInvoiceReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *GetInvoiceReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetInvoiceReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetInvoiceReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetInvoiceReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetInvoiceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInvoiceReq(%+v)", *p)

}

func (p *GetInvoiceReq) DeepEqual(ano *GetInvoiceReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetInvoiceReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *GetInvoiceReq) Field2DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetInvoiceResp struct {
	Invoice *Invoice `thrift:"invoice,1,required" frugal:"1,required,Invoice" json:"invoice"`
}

func NewGetInvoiceResp() *GetInvoiceResp {
	return &GetInvoiceResp{}
}

func (p *GetInvoiceResp) InitDefault() {
}

var GetInvoiceResp_Invoice_DEFAULT *Invoice

func (p *GetInvoiceResp) GetInvoice() (v *Invoice) {
	if !p.IsSetInvoice() {
		return GetInvoiceResp_Invoice_DEFAULT
	}
	return p.Invoice
}
func (p *GetInvoiceResp) SetInvoice(val *Invoice) {
	p.Invoice = val
}

var fieldIDToName_GetInvoiceResp = map[int16]string{
	1: "invoice",
}

func (p *GetInvoiceResp) IsSetInvoice() bool {
	return p.Invoice != nil
}

func (p *GetInvoiceResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInvoice bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoice = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInvoice {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetInvoiceResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetInvoiceResp[fieldId]))
}

func (p *GetInvoiceResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewInvoice()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Invoice = _field
	return nil
}

func (p *GetInvoiceResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetInvoiceResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetInvoiceResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoice", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Invoice.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetInvoiceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInvoiceResp(%+v)", *p)

}

func (p *GetInvoiceResp) DeepEqual(ano *GetInvoiceResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Invoice) {
		return false
	}
	return true
}

func (p *GetInvoiceResp) Field1DeepEqual(src *Invoice) bool {

	if !p.Invoice.DeepEqual(src) {
		return false
	}
	return true
}

type GetContractReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewGetContractReq() *GetContractReq {
	return &GetContractReq{}
}

func (p *GetContractReq) InitDefault() {
}

func (p *GetContractReq) GetToken() (v string) {
	return p.Token
}

func (p *GetContractReq) GetId() (v int64) {
	return p.Id
}
func (p *GetContractReq) SetToken(val string) {
	p.Token = val
}
func (p *GetContractReq) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_GetContractReq = map[int16]string{
	1: "token",
	2: "id",
}

func (p *GetContractReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetContractReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetContractReq[fieldId]))
}

func (p *GetContractReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *GetContractReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *GetContractReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetContractReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetContractReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetContractReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetContractReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContractReq(%+v)", *p)

}

func (p *GetContractReq) DeepEqual(ano *GetContractReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetContractReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *GetContractReq) Field2DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetContractResp struct {
	Contract *Contract `thrift:"contract,1,required" frugal:"1,required,Contract" json:"contract"`
}

func NewGetContractResp() *GetContractResp {
	return &GetContractResp{}
}

func (p *GetContractResp) InitDefault() {
}

var GetContractResp_Contract_DEFAULT *Contract

func (p *GetContractResp) GetContract() (v *Contract) {
	if !p.IsSetContract() {
		return GetContractResp_Contract_DEFAULT
	}
	return p.Contract
}
func (p *GetContractResp) SetContract(val *Contract) {
	p.Contract = val
}

var fieldIDToName_GetContractResp = map[int16]string{
	1: "contract",
}

func (p *GetContractResp) IsSetContract() bool {
	return p.Contract != nil
}

func (p *GetContractResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetContract bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetContract = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetContract {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetContractResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetContractResp[fieldId]))
}

func (p *GetContractResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewContract()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Contract = _field
	return nil
}

func (p *GetContractResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetContractResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetContractResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contract", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Contract.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetContractResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContractResp(%+v)", *p)

}

func (p *GetContractResp) DeepEqual(ano *GetContractResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Contract) {
		return false
	}
	return true
}

func (p *GetContractResp) Field1DeepEqual(src *Contract) bool {

	if !p.Contract.DeepEqual(src) {
		return false
	}
	return true
}

type GetDocumentReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewGetDocumentReq() *GetDocumentReq {
	return &GetDocumentReq{}
}

func (p *GetDocumentReq) InitDefault() {
}

func (p *GetDocumentReq) GetToken() (v string) {
	return p.Token
}

func (p *GetDocumentReq) GetId() (v int64) {
	return p.Id
}
func (p *GetDocumentReq) SetToken(val string) {
	p.Token = val
}
func (p *GetDocumentReq) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_GetDocumentReq = map[int16]string{
	1: "token",
	2: "id",
}

func (p *GetDocumentReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDocumentReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDocumentReq[fieldId]))
}

func (p *GetDocumentReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *GetDocumentReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *GetDocumentReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocumentReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDocumentReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDocumentReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDocumentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDocumentReq(%+v)", *p)

}

func (p *GetDocumentReq) DeepEqual(ano *GetDocumentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetDocumentReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *GetDocumentReq) Field2DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetDocumentResp struct {
	Document *Document `thrift:"document,1,required" frugal:"1,required,Document" json:"document"`
}

func NewGetDocumentResp() *GetDocumentResp {
	return &GetDocumentResp{}
}

func (p *GetDocumentResp) InitDefault() {
}

var GetDocumentResp_Document_DEFAULT *Document

func (p *GetDocumentResp) GetDocument() (v *Document) {
	if !p.IsSetDocument() {
		return GetDocumentResp_Document_DEFAULT
	}
	return p.Document
}
func (p *GetDocumentResp) SetDocument(val *Document) {
	p.Document = val
}

var fieldIDToName_GetDocumentResp = map[int16]string{
	1: "document",
}

func (p *GetDocumentResp) IsSetDocument() bool {
	return p.Document != nil
}

func (p *GetDocumentResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDocument bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocument = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDocument {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDocumentResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDocumentResp[fieldId]))
}

func (p *GetDocumentResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDocument()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Document = _field
	return nil
}

func (p *GetDocumentResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocumentResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDocumentResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("document", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Document.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDocumentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDocumentResp(%+v)", *p)

}

func (p *GetDocumentResp) DeepEqual(ano *GetDocumentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Document) {
		return false
	}
	return true
}

func (p *GetDocumentResp) Field1DeepEqual(src *Document) bool {

	if !p.Document.DeepEqual(src) {
		return false
	}
	return true
}

type Invoice struct {
	InvoiceNumber string      `thrift:"InvoiceNumber,1,required" frugal:"1,required,string" json:"InvoiceNumber"`
	Amount        float64     `thrift:"Amount,2,required" frugal:"2,required,double" json:"Amount"`
	IssueDate     int64       `thrift:"IssueDate,3,required" frugal:"3,required,i64" json:"IssueDate"`
	Type          InvoiceType `thrift:"Type,4,required" frugal:"4,required,InvoiceType" json:"Type"`
	FileHash      string      `thrift:"FileHash,5,required" frugal:"5,required,string" json:"FileHash"`
	Extra         *string     `thrift:"extra,6,optional" frugal:"6,optional,string" json:"extra,omitempty"`
	CreatedAt     *int64      `thrift:"CreatedAt,7,optional" frugal:"7,optional,i64" json:"CreatedAt,omitempty"`
	UpdatedAt     *int64      `thrift:"UpdatedAt,8,optional" frugal:"8,optional,i64" json:"UpdatedAt,omitempty"`
	Id            int64       `thrift:"Id,9,required" frugal:"9,required,i64" json:"Id"`
	Name          string      `thrift:"name,10,required" frugal:"10,required,string" json:"name"`
}

func NewInvoice() *Invoice {
	return &Invoice{}
}

func (p *Invoice) InitDefault() {
}

func (p *Invoice) GetInvoiceNumber() (v string) {
	return p.InvoiceNumber
}

func (p *Invoice) GetAmount() (v float64) {
	return p.Amount
}

func (p *Invoice) GetIssueDate() (v int64) {
	return p.IssueDate
}

func (p *Invoice) GetType() (v InvoiceType) {
	return p.Type
}

func (p *Invoice) GetFileHash() (v string) {
	return p.FileHash
}

var Invoice_Extra_DEFAULT string

func (p *Invoice) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Invoice_Extra_DEFAULT
	}
	return *p.Extra
}

var Invoice_CreatedAt_DEFAULT int64

func (p *Invoice) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Invoice_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Invoice_UpdatedAt_DEFAULT int64

func (p *Invoice) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Invoice_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

func (p *Invoice) GetId() (v int64) {
	return p.Id
}

func (p *Invoice) GetName() (v string) {
	return p.Name
}
func (p *Invoice) SetInvoiceNumber(val string) {
	p.InvoiceNumber = val
}
func (p *Invoice) SetAmount(val float64) {
	p.Amount = val
}
func (p *Invoice) SetIssueDate(val int64) {
	p.IssueDate = val
}
func (p *Invoice) SetType(val InvoiceType) {
	p.Type = val
}
func (p *Invoice) SetFileHash(val string) {
	p.FileHash = val
}
func (p *Invoice) SetExtra(val *string) {
	p.Extra = val
}
func (p *Invoice) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Invoice) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Invoice) SetId(val int64) {
	p.Id = val
}
func (p *Invoice) SetName(val string) {
	p.Name = val
}

var fieldIDToName_Invoice = map[int16]string{
	1:  "InvoiceNumber",
	2:  "Amount",
	3:  "IssueDate",
	4:  "Type",
	5:  "FileHash",
	6:  "extra",
	7:  "CreatedAt",
	8:  "UpdatedAt",
	9:  "Id",
	10: "name",
}

func (p *Invoice) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Invoice) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Invoice) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Invoice) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInvoiceNumber bool = false
	var issetAmount bool = false
	var issetIssueDate bool = false
	var issetType bool = false
	var issetFileHash bool = false
	var issetId bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoiceNumber = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIssueDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInvoiceNumber {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAmount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIssueDate {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetFileHash {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Invoice[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Invoice[fieldId]))
}

func (p *Invoice) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InvoiceNumber = _field
	return nil
}
func (p *Invoice) ReadField2(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *Invoice) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IssueDate = _field
	return nil
}
func (p *Invoice) ReadField4(iprot thrift.TProtocol) error {

	var _field InvoiceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = InvoiceType(v)
	}
	p.Type = _field
	return nil
}
func (p *Invoice) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileHash = _field
	return nil
}
func (p *Invoice) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Extra = _field
	return nil
}
func (p *Invoice) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Invoice) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Invoice) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Invoice) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}

func (p *Invoice) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Invoice"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Invoice) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InvoiceNumber", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InvoiceNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Invoice) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Amount", thrift.DOUBLE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Invoice) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IssueDate", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IssueDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Invoice) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Invoice) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FileHash", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Invoice) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Extra); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Invoice) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Invoice) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Invoice) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Invoice) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Invoice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Invoice(%+v)", *p)

}

func (p *Invoice) DeepEqual(ano *Invoice) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InvoiceNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field3DeepEqual(ano.IssueDate) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	if !p.Field5DeepEqual(ano.FileHash) {
		return false
	}
	if !p.Field6DeepEqual(ano.Extra) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field8DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field9DeepEqual(ano.Id) {
		return false
	}
	if !p.Field10DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *Invoice) Field1DeepEqual(src string) bool {

	if strings.Compare(p.InvoiceNumber, src) != 0 {
		return false
	}
	return true
}
func (p *Invoice) Field2DeepEqual(src float64) bool {

	if p.Amount != src {
		return false
	}
	return true
}
func (p *Invoice) Field3DeepEqual(src int64) bool {

	if p.IssueDate != src {
		return false
	}
	return true
}
func (p *Invoice) Field4DeepEqual(src InvoiceType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *Invoice) Field5DeepEqual(src string) bool {

	if strings.Compare(p.FileHash, src) != 0 {
		return false
	}
	return true
}
func (p *Invoice) Field6DeepEqual(src *string) bool {

	if p.Extra == src {
		return true
	} else if p.Extra == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Extra, *src) != 0 {
		return false
	}
	return true
}
func (p *Invoice) Field7DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *Invoice) Field8DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *Invoice) Field9DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Invoice) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type InvoiceFilter struct {
	InvoiceNumber *string      `thrift:"InvoiceNumber,1,optional" frugal:"1,optional,string" json:"InvoiceNumber,omitempty"`
	Amount        *float64     `thrift:"Amount,2,optional" frugal:"2,optional,double" json:"Amount,omitempty"`
	IssueDate     *int64       `thrift:"IssueDate,3,optional" frugal:"3,optional,i64" json:"IssueDate,omitempty"`
	Type          *InvoiceType `thrift:"Type,4,optional" frugal:"4,optional,InvoiceType" json:"Type,omitempty"`
	FileHash      *string      `thrift:"FileHash,5,optional" frugal:"5,optional,string" json:"FileHash,omitempty"`
	Name          *string      `thrift:"name,6,optional" frugal:"6,optional,string" json:"name,omitempty"`
}

func NewInvoiceFilter() *InvoiceFilter {
	return &InvoiceFilter{}
}

func (p *InvoiceFilter) InitDefault() {
}

var InvoiceFilter_InvoiceNumber_DEFAULT string

func (p *InvoiceFilter) GetInvoiceNumber() (v string) {
	if !p.IsSetInvoiceNumber() {
		return InvoiceFilter_InvoiceNumber_DEFAULT
	}
	return *p.InvoiceNumber
}

var InvoiceFilter_Amount_DEFAULT float64

func (p *InvoiceFilter) GetAmount() (v float64) {
	if !p.IsSetAmount() {
		return InvoiceFilter_Amount_DEFAULT
	}
	return *p.Amount
}

var InvoiceFilter_IssueDate_DEFAULT int64

func (p *InvoiceFilter) GetIssueDate() (v int64) {
	if !p.IsSetIssueDate() {
		return InvoiceFilter_IssueDate_DEFAULT
	}
	return *p.IssueDate
}

var InvoiceFilter_Type_DEFAULT InvoiceType

func (p *InvoiceFilter) GetType() (v InvoiceType) {
	if !p.IsSetType() {
		return InvoiceFilter_Type_DEFAULT
	}
	return *p.Type
}

var InvoiceFilter_FileHash_DEFAULT string

func (p *InvoiceFilter) GetFileHash() (v string) {
	if !p.IsSetFileHash() {
		return InvoiceFilter_FileHash_DEFAULT
	}
	return *p.FileHash
}

var InvoiceFilter_Name_DEFAULT string

func (p *InvoiceFilter) GetName() (v string) {
	if !p.IsSetName() {
		return InvoiceFilter_Name_DEFAULT
	}
	return *p.Name
}
func (p *InvoiceFilter) SetInvoiceNumber(val *string) {
	p.InvoiceNumber = val
}
func (p *InvoiceFilter) SetAmount(val *float64) {
	p.Amount = val
}
func (p *InvoiceFilter) SetIssueDate(val *int64) {
	p.IssueDate = val
}
func (p *InvoiceFilter) SetType(val *InvoiceType) {
	p.Type = val
}
func (p *InvoiceFilter) SetFileHash(val *string) {
	p.FileHash = val
}
func (p *InvoiceFilter) SetName(val *string) {
	p.Name = val
}

var fieldIDToName_InvoiceFilter = map[int16]string{
	1: "InvoiceNumber",
	2: "Amount",
	3: "IssueDate",
	4: "Type",
	5: "FileHash",
	6: "name",
}

func (p *InvoiceFilter) IsSetInvoiceNumber() bool {
	return p.InvoiceNumber != nil
}

func (p *InvoiceFilter) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *InvoiceFilter) IsSetIssueDate() bool {
	return p.IssueDate != nil
}

func (p *InvoiceFilter) IsSetType() bool {
	return p.Type != nil
}

func (p *InvoiceFilter) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *InvoiceFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *InvoiceFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InvoiceFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InvoiceFilter) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InvoiceNumber = _field
	return nil
}
func (p *InvoiceFilter) ReadField2(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Amount = _field
	return nil
}
func (p *InvoiceFilter) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IssueDate = _field
	return nil
}
func (p *InvoiceFilter) ReadField4(iprot thrift.TProtocol) error {

	var _field *InvoiceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := InvoiceType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *InvoiceFilter) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileHash = _field
	return nil
}
func (p *InvoiceFilter) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}

func (p *InvoiceFilter) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("InvoiceFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InvoiceFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvoiceNumber() {
		if err = oprot.WriteFieldBegin("InvoiceNumber", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.InvoiceNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InvoiceFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err = oprot.WriteFieldBegin("Amount", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Amount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InvoiceFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIssueDate() {
		if err = oprot.WriteFieldBegin("IssueDate", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.IssueDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InvoiceFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *InvoiceFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileHash() {
		if err = oprot.WriteFieldBegin("FileHash", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *InvoiceFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *InvoiceFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvoiceFilter(%+v)", *p)

}

func (p *InvoiceFilter) DeepEqual(ano *InvoiceFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InvoiceNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field3DeepEqual(ano.IssueDate) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	if !p.Field5DeepEqual(ano.FileHash) {
		return false
	}
	if !p.Field6DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *InvoiceFilter) Field1DeepEqual(src *string) bool {

	if p.InvoiceNumber == src {
		return true
	} else if p.InvoiceNumber == nil || src == nil {
		return false
	}
	if strings.Compare(*p.InvoiceNumber, *src) != 0 {
		return false
	}
	return true
}
func (p *InvoiceFilter) Field2DeepEqual(src *float64) bool {

	if p.Amount == src {
		return true
	} else if p.Amount == nil || src == nil {
		return false
	}
	if *p.Amount != *src {
		return false
	}
	return true
}
func (p *InvoiceFilter) Field3DeepEqual(src *int64) bool {

	if p.IssueDate == src {
		return true
	} else if p.IssueDate == nil || src == nil {
		return false
	}
	if *p.IssueDate != *src {
		return false
	}
	return true
}
func (p *InvoiceFilter) Field4DeepEqual(src *InvoiceType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *InvoiceFilter) Field5DeepEqual(src *string) bool {

	if p.FileHash == src {
		return true
	} else if p.FileHash == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileHash, *src) != 0 {
		return false
	}
	return true
}
func (p *InvoiceFilter) Field6DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}

type Contract struct {
	ContractNumber string         `thrift:"ContractNumber,1,required" frugal:"1,required,string" json:"ContractNumber"`
	SignDate       int64          `thrift:"SignDate,2,required" frugal:"2,required,i64" json:"SignDate"`
	EffectiveDate  int64          `thrift:"EffectiveDate,3,required" frugal:"3,required,i64" json:"EffectiveDate"`
	Amount         float64        `thrift:"Amount,4,required" frugal:"4,required,double" json:"Amount"`
	Status         ContractStatus `thrift:"Status,5,required" frugal:"5,required,ContractStatus" json:"Status"`
	FileHash       string         `thrift:"FileHash,6,required" frugal:"6,required,string" json:"FileHash"`
	Extra          *string        `thrift:"extra,7,optional" frugal:"7,optional,string" json:"extra,omitempty"`
	CreatedAt      *int64         `thrift:"CreatedAt,8,optional" frugal:"8,optional,i64" json:"CreatedAt,omitempty"`
	UpdatedAt      *int64         `thrift:"UpdatedAt,9,optional" frugal:"9,optional,i64" json:"UpdatedAt,omitempty"`
	Id             int64          `thrift:"Id,10,required" frugal:"10,required,i64" json:"Id"`
	Name           string         `thrift:"name,11,required" frugal:"11,required,string" json:"name"`
}

func NewContract() *Contract {
	return &Contract{}
}

func (p *Contract) InitDefault() {
}

func (p *Contract) GetContractNumber() (v string) {
	return p.ContractNumber
}

func (p *Contract) GetSignDate() (v int64) {
	return p.SignDate
}

func (p *Contract) GetEffectiveDate() (v int64) {
	return p.EffectiveDate
}

func (p *Contract) GetAmount() (v float64) {
	return p.Amount
}

func (p *Contract) GetStatus() (v ContractStatus) {
	return p.Status
}

func (p *Contract) GetFileHash() (v string) {
	return p.FileHash
}

var Contract_Extra_DEFAULT string

func (p *Contract) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Contract_Extra_DEFAULT
	}
	return *p.Extra
}

var Contract_CreatedAt_DEFAULT int64

func (p *Contract) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Contract_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Contract_UpdatedAt_DEFAULT int64

func (p *Contract) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Contract_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

func (p *Contract) GetId() (v int64) {
	return p.Id
}

func (p *Contract) GetName() (v string) {
	return p.Name
}
func (p *Contract) SetContractNumber(val string) {
	p.ContractNumber = val
}
func (p *Contract) SetSignDate(val int64) {
	p.SignDate = val
}
func (p *Contract) SetEffectiveDate(val int64) {
	p.EffectiveDate = val
}
func (p *Contract) SetAmount(val float64) {
	p.Amount = val
}
func (p *Contract) SetStatus(val ContractStatus) {
	p.Status = val
}
func (p *Contract) SetFileHash(val string) {
	p.FileHash = val
}
func (p *Contract) SetExtra(val *string) {
	p.Extra = val
}
func (p *Contract) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Contract) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Contract) SetId(val int64) {
	p.Id = val
}
func (p *Contract) SetName(val string) {
	p.Name = val
}

var fieldIDToName_Contract = map[int16]string{
	1:  "ContractNumber",
	2:  "SignDate",
	3:  "EffectiveDate",
	4:  "Amount",
	5:  "Status",
	6:  "FileHash",
	7:  "extra",
	8:  "CreatedAt",
	9:  "UpdatedAt",
	10: "Id",
	11: "name",
}

func (p *Contract) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Contract) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Contract) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Contract) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetContractNumber bool = false
	var issetSignDate bool = false
	var issetEffectiveDate bool = false
	var issetAmount bool = false
	var issetStatus bool = false
	var issetFileHash bool = false
	var issetId bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetContractNumber = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSignDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEffectiveDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetContractNumber {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSignDate {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEffectiveDate {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAmount {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetFileHash {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Contract[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Contract[fieldId]))
}

func (p *Contract) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContractNumber = _field
	return nil
}
func (p *Contract) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignDate = _field
	return nil
}
func (p *Contract) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EffectiveDate = _field
	return nil
}
func (p *Contract) ReadField4(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Amount = _field
	return nil
}
func (p *Contract) ReadField5(iprot thrift.TProtocol) error {

	var _field ContractStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ContractStatus(v)
	}
	p.Status = _field
	return nil
}
func (p *Contract) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileHash = _field
	return nil
}
func (p *Contract) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Extra = _field
	return nil
}
func (p *Contract) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Contract) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Contract) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Contract) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}

func (p *Contract) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Contract"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Contract) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ContractNumber", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ContractNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Contract) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SignDate", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SignDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Contract) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EffectiveDate", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EffectiveDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Contract) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Amount", thrift.DOUBLE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Contract) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Contract) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FileHash", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Contract) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Extra); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Contract) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Contract) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Contract) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Contract) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Contract) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contract(%+v)", *p)

}

func (p *Contract) DeepEqual(ano *Contract) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContractNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.SignDate) {
		return false
	}
	if !p.Field3DeepEqual(ano.EffectiveDate) {
		return false
	}
	if !p.Field4DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.FileHash) {
		return false
	}
	if !p.Field7DeepEqual(ano.Extra) {
		return false
	}
	if !p.Field8DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field9DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.Id) {
		return false
	}
	if !p.Field11DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *Contract) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ContractNumber, src) != 0 {
		return false
	}
	return true
}
func (p *Contract) Field2DeepEqual(src int64) bool {

	if p.SignDate != src {
		return false
	}
	return true
}
func (p *Contract) Field3DeepEqual(src int64) bool {

	if p.EffectiveDate != src {
		return false
	}
	return true
}
func (p *Contract) Field4DeepEqual(src float64) bool {

	if p.Amount != src {
		return false
	}
	return true
}
func (p *Contract) Field5DeepEqual(src ContractStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *Contract) Field6DeepEqual(src string) bool {

	if strings.Compare(p.FileHash, src) != 0 {
		return false
	}
	return true
}
func (p *Contract) Field7DeepEqual(src *string) bool {

	if p.Extra == src {
		return true
	} else if p.Extra == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Extra, *src) != 0 {
		return false
	}
	return true
}
func (p *Contract) Field8DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *Contract) Field9DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *Contract) Field10DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Contract) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type ContractFilter struct {
	ContractNumber *string         `thrift:"ContractNumber,1,optional" frugal:"1,optional,string" json:"ContractNumber,omitempty"`
	SignDate       *int64          `thrift:"SignDate,2,optional" frugal:"2,optional,i64" json:"SignDate,omitempty"`
	EffectiveDate  *int64          `thrift:"EffectiveDate,3,optional" frugal:"3,optional,i64" json:"EffectiveDate,omitempty"`
	Amount         *float64        `thrift:"Amount,4,optional" frugal:"4,optional,double" json:"Amount,omitempty"`
	Status         *ContractStatus `thrift:"Status,5,optional" frugal:"5,optional,ContractStatus" json:"Status,omitempty"`
	FileHash       *string         `thrift:"FileHash,6,optional" frugal:"6,optional,string" json:"FileHash,omitempty"`
	Name           *string         `thrift:"name,7,optional" frugal:"7,optional,string" json:"name,omitempty"`
}

func NewContractFilter() *ContractFilter {
	return &ContractFilter{}
}

func (p *ContractFilter) InitDefault() {
}

var ContractFilter_ContractNumber_DEFAULT string

func (p *ContractFilter) GetContractNumber() (v string) {
	if !p.IsSetContractNumber() {
		return ContractFilter_ContractNumber_DEFAULT
	}
	return *p.ContractNumber
}

var ContractFilter_SignDate_DEFAULT int64

func (p *ContractFilter) GetSignDate() (v int64) {
	if !p.IsSetSignDate() {
		return ContractFilter_SignDate_DEFAULT
	}
	return *p.SignDate
}

var ContractFilter_EffectiveDate_DEFAULT int64

func (p *ContractFilter) GetEffectiveDate() (v int64) {
	if !p.IsSetEffectiveDate() {
		return ContractFilter_EffectiveDate_DEFAULT
	}
	return *p.EffectiveDate
}

var ContractFilter_Amount_DEFAULT float64

func (p *ContractFilter) GetAmount() (v float64) {
	if !p.IsSetAmount() {
		return ContractFilter_Amount_DEFAULT
	}
	return *p.Amount
}

var ContractFilter_Status_DEFAULT ContractStatus

func (p *ContractFilter) GetStatus() (v ContractStatus) {
	if !p.IsSetStatus() {
		return ContractFilter_Status_DEFAULT
	}
	return *p.Status
}

var ContractFilter_FileHash_DEFAULT string

func (p *ContractFilter) GetFileHash() (v string) {
	if !p.IsSetFileHash() {
		return ContractFilter_FileHash_DEFAULT
	}
	return *p.FileHash
}

var ContractFilter_Name_DEFAULT string

func (p *ContractFilter) GetName() (v string) {
	if !p.IsSetName() {
		return ContractFilter_Name_DEFAULT
	}
	return *p.Name
}
func (p *ContractFilter) SetContractNumber(val *string) {
	p.ContractNumber = val
}
func (p *ContractFilter) SetSignDate(val *int64) {
	p.SignDate = val
}
func (p *ContractFilter) SetEffectiveDate(val *int64) {
	p.EffectiveDate = val
}
func (p *ContractFilter) SetAmount(val *float64) {
	p.Amount = val
}
func (p *ContractFilter) SetStatus(val *ContractStatus) {
	p.Status = val
}
func (p *ContractFilter) SetFileHash(val *string) {
	p.FileHash = val
}
func (p *ContractFilter) SetName(val *string) {
	p.Name = val
}

var fieldIDToName_ContractFilter = map[int16]string{
	1: "ContractNumber",
	2: "SignDate",
	3: "EffectiveDate",
	4: "Amount",
	5: "Status",
	6: "FileHash",
	7: "name",
}

func (p *ContractFilter) IsSetContractNumber() bool {
	return p.ContractNumber != nil
}

func (p *ContractFilter) IsSetSignDate() bool {
	return p.SignDate != nil
}

func (p *ContractFilter) IsSetEffectiveDate() bool {
	return p.EffectiveDate != nil
}

func (p *ContractFilter) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *ContractFilter) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ContractFilter) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *ContractFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *ContractFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContractFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContractFilter) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContractNumber = _field
	return nil
}
func (p *ContractFilter) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SignDate = _field
	return nil
}
func (p *ContractFilter) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EffectiveDate = _field
	return nil
}
func (p *ContractFilter) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Amount = _field
	return nil
}
func (p *ContractFilter) ReadField5(iprot thrift.TProtocol) error {

	var _field *ContractStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ContractStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *ContractFilter) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileHash = _field
	return nil
}
func (p *ContractFilter) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}

func (p *ContractFilter) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ContractFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContractFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContractNumber() {
		if err = oprot.WriteFieldBegin("ContractNumber", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContractNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContractFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignDate() {
		if err = oprot.WriteFieldBegin("SignDate", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SignDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContractFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEffectiveDate() {
		if err = oprot.WriteFieldBegin("EffectiveDate", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EffectiveDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContractFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err = oprot.WriteFieldBegin("Amount", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Amount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContractFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("Status", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ContractFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileHash() {
		if err = oprot.WriteFieldBegin("FileHash", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ContractFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ContractFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContractFilter(%+v)", *p)

}

func (p *ContractFilter) DeepEqual(ano *ContractFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContractNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.SignDate) {
		return false
	}
	if !p.Field3DeepEqual(ano.EffectiveDate) {
		return false
	}
	if !p.Field4DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.FileHash) {
		return false
	}
	if !p.Field7DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *ContractFilter) Field1DeepEqual(src *string) bool {

	if p.ContractNumber == src {
		return true
	} else if p.ContractNumber == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContractNumber, *src) != 0 {
		return false
	}
	return true
}
func (p *ContractFilter) Field2DeepEqual(src *int64) bool {

	if p.SignDate == src {
		return true
	} else if p.SignDate == nil || src == nil {
		return false
	}
	if *p.SignDate != *src {
		return false
	}
	return true
}
func (p *ContractFilter) Field3DeepEqual(src *int64) bool {

	if p.EffectiveDate == src {
		return true
	} else if p.EffectiveDate == nil || src == nil {
		return false
	}
	if *p.EffectiveDate != *src {
		return false
	}
	return true
}
func (p *ContractFilter) Field4DeepEqual(src *float64) bool {

	if p.Amount == src {
		return true
	} else if p.Amount == nil || src == nil {
		return false
	}
	if *p.Amount != *src {
		return false
	}
	return true
}
func (p *ContractFilter) Field5DeepEqual(src *ContractStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *ContractFilter) Field6DeepEqual(src *string) bool {

	if p.FileHash == src {
		return true
	} else if p.FileHash == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileHash, *src) != 0 {
		return false
	}
	return true
}
func (p *ContractFilter) Field7DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}

type Document struct {
	DocType     DocType `thrift:"DocType,1,required" frugal:"1,required,DocType" json:"DocType"`
	DocNumber   string  `thrift:"DocNumber,2,required" frugal:"2,required,string" json:"DocNumber"`
	RelatedDate int64   `thrift:"RelatedDate,3,required" frugal:"3,required,i64" json:"RelatedDate"`
	FileHash    string  `thrift:"FileHash,4,required" frugal:"4,required,string" json:"FileHash"`
	Extra       *string `thrift:"extra,5,optional" frugal:"5,optional,string" json:"extra,omitempty"`
	CreatedAt   *int64  `thrift:"CreatedAt,6,optional" frugal:"6,optional,i64" json:"CreatedAt,omitempty"`
	UpdatedAt   *int64  `thrift:"UpdatedAt,7,optional" frugal:"7,optional,i64" json:"UpdatedAt,omitempty"`
	Id          int64   `thrift:"Id,8,required" frugal:"8,required,i64" json:"Id"`
	Name        string  `thrift:"name,9,required" frugal:"9,required,string" json:"name"`
}

func NewDocument() *Document {
	return &Document{}
}

func (p *Document) InitDefault() {
}

func (p *Document) GetDocType() (v DocType) {
	return p.DocType
}

func (p *Document) GetDocNumber() (v string) {
	return p.DocNumber
}

func (p *Document) GetRelatedDate() (v int64) {
	return p.RelatedDate
}

func (p *Document) GetFileHash() (v string) {
	return p.FileHash
}

var Document_Extra_DEFAULT string

func (p *Document) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Document_Extra_DEFAULT
	}
	return *p.Extra
}

var Document_CreatedAt_DEFAULT int64

func (p *Document) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Document_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Document_UpdatedAt_DEFAULT int64

func (p *Document) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Document_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

func (p *Document) GetId() (v int64) {
	return p.Id
}

func (p *Document) GetName() (v string) {
	return p.Name
}
func (p *Document) SetDocType(val DocType) {
	p.DocType = val
}
func (p *Document) SetDocNumber(val string) {
	p.DocNumber = val
}
func (p *Document) SetRelatedDate(val int64) {
	p.RelatedDate = val
}
func (p *Document) SetFileHash(val string) {
	p.FileHash = val
}
func (p *Document) SetExtra(val *string) {
	p.Extra = val
}
func (p *Document) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Document) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Document) SetId(val int64) {
	p.Id = val
}
func (p *Document) SetName(val string) {
	p.Name = val
}

var fieldIDToName_Document = map[int16]string{
	1: "DocType",
	2: "DocNumber",
	3: "RelatedDate",
	4: "FileHash",
	5: "extra",
	6: "CreatedAt",
	7: "UpdatedAt",
	8: "Id",
	9: "name",
}

func (p *Document) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Document) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Document) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Document) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDocType bool = false
	var issetDocNumber bool = false
	var issetRelatedDate bool = false
	var issetFileHash bool = false
	var issetId bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocNumber = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetRelatedDate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDocType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDocNumber {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetRelatedDate {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFileHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Document[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Document[fieldId]))
}

func (p *Document) ReadField1(iprot thrift.TProtocol) error {

	var _field DocType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = DocType(v)
	}
	p.DocType = _field
	return nil
}
func (p *Document) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DocNumber = _field
	return nil
}
func (p *Document) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelatedDate = _field
	return nil
}
func (p *Document) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileHash = _field
	return nil
}
func (p *Document) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Extra = _field
	return nil
}
func (p *Document) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Document) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Document) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Document) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}

func (p *Document) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Document"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Document) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DocType", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.DocType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Document) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DocNumber", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DocNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Document) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RelatedDate", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RelatedDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Document) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FileHash", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Document) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Extra); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Document) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Document) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Document) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Document) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Document) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Document(%+v)", *p)

}

func (p *Document) DeepEqual(ano *Document) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DocType) {
		return false
	}
	if !p.Field2DeepEqual(ano.DocNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.RelatedDate) {
		return false
	}
	if !p.Field4DeepEqual(ano.FileHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.Extra) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field8DeepEqual(ano.Id) {
		return false
	}
	if !p.Field9DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *Document) Field1DeepEqual(src DocType) bool {

	if p.DocType != src {
		return false
	}
	return true
}
func (p *Document) Field2DeepEqual(src string) bool {

	if strings.Compare(p.DocNumber, src) != 0 {
		return false
	}
	return true
}
func (p *Document) Field3DeepEqual(src int64) bool {

	if p.RelatedDate != src {
		return false
	}
	return true
}
func (p *Document) Field4DeepEqual(src string) bool {

	if strings.Compare(p.FileHash, src) != 0 {
		return false
	}
	return true
}
func (p *Document) Field5DeepEqual(src *string) bool {

	if p.Extra == src {
		return true
	} else if p.Extra == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Extra, *src) != 0 {
		return false
	}
	return true
}
func (p *Document) Field6DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *Document) Field7DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *Document) Field8DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Document) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type DocumentFilter struct {
	DocType     *DocType `thrift:"DocType,1,optional" frugal:"1,optional,DocType" json:"DocType,omitempty"`
	DocNumber   *string  `thrift:"DocNumber,2,optional" frugal:"2,optional,string" json:"DocNumber,omitempty"`
	RelatedDate *int64   `thrift:"RelatedDate,3,optional" frugal:"3,optional,i64" json:"RelatedDate,omitempty"`
	FileHash    *string  `thrift:"FileHash,4,optional" frugal:"4,optional,string" json:"FileHash,omitempty"`
	Name        *string  `thrift:"name,5,optional" frugal:"5,optional,string" json:"name,omitempty"`
}

func NewDocumentFilter() *DocumentFilter {
	return &DocumentFilter{}
}

func (p *DocumentFilter) InitDefault() {
}

var DocumentFilter_DocType_DEFAULT DocType

func (p *DocumentFilter) GetDocType() (v DocType) {
	if !p.IsSetDocType() {
		return DocumentFilter_DocType_DEFAULT
	}
	return *p.DocType
}

var DocumentFilter_DocNumber_DEFAULT string

func (p *DocumentFilter) GetDocNumber() (v string) {
	if !p.IsSetDocNumber() {
		return DocumentFilter_DocNumber_DEFAULT
	}
	return *p.DocNumber
}

var DocumentFilter_RelatedDate_DEFAULT int64

func (p *DocumentFilter) GetRelatedDate() (v int64) {
	if !p.IsSetRelatedDate() {
		return DocumentFilter_RelatedDate_DEFAULT
	}
	return *p.RelatedDate
}

var DocumentFilter_FileHash_DEFAULT string

func (p *DocumentFilter) GetFileHash() (v string) {
	if !p.IsSetFileHash() {
		return DocumentFilter_FileHash_DEFAULT
	}
	return *p.FileHash
}

var DocumentFilter_Name_DEFAULT string

func (p *DocumentFilter) GetName() (v string) {
	if !p.IsSetName() {
		return DocumentFilter_Name_DEFAULT
	}
	return *p.Name
}
func (p *DocumentFilter) SetDocType(val *DocType) {
	p.DocType = val
}
func (p *DocumentFilter) SetDocNumber(val *string) {
	p.DocNumber = val
}
func (p *DocumentFilter) SetRelatedDate(val *int64) {
	p.RelatedDate = val
}
func (p *DocumentFilter) SetFileHash(val *string) {
	p.FileHash = val
}
func (p *DocumentFilter) SetName(val *string) {
	p.Name = val
}

var fieldIDToName_DocumentFilter = map[int16]string{
	1: "DocType",
	2: "DocNumber",
	3: "RelatedDate",
	4: "FileHash",
	5: "name",
}

func (p *DocumentFilter) IsSetDocType() bool {
	return p.DocType != nil
}

func (p *DocumentFilter) IsSetDocNumber() bool {
	return p.DocNumber != nil
}

func (p *DocumentFilter) IsSetRelatedDate() bool {
	return p.RelatedDate != nil
}

func (p *DocumentFilter) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *DocumentFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *DocumentFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DocumentFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DocumentFilter) ReadField1(iprot thrift.TProtocol) error {

	var _field *DocType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := DocType(v)
		_field = &tmp
	}
	p.DocType = _field
	return nil
}
func (p *DocumentFilter) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DocNumber = _field
	return nil
}
func (p *DocumentFilter) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RelatedDate = _field
	return nil
}
func (p *DocumentFilter) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileHash = _field
	return nil
}
func (p *DocumentFilter) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}

func (p *DocumentFilter) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DocumentFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DocumentFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocType() {
		if err = oprot.WriteFieldBegin("DocType", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.DocType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DocumentFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocNumber() {
		if err = oprot.WriteFieldBegin("DocNumber", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DocNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DocumentFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedDate() {
		if err = oprot.WriteFieldBegin("RelatedDate", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RelatedDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DocumentFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileHash() {
		if err = oprot.WriteFieldBegin("FileHash", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DocumentFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *DocumentFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentFilter(%+v)", *p)

}

func (p *DocumentFilter) DeepEqual(ano *DocumentFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DocType) {
		return false
	}
	if !p.Field2DeepEqual(ano.DocNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.RelatedDate) {
		return false
	}
	if !p.Field4DeepEqual(ano.FileHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *DocumentFilter) Field1DeepEqual(src *DocType) bool {

	if p.DocType == src {
		return true
	} else if p.DocType == nil || src == nil {
		return false
	}
	if *p.DocType != *src {
		return false
	}
	return true
}
func (p *DocumentFilter) Field2DeepEqual(src *string) bool {

	if p.DocNumber == src {
		return true
	} else if p.DocNumber == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DocNumber, *src) != 0 {
		return false
	}
	return true
}
func (p *DocumentFilter) Field3DeepEqual(src *int64) bool {

	if p.RelatedDate == src {
		return true
	} else if p.RelatedDate == nil || src == nil {
		return false
	}
	if *p.RelatedDate != *src {
		return false
	}
	return true
}
func (p *DocumentFilter) Field4DeepEqual(src *string) bool {

	if p.FileHash == src {
		return true
	} else if p.FileHash == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileHash, *src) != 0 {
		return false
	}
	return true
}
func (p *DocumentFilter) Field5DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}

type Company struct {
	Id          int64       `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	CompanyCode string      `thrift:"company_code,2,required" frugal:"2,required,string" json:"company_code"`
	CompanyName string      `thrift:"company_name,3,required" frugal:"3,required,string" json:"company_name"`
	CompanyType CompanyType `thrift:"company_type,4,required" frugal:"4,required,CompanyType" json:"company_type"`
}

func NewCompany() *Company {
	return &Company{}
}

func (p *Company) InitDefault() {
}

func (p *Company) GetId() (v int64) {
	return p.Id
}

func (p *Company) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *Company) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *Company) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}
func (p *Company) SetId(val int64) {
	p.Id = val
}
func (p *Company) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *Company) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *Company) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}

var fieldIDToName_Company = map[int16]string{
	1: "id",
	2: "company_code",
	3: "company_name",
	4: "company_type",
}

func (p *Company) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCompanyCode bool = false
	var issetCompanyName bool = false
	var issetCompanyType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCompanyCode {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCompanyType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Company[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Company[fieldId]))
}

func (p *Company) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Company) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyCode = _field
	return nil
}
func (p *Company) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *Company) ReadField4(iprot thrift.TProtocol) error {

	var _field CompanyType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = CompanyType(v)
	}
	p.CompanyType = _field
	return nil
}

func (p *Company) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Company"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Company) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Company) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_code", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Company) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Company) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("company_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.CompanyType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Company) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Company(%+v)", *p)

}

func (p *Company) DeepEqual(ano *Company) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompanyCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.CompanyType) {
		return false
	}
	return true
}

func (p *Company) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Company) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CompanyCode, src) != 0 {
		return false
	}
	return true
}
func (p *Company) Field3DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Company) Field4DeepEqual(src CompanyType) bool {

	if p.CompanyType != src {
		return false
	}
	return true
}

type Ebl struct {
	EblNo                  string  `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID        string  `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	OriginCompanyName      string  `thrift:"originCompanyName,3,required" frugal:"3,required,string" json:"originCompanyName"`
	ShipperCompanyID       string  `thrift:"shipperCompanyID,4,required" frugal:"4,required,string" json:"shipperCompanyID"`
	ShipperCompanyName     string  `thrift:"shipperCompanyName,5,required" frugal:"5,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyID     string  `thrift:"consigneeCompanyID,6,required" frugal:"6,required,string" json:"consigneeCompanyID"`
	ConsigneeCompanyName   string  `thrift:"consigneeCompanyName,7,required" frugal:"7,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyID   string  `thrift:"notifyPartyCompanyID,8,required" frugal:"8,required,string" json:"notifyPartyCompanyID"`
	NotifyPartyCompanyName string  `thrift:"notifyPartyCompanyName,9,required" frugal:"9,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string  `thrift:"placeOfReceipt,10,required" frugal:"10,required,string" json:"placeOfReceipt"`
	OceanVessel            string  `thrift:"oceanVessel,11,required" frugal:"11,required,string" json:"oceanVessel"`
	PortOfLoading          string  `thrift:"portOfLoading,12,required" frugal:"12,required,string" json:"portOfLoading"`
	PortOfDescharge        string  `thrift:"portOfDescharge,13,required" frugal:"13,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string  `thrift:"placeOfDestination,14,required" frugal:"14,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string  `thrift:"placeOfDelivery,15,required" frugal:"15,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string  `thrift:"shippingMarkes,16,required" frugal:"16,required,string" json:"shippingMarkes"`
	QuantityOfPackages     float64 `thrift:"quantityOfPackages,17,required" frugal:"17,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW       string  `thrift:"kindOfPackagesGW,18,required" frugal:"18,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string  `thrift:"kindOfPackagesM,19,required" frugal:"19,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string  `thrift:"descriptionOfGoods,20,required" frugal:"20,required,string" json:"descriptionOfGoods"`
	GrossWeight            float64 `thrift:"grossWeight,21,required" frugal:"21,required,double" json:"grossWeight"`
	Measurement            float64 `thrift:"measurement,22,required" frugal:"22,required,double" json:"measurement"`
	FreightAndCharges      string  `thrift:"freightAndCharges,23,required" frugal:"23,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string  `thrift:"placeOfIssue,24,required" frugal:"24,required,string" json:"placeOfIssue"`
	DateOfIssue            int64   `thrift:"dateOfIssue,25,required" frugal:"25,required,i64" json:"dateOfIssue"`
	DeliveryAgent          string  `thrift:"deliveryAgent,26,required" frugal:"26,required,string" json:"deliveryAgent"`
	ShippedOnBoard         int64   `thrift:"shippedOnBoard,27,required" frugal:"27,required,i64" json:"shippedOnBoard"`
	NumOfEbl               int64   `thrift:"numOfEbl,28,required" frugal:"28,required,i64" json:"numOfEbl"`
	DateOfIssueDeadline    int64   `thrift:"dateOfIssueDeadline,29,required" frugal:"29,required,i64" json:"dateOfIssueDeadline"`
	Status                 string  `thrift:"status,30,required" frugal:"30,required,string" json:"status"`
	File                   string  `thrift:"file,31,required" frugal:"31,required,string" json:"file"`
	ContractFiles          []int64 `thrift:"contractFiles,32,required" frugal:"32,required,list<i64>" json:"contractFiles"`
	InvoiceFiles           []int64 `thrift:"invoiceFiles,33,required" frugal:"33,required,list<i64>" json:"invoiceFiles"`
	TransferCompanyID      string  `thrift:"transferCompanyID,34,required" frugal:"34,required,string" json:"transferCompanyID"`
	TransferCompanyName    string  `thrift:"transferCompanyName,35,required" frugal:"35,required,string" json:"transferCompanyName"`
	CompanyID              string  `thrift:"companyID,36,required" frugal:"36,required,string" json:"companyID"`
	CompanyName            string  `thrift:"companyName,37,required" frugal:"37,required,string" json:"companyName"`
	DocumentFiles          []int64 `thrift:"documentFiles,38,required" frugal:"38,required,list<i64>" json:"documentFiles"`
}

func NewEbl() *Ebl {
	return &Ebl{}
}

func (p *Ebl) InitDefault() {
}

func (p *Ebl) GetEblNo() (v string) {
	return p.EblNo
}

func (p *Ebl) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *Ebl) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *Ebl) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *Ebl) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *Ebl) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *Ebl) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *Ebl) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *Ebl) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *Ebl) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *Ebl) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *Ebl) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *Ebl) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *Ebl) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *Ebl) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *Ebl) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *Ebl) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *Ebl) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *Ebl) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *Ebl) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *Ebl) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *Ebl) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *Ebl) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *Ebl) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *Ebl) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *Ebl) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *Ebl) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *Ebl) GetNumOfEbl() (v int64) {
	return p.NumOfEbl
}

func (p *Ebl) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *Ebl) GetStatus() (v string) {
	return p.Status
}

func (p *Ebl) GetFile() (v string) {
	return p.File
}

func (p *Ebl) GetContractFiles() (v []int64) {
	return p.ContractFiles
}

func (p *Ebl) GetInvoiceFiles() (v []int64) {
	return p.InvoiceFiles
}

func (p *Ebl) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *Ebl) GetTransferCompanyName() (v string) {
	return p.TransferCompanyName
}

func (p *Ebl) GetCompanyID() (v string) {
	return p.CompanyID
}

func (p *Ebl) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *Ebl) GetDocumentFiles() (v []int64) {
	return p.DocumentFiles
}
func (p *Ebl) SetEblNo(val string) {
	p.EblNo = val
}
func (p *Ebl) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *Ebl) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *Ebl) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *Ebl) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *Ebl) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *Ebl) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *Ebl) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *Ebl) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *Ebl) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *Ebl) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *Ebl) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *Ebl) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *Ebl) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *Ebl) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *Ebl) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *Ebl) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *Ebl) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *Ebl) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *Ebl) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *Ebl) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *Ebl) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *Ebl) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *Ebl) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *Ebl) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *Ebl) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *Ebl) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *Ebl) SetNumOfEbl(val int64) {
	p.NumOfEbl = val
}
func (p *Ebl) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *Ebl) SetStatus(val string) {
	p.Status = val
}
func (p *Ebl) SetFile(val string) {
	p.File = val
}
func (p *Ebl) SetContractFiles(val []int64) {
	p.ContractFiles = val
}
func (p *Ebl) SetInvoiceFiles(val []int64) {
	p.InvoiceFiles = val
}
func (p *Ebl) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *Ebl) SetTransferCompanyName(val string) {
	p.TransferCompanyName = val
}
func (p *Ebl) SetCompanyID(val string) {
	p.CompanyID = val
}
func (p *Ebl) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *Ebl) SetDocumentFiles(val []int64) {
	p.DocumentFiles = val
}

var fieldIDToName_Ebl = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "originCompanyName",
	4:  "shipperCompanyID",
	5:  "shipperCompanyName",
	6:  "consigneeCompanyID",
	7:  "consigneeCompanyName",
	8:  "notifyPartyCompanyID",
	9:  "notifyPartyCompanyName",
	10: "placeOfReceipt",
	11: "oceanVessel",
	12: "portOfLoading",
	13: "portOfDescharge",
	14: "placeOfDestination",
	15: "placeOfDelivery",
	16: "shippingMarkes",
	17: "quantityOfPackages",
	18: "kindOfPackagesGW",
	19: "kindOfPackagesM",
	20: "descriptionOfGoods",
	21: "grossWeight",
	22: "measurement",
	23: "freightAndCharges",
	24: "placeOfIssue",
	25: "dateOfIssue",
	26: "deliveryAgent",
	27: "shippedOnBoard",
	28: "numOfEbl",
	29: "dateOfIssueDeadline",
	30: "status",
	31: "file",
	32: "contractFiles",
	33: "invoiceFiles",
	34: "transferCompanyID",
	35: "transferCompanyName",
	36: "companyID",
	37: "companyName",
	38: "documentFiles",
}

func (p *Ebl) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblNo bool = false
	var issetOriginCompanyID bool = false
	var issetOriginCompanyName bool = false
	var issetShipperCompanyID bool = false
	var issetShipperCompanyName bool = false
	var issetConsigneeCompanyID bool = false
	var issetConsigneeCompanyName bool = false
	var issetNotifyPartyCompanyID bool = false
	var issetNotifyPartyCompanyName bool = false
	var issetPlaceOfReceipt bool = false
	var issetOceanVessel bool = false
	var issetPortOfLoading bool = false
	var issetPortOfDescharge bool = false
	var issetPlaceOfDestination bool = false
	var issetPlaceOfDelivery bool = false
	var issetShippingMarkes bool = false
	var issetQuantityOfPackages bool = false
	var issetKindOfPackagesGW bool = false
	var issetKindOfPackagesM bool = false
	var issetDescriptionOfGoods bool = false
	var issetGrossWeight bool = false
	var issetMeasurement bool = false
	var issetFreightAndCharges bool = false
	var issetPlaceOfIssue bool = false
	var issetDateOfIssue bool = false
	var issetDeliveryAgent bool = false
	var issetShippedOnBoard bool = false
	var issetNumOfEbl bool = false
	var issetDateOfIssueDeadline bool = false
	var issetStatus bool = false
	var issetFile bool = false
	var issetContractFiles bool = false
	var issetInvoiceFiles bool = false
	var issetTransferCompanyID bool = false
	var issetTransferCompanyName bool = false
	var issetCompanyID bool = false
	var issetCompanyName bool = false
	var issetDocumentFiles bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfReceipt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetOceanVessel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfLoading = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfDescharge = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDestination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDelivery = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippingMarkes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetQuantityOfPackages = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesGW = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesM = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionOfGoods = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetGrossWeight = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetMeasurement = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreightAndCharges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeliveryAgent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippedOnBoard = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumOfEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssueDeadline = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
				issetFile = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
				issetContractFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoiceFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 38:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocumentFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyName {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyID {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyName {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyID {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfReceipt {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetOceanVessel {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetPortOfLoading {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetPortOfDescharge {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDestination {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDelivery {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetShippingMarkes {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetQuantityOfPackages {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesGW {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesM {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionOfGoods {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetGrossWeight {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetMeasurement {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetFreightAndCharges {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfIssue {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssue {
		fieldId = 25
		goto RequiredFieldNotSetError
	}

	if !issetDeliveryAgent {
		fieldId = 26
		goto RequiredFieldNotSetError
	}

	if !issetShippedOnBoard {
		fieldId = 27
		goto RequiredFieldNotSetError
	}

	if !issetNumOfEbl {
		fieldId = 28
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssueDeadline {
		fieldId = 29
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 30
		goto RequiredFieldNotSetError
	}

	if !issetFile {
		fieldId = 31
		goto RequiredFieldNotSetError
	}

	if !issetContractFiles {
		fieldId = 32
		goto RequiredFieldNotSetError
	}

	if !issetInvoiceFiles {
		fieldId = 33
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyID {
		fieldId = 34
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyName {
		fieldId = 35
		goto RequiredFieldNotSetError
	}

	if !issetCompanyID {
		fieldId = 36
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 37
		goto RequiredFieldNotSetError
	}

	if !issetDocumentFiles {
		fieldId = 38
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Ebl[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Ebl[fieldId]))
}

func (p *Ebl) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *Ebl) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyID = _field
	return nil
}
func (p *Ebl) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyName = _field
	return nil
}
func (p *Ebl) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyID = _field
	return nil
}
func (p *Ebl) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyName = _field
	return nil
}
func (p *Ebl) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyID = _field
	return nil
}
func (p *Ebl) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyName = _field
	return nil
}
func (p *Ebl) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyID = _field
	return nil
}
func (p *Ebl) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyName = _field
	return nil
}
func (p *Ebl) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfReceipt = _field
	return nil
}
func (p *Ebl) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OceanVessel = _field
	return nil
}
func (p *Ebl) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfLoading = _field
	return nil
}
func (p *Ebl) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfDescharge = _field
	return nil
}
func (p *Ebl) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDestination = _field
	return nil
}
func (p *Ebl) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDelivery = _field
	return nil
}
func (p *Ebl) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippingMarkes = _field
	return nil
}
func (p *Ebl) ReadField17(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QuantityOfPackages = _field
	return nil
}
func (p *Ebl) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesGW = _field
	return nil
}
func (p *Ebl) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesM = _field
	return nil
}
func (p *Ebl) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionOfGoods = _field
	return nil
}
func (p *Ebl) ReadField21(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GrossWeight = _field
	return nil
}
func (p *Ebl) ReadField22(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Measurement = _field
	return nil
}
func (p *Ebl) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FreightAndCharges = _field
	return nil
}
func (p *Ebl) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfIssue = _field
	return nil
}
func (p *Ebl) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssue = _field
	return nil
}
func (p *Ebl) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeliveryAgent = _field
	return nil
}
func (p *Ebl) ReadField27(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippedOnBoard = _field
	return nil
}
func (p *Ebl) ReadField28(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumOfEbl = _field
	return nil
}
func (p *Ebl) ReadField29(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssueDeadline = _field
	return nil
}
func (p *Ebl) ReadField30(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *Ebl) ReadField31(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.File = _field
	return nil
}
func (p *Ebl) ReadField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ContractFiles = _field
	return nil
}
func (p *Ebl) ReadField33(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InvoiceFiles = _field
	return nil
}
func (p *Ebl) ReadField34(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyID = _field
	return nil
}
func (p *Ebl) ReadField35(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyName = _field
	return nil
}
func (p *Ebl) ReadField36(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyID = _field
	return nil
}
func (p *Ebl) ReadField37(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *Ebl) ReadField38(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DocumentFiles = _field
	return nil
}

func (p *Ebl) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Ebl"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Ebl) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Ebl) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Ebl) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Ebl) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyID", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Ebl) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Ebl) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyID", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Ebl) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Ebl) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyID", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Ebl) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyName", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Ebl) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfReceipt", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfReceipt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Ebl) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("oceanVessel", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OceanVessel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Ebl) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfLoading", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfLoading); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Ebl) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfDescharge", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfDescharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Ebl) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDestination", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDestination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Ebl) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDelivery", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDelivery); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *Ebl) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippingMarkes", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShippingMarkes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Ebl) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("quantityOfPackages", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.QuantityOfPackages); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *Ebl) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesGW", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesGW); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *Ebl) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesM", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesM); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *Ebl) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("descriptionOfGoods", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionOfGoods); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *Ebl) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grossWeight", thrift.DOUBLE, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.GrossWeight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *Ebl) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("measurement", thrift.DOUBLE, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Measurement); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *Ebl) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("freightAndCharges", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreightAndCharges); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *Ebl) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfIssue", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *Ebl) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssue", thrift.I64, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *Ebl) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deliveryAgent", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DeliveryAgent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *Ebl) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippedOnBoard", thrift.I64, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ShippedOnBoard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *Ebl) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numOfEbl", thrift.I64, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NumOfEbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *Ebl) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssueDeadline", thrift.I64, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssueDeadline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *Ebl) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *Ebl) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.File); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *Ebl) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contractFiles", thrift.LIST, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ContractFiles)); err != nil {
		return err
	}
	for _, v := range p.ContractFiles {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *Ebl) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoiceFiles", thrift.LIST, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.InvoiceFiles)); err != nil {
		return err
	}
	for _, v := range p.InvoiceFiles {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *Ebl) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyID", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *Ebl) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyName", thrift.STRING, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *Ebl) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyID", thrift.STRING, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *Ebl) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyName", thrift.STRING, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *Ebl) writeField38(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("documentFiles", thrift.LIST, 38); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DocumentFiles)); err != nil {
		return err
	}
	for _, v := range p.DocumentFiles {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *Ebl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ebl(%+v)", *p)

}

func (p *Ebl) DeepEqual(ano *Ebl) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.OriginCompanyID) {
		return false
	}
	if !p.Field3DeepEqual(ano.OriginCompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.ShipperCompanyID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ShipperCompanyName) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConsigneeCompanyID) {
		return false
	}
	if !p.Field7DeepEqual(ano.ConsigneeCompanyName) {
		return false
	}
	if !p.Field8DeepEqual(ano.NotifyPartyCompanyID) {
		return false
	}
	if !p.Field9DeepEqual(ano.NotifyPartyCompanyName) {
		return false
	}
	if !p.Field10DeepEqual(ano.PlaceOfReceipt) {
		return false
	}
	if !p.Field11DeepEqual(ano.OceanVessel) {
		return false
	}
	if !p.Field12DeepEqual(ano.PortOfLoading) {
		return false
	}
	if !p.Field13DeepEqual(ano.PortOfDescharge) {
		return false
	}
	if !p.Field14DeepEqual(ano.PlaceOfDestination) {
		return false
	}
	if !p.Field15DeepEqual(ano.PlaceOfDelivery) {
		return false
	}
	if !p.Field16DeepEqual(ano.ShippingMarkes) {
		return false
	}
	if !p.Field17DeepEqual(ano.QuantityOfPackages) {
		return false
	}
	if !p.Field18DeepEqual(ano.KindOfPackagesGW) {
		return false
	}
	if !p.Field19DeepEqual(ano.KindOfPackagesM) {
		return false
	}
	if !p.Field20DeepEqual(ano.DescriptionOfGoods) {
		return false
	}
	if !p.Field21DeepEqual(ano.GrossWeight) {
		return false
	}
	if !p.Field22DeepEqual(ano.Measurement) {
		return false
	}
	if !p.Field23DeepEqual(ano.FreightAndCharges) {
		return false
	}
	if !p.Field24DeepEqual(ano.PlaceOfIssue) {
		return false
	}
	if !p.Field25DeepEqual(ano.DateOfIssue) {
		return false
	}
	if !p.Field26DeepEqual(ano.DeliveryAgent) {
		return false
	}
	if !p.Field27DeepEqual(ano.ShippedOnBoard) {
		return false
	}
	if !p.Field28DeepEqual(ano.NumOfEbl) {
		return false
	}
	if !p.Field29DeepEqual(ano.DateOfIssueDeadline) {
		return false
	}
	if !p.Field30DeepEqual(ano.Status) {
		return false
	}
	if !p.Field31DeepEqual(ano.File) {
		return false
	}
	if !p.Field32DeepEqual(ano.ContractFiles) {
		return false
	}
	if !p.Field33DeepEqual(ano.InvoiceFiles) {
		return false
	}
	if !p.Field34DeepEqual(ano.TransferCompanyID) {
		return false
	}
	if !p.Field35DeepEqual(ano.TransferCompanyName) {
		return false
	}
	if !p.Field36DeepEqual(ano.CompanyID) {
		return false
	}
	if !p.Field37DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field38DeepEqual(ano.DocumentFiles) {
		return false
	}
	return true
}

func (p *Ebl) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field8DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field9DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfReceipt, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field11DeepEqual(src string) bool {

	if strings.Compare(p.OceanVessel, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field12DeepEqual(src string) bool {

	if strings.Compare(p.PortOfLoading, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field13DeepEqual(src string) bool {

	if strings.Compare(p.PortOfDescharge, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field14DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDestination, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field15DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDelivery, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ShippingMarkes, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field17DeepEqual(src float64) bool {

	if p.QuantityOfPackages != src {
		return false
	}
	return true
}
func (p *Ebl) Field18DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesGW, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field19DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesM, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field20DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionOfGoods, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field21DeepEqual(src float64) bool {

	if p.GrossWeight != src {
		return false
	}
	return true
}
func (p *Ebl) Field22DeepEqual(src float64) bool {

	if p.Measurement != src {
		return false
	}
	return true
}
func (p *Ebl) Field23DeepEqual(src string) bool {

	if strings.Compare(p.FreightAndCharges, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field24DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfIssue, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field25DeepEqual(src int64) bool {

	if p.DateOfIssue != src {
		return false
	}
	return true
}
func (p *Ebl) Field26DeepEqual(src string) bool {

	if strings.Compare(p.DeliveryAgent, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field27DeepEqual(src int64) bool {

	if p.ShippedOnBoard != src {
		return false
	}
	return true
}
func (p *Ebl) Field28DeepEqual(src int64) bool {

	if p.NumOfEbl != src {
		return false
	}
	return true
}
func (p *Ebl) Field29DeepEqual(src int64) bool {

	if p.DateOfIssueDeadline != src {
		return false
	}
	return true
}
func (p *Ebl) Field30DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field31DeepEqual(src string) bool {

	if strings.Compare(p.File, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field32DeepEqual(src []int64) bool {

	if len(p.ContractFiles) != len(src) {
		return false
	}
	for i, v := range p.ContractFiles {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Ebl) Field33DeepEqual(src []int64) bool {

	if len(p.InvoiceFiles) != len(src) {
		return false
	}
	for i, v := range p.InvoiceFiles {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Ebl) Field34DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field35DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field36DeepEqual(src string) bool {

	if strings.Compare(p.CompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field37DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *Ebl) Field38DeepEqual(src []int64) bool {

	if len(p.DocumentFiles) != len(src) {
		return false
	}
	for i, v := range p.DocumentFiles {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type EblExtra struct {
	EblNo                  string      `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID        string      `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	OriginCompanyName      string      `thrift:"originCompanyName,3,required" frugal:"3,required,string" json:"originCompanyName"`
	ShipperCompanyID       string      `thrift:"shipperCompanyID,4,required" frugal:"4,required,string" json:"shipperCompanyID"`
	ShipperCompanyName     string      `thrift:"shipperCompanyName,5,required" frugal:"5,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyID     string      `thrift:"consigneeCompanyID,6,required" frugal:"6,required,string" json:"consigneeCompanyID"`
	ConsigneeCompanyName   string      `thrift:"consigneeCompanyName,7,required" frugal:"7,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyID   string      `thrift:"notifyPartyCompanyID,8,required" frugal:"8,required,string" json:"notifyPartyCompanyID"`
	NotifyPartyCompanyName string      `thrift:"notifyPartyCompanyName,9,required" frugal:"9,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string      `thrift:"placeOfReceipt,10,required" frugal:"10,required,string" json:"placeOfReceipt"`
	OceanVessel            string      `thrift:"oceanVessel,11,required" frugal:"11,required,string" json:"oceanVessel"`
	PortOfLoading          string      `thrift:"portOfLoading,12,required" frugal:"12,required,string" json:"portOfLoading"`
	PortOfDescharge        string      `thrift:"portOfDescharge,13,required" frugal:"13,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string      `thrift:"placeOfDestination,14,required" frugal:"14,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string      `thrift:"placeOfDelivery,15,required" frugal:"15,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string      `thrift:"shippingMarkes,16,required" frugal:"16,required,string" json:"shippingMarkes"`
	QuantityOfPackages     float64     `thrift:"quantityOfPackages,17,required" frugal:"17,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW       string      `thrift:"kindOfPackagesGW,18,required" frugal:"18,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string      `thrift:"kindOfPackagesM,19,required" frugal:"19,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string      `thrift:"descriptionOfGoods,20,required" frugal:"20,required,string" json:"descriptionOfGoods"`
	GrossWeight            float64     `thrift:"grossWeight,21,required" frugal:"21,required,double" json:"grossWeight"`
	Measurement            float64     `thrift:"measurement,22,required" frugal:"22,required,double" json:"measurement"`
	FreightAndCharges      string      `thrift:"freightAndCharges,23,required" frugal:"23,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string      `thrift:"placeOfIssue,24,required" frugal:"24,required,string" json:"placeOfIssue"`
	DateOfIssue            int64       `thrift:"dateOfIssue,25,required" frugal:"25,required,i64" json:"dateOfIssue"`
	DeliveryAgent          string      `thrift:"deliveryAgent,26,required" frugal:"26,required,string" json:"deliveryAgent"`
	ShippedOnBoard         int64       `thrift:"shippedOnBoard,27,required" frugal:"27,required,i64" json:"shippedOnBoard"`
	NumOfEbl               int64       `thrift:"numOfEbl,28,required" frugal:"28,required,i64" json:"numOfEbl"`
	DateOfIssueDeadline    int64       `thrift:"dateOfIssueDeadline,29,required" frugal:"29,required,i64" json:"dateOfIssueDeadline"`
	Status                 string      `thrift:"status,30,required" frugal:"30,required,string" json:"status"`
	File                   string      `thrift:"file,31,required" frugal:"31,required,string" json:"file"`
	ContractFiles          []*Contract `thrift:"contractFiles,32,required" frugal:"32,required,list<Contract>" json:"contractFiles"`
	InvoiceFiles           []*Invoice  `thrift:"invoiceFiles,33,required" frugal:"33,required,list<Invoice>" json:"invoiceFiles"`
	TransferCompanyID      string      `thrift:"transferCompanyID,34,required" frugal:"34,required,string" json:"transferCompanyID"`
	TransferCompanyName    string      `thrift:"transferCompanyName,35,required" frugal:"35,required,string" json:"transferCompanyName"`
	CompanyID              string      `thrift:"companyID,36,required" frugal:"36,required,string" json:"companyID"`
	CompanyName            string      `thrift:"companyName,37,required" frugal:"37,required,string" json:"companyName"`
	DocumentFiles          []*Document `thrift:"documentFiles,38,required" frugal:"38,required,list<Document>" json:"documentFiles"`
}

func NewEblExtra() *EblExtra {
	return &EblExtra{}
}

func (p *EblExtra) InitDefault() {
}

func (p *EblExtra) GetEblNo() (v string) {
	return p.EblNo
}

func (p *EblExtra) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *EblExtra) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *EblExtra) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *EblExtra) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *EblExtra) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *EblExtra) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *EblExtra) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *EblExtra) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *EblExtra) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *EblExtra) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *EblExtra) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *EblExtra) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *EblExtra) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *EblExtra) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *EblExtra) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *EblExtra) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *EblExtra) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *EblExtra) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *EblExtra) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *EblExtra) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *EblExtra) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *EblExtra) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *EblExtra) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *EblExtra) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *EblExtra) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *EblExtra) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *EblExtra) GetNumOfEbl() (v int64) {
	return p.NumOfEbl
}

func (p *EblExtra) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *EblExtra) GetStatus() (v string) {
	return p.Status
}

func (p *EblExtra) GetFile() (v string) {
	return p.File
}

func (p *EblExtra) GetContractFiles() (v []*Contract) {
	return p.ContractFiles
}

func (p *EblExtra) GetInvoiceFiles() (v []*Invoice) {
	return p.InvoiceFiles
}

func (p *EblExtra) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *EblExtra) GetTransferCompanyName() (v string) {
	return p.TransferCompanyName
}

func (p *EblExtra) GetCompanyID() (v string) {
	return p.CompanyID
}

func (p *EblExtra) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *EblExtra) GetDocumentFiles() (v []*Document) {
	return p.DocumentFiles
}
func (p *EblExtra) SetEblNo(val string) {
	p.EblNo = val
}
func (p *EblExtra) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *EblExtra) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *EblExtra) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *EblExtra) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *EblExtra) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *EblExtra) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *EblExtra) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *EblExtra) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *EblExtra) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *EblExtra) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *EblExtra) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *EblExtra) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *EblExtra) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *EblExtra) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *EblExtra) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *EblExtra) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *EblExtra) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *EblExtra) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *EblExtra) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *EblExtra) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *EblExtra) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *EblExtra) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *EblExtra) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *EblExtra) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *EblExtra) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *EblExtra) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *EblExtra) SetNumOfEbl(val int64) {
	p.NumOfEbl = val
}
func (p *EblExtra) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *EblExtra) SetStatus(val string) {
	p.Status = val
}
func (p *EblExtra) SetFile(val string) {
	p.File = val
}
func (p *EblExtra) SetContractFiles(val []*Contract) {
	p.ContractFiles = val
}
func (p *EblExtra) SetInvoiceFiles(val []*Invoice) {
	p.InvoiceFiles = val
}
func (p *EblExtra) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *EblExtra) SetTransferCompanyName(val string) {
	p.TransferCompanyName = val
}
func (p *EblExtra) SetCompanyID(val string) {
	p.CompanyID = val
}
func (p *EblExtra) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *EblExtra) SetDocumentFiles(val []*Document) {
	p.DocumentFiles = val
}

var fieldIDToName_EblExtra = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "originCompanyName",
	4:  "shipperCompanyID",
	5:  "shipperCompanyName",
	6:  "consigneeCompanyID",
	7:  "consigneeCompanyName",
	8:  "notifyPartyCompanyID",
	9:  "notifyPartyCompanyName",
	10: "placeOfReceipt",
	11: "oceanVessel",
	12: "portOfLoading",
	13: "portOfDescharge",
	14: "placeOfDestination",
	15: "placeOfDelivery",
	16: "shippingMarkes",
	17: "quantityOfPackages",
	18: "kindOfPackagesGW",
	19: "kindOfPackagesM",
	20: "descriptionOfGoods",
	21: "grossWeight",
	22: "measurement",
	23: "freightAndCharges",
	24: "placeOfIssue",
	25: "dateOfIssue",
	26: "deliveryAgent",
	27: "shippedOnBoard",
	28: "numOfEbl",
	29: "dateOfIssueDeadline",
	30: "status",
	31: "file",
	32: "contractFiles",
	33: "invoiceFiles",
	34: "transferCompanyID",
	35: "transferCompanyName",
	36: "companyID",
	37: "companyName",
	38: "documentFiles",
}

func (p *EblExtra) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblNo bool = false
	var issetOriginCompanyID bool = false
	var issetOriginCompanyName bool = false
	var issetShipperCompanyID bool = false
	var issetShipperCompanyName bool = false
	var issetConsigneeCompanyID bool = false
	var issetConsigneeCompanyName bool = false
	var issetNotifyPartyCompanyID bool = false
	var issetNotifyPartyCompanyName bool = false
	var issetPlaceOfReceipt bool = false
	var issetOceanVessel bool = false
	var issetPortOfLoading bool = false
	var issetPortOfDescharge bool = false
	var issetPlaceOfDestination bool = false
	var issetPlaceOfDelivery bool = false
	var issetShippingMarkes bool = false
	var issetQuantityOfPackages bool = false
	var issetKindOfPackagesGW bool = false
	var issetKindOfPackagesM bool = false
	var issetDescriptionOfGoods bool = false
	var issetGrossWeight bool = false
	var issetMeasurement bool = false
	var issetFreightAndCharges bool = false
	var issetPlaceOfIssue bool = false
	var issetDateOfIssue bool = false
	var issetDeliveryAgent bool = false
	var issetShippedOnBoard bool = false
	var issetNumOfEbl bool = false
	var issetDateOfIssueDeadline bool = false
	var issetStatus bool = false
	var issetFile bool = false
	var issetContractFiles bool = false
	var issetInvoiceFiles bool = false
	var issetTransferCompanyID bool = false
	var issetTransferCompanyName bool = false
	var issetCompanyID bool = false
	var issetCompanyName bool = false
	var issetDocumentFiles bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfReceipt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetOceanVessel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfLoading = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfDescharge = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDestination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDelivery = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippingMarkes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetQuantityOfPackages = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesGW = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesM = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionOfGoods = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetGrossWeight = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetMeasurement = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreightAndCharges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeliveryAgent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippedOnBoard = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumOfEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssueDeadline = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
				issetFile = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
				issetContractFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
				issetInvoiceFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 38:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
				issetDocumentFiles = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyName {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyID {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyName {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyID {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfReceipt {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetOceanVessel {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetPortOfLoading {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetPortOfDescharge {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDestination {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDelivery {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetShippingMarkes {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetQuantityOfPackages {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesGW {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesM {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionOfGoods {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetGrossWeight {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetMeasurement {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetFreightAndCharges {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfIssue {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssue {
		fieldId = 25
		goto RequiredFieldNotSetError
	}

	if !issetDeliveryAgent {
		fieldId = 26
		goto RequiredFieldNotSetError
	}

	if !issetShippedOnBoard {
		fieldId = 27
		goto RequiredFieldNotSetError
	}

	if !issetNumOfEbl {
		fieldId = 28
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssueDeadline {
		fieldId = 29
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 30
		goto RequiredFieldNotSetError
	}

	if !issetFile {
		fieldId = 31
		goto RequiredFieldNotSetError
	}

	if !issetContractFiles {
		fieldId = 32
		goto RequiredFieldNotSetError
	}

	if !issetInvoiceFiles {
		fieldId = 33
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyID {
		fieldId = 34
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyName {
		fieldId = 35
		goto RequiredFieldNotSetError
	}

	if !issetCompanyID {
		fieldId = 36
		goto RequiredFieldNotSetError
	}

	if !issetCompanyName {
		fieldId = 37
		goto RequiredFieldNotSetError
	}

	if !issetDocumentFiles {
		fieldId = 38
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EblExtra[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EblExtra[fieldId]))
}

func (p *EblExtra) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *EblExtra) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyID = _field
	return nil
}
func (p *EblExtra) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyName = _field
	return nil
}
func (p *EblExtra) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyID = _field
	return nil
}
func (p *EblExtra) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyName = _field
	return nil
}
func (p *EblExtra) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyID = _field
	return nil
}
func (p *EblExtra) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyName = _field
	return nil
}
func (p *EblExtra) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyID = _field
	return nil
}
func (p *EblExtra) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyName = _field
	return nil
}
func (p *EblExtra) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfReceipt = _field
	return nil
}
func (p *EblExtra) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OceanVessel = _field
	return nil
}
func (p *EblExtra) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfLoading = _field
	return nil
}
func (p *EblExtra) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfDescharge = _field
	return nil
}
func (p *EblExtra) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDestination = _field
	return nil
}
func (p *EblExtra) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDelivery = _field
	return nil
}
func (p *EblExtra) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippingMarkes = _field
	return nil
}
func (p *EblExtra) ReadField17(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QuantityOfPackages = _field
	return nil
}
func (p *EblExtra) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesGW = _field
	return nil
}
func (p *EblExtra) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesM = _field
	return nil
}
func (p *EblExtra) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionOfGoods = _field
	return nil
}
func (p *EblExtra) ReadField21(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GrossWeight = _field
	return nil
}
func (p *EblExtra) ReadField22(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Measurement = _field
	return nil
}
func (p *EblExtra) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FreightAndCharges = _field
	return nil
}
func (p *EblExtra) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfIssue = _field
	return nil
}
func (p *EblExtra) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssue = _field
	return nil
}
func (p *EblExtra) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeliveryAgent = _field
	return nil
}
func (p *EblExtra) ReadField27(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippedOnBoard = _field
	return nil
}
func (p *EblExtra) ReadField28(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumOfEbl = _field
	return nil
}
func (p *EblExtra) ReadField29(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssueDeadline = _field
	return nil
}
func (p *EblExtra) ReadField30(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *EblExtra) ReadField31(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.File = _field
	return nil
}
func (p *EblExtra) ReadField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Contract, 0, size)
	values := make([]Contract, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ContractFiles = _field
	return nil
}
func (p *EblExtra) ReadField33(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Invoice, 0, size)
	values := make([]Invoice, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InvoiceFiles = _field
	return nil
}
func (p *EblExtra) ReadField34(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyID = _field
	return nil
}
func (p *EblExtra) ReadField35(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyName = _field
	return nil
}
func (p *EblExtra) ReadField36(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyID = _field
	return nil
}
func (p *EblExtra) ReadField37(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyName = _field
	return nil
}
func (p *EblExtra) ReadField38(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Document, 0, size)
	values := make([]Document, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DocumentFiles = _field
	return nil
}

func (p *EblExtra) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("EblExtra"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EblExtra) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EblExtra) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EblExtra) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EblExtra) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyID", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EblExtra) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *EblExtra) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyID", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EblExtra) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EblExtra) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyID", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EblExtra) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyName", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *EblExtra) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfReceipt", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfReceipt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *EblExtra) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("oceanVessel", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OceanVessel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *EblExtra) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfLoading", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfLoading); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *EblExtra) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfDescharge", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfDescharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *EblExtra) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDestination", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDestination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *EblExtra) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDelivery", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDelivery); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *EblExtra) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippingMarkes", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShippingMarkes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *EblExtra) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("quantityOfPackages", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.QuantityOfPackages); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *EblExtra) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesGW", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesGW); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *EblExtra) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesM", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesM); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *EblExtra) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("descriptionOfGoods", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionOfGoods); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *EblExtra) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grossWeight", thrift.DOUBLE, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.GrossWeight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *EblExtra) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("measurement", thrift.DOUBLE, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Measurement); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *EblExtra) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("freightAndCharges", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreightAndCharges); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *EblExtra) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfIssue", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *EblExtra) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssue", thrift.I64, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *EblExtra) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deliveryAgent", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DeliveryAgent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *EblExtra) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippedOnBoard", thrift.I64, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ShippedOnBoard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *EblExtra) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numOfEbl", thrift.I64, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NumOfEbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *EblExtra) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssueDeadline", thrift.I64, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssueDeadline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *EblExtra) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *EblExtra) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.File); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *EblExtra) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contractFiles", thrift.LIST, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContractFiles)); err != nil {
		return err
	}
	for _, v := range p.ContractFiles {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *EblExtra) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("invoiceFiles", thrift.LIST, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InvoiceFiles)); err != nil {
		return err
	}
	for _, v := range p.InvoiceFiles {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *EblExtra) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyID", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *EblExtra) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyName", thrift.STRING, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *EblExtra) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyID", thrift.STRING, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *EblExtra) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyName", thrift.STRING, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *EblExtra) writeField38(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("documentFiles", thrift.LIST, 38); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DocumentFiles)); err != nil {
		return err
	}
	for _, v := range p.DocumentFiles {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *EblExtra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EblExtra(%+v)", *p)

}

func (p *EblExtra) DeepEqual(ano *EblExtra) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.OriginCompanyID) {
		return false
	}
	if !p.Field3DeepEqual(ano.OriginCompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.ShipperCompanyID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ShipperCompanyName) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConsigneeCompanyID) {
		return false
	}
	if !p.Field7DeepEqual(ano.ConsigneeCompanyName) {
		return false
	}
	if !p.Field8DeepEqual(ano.NotifyPartyCompanyID) {
		return false
	}
	if !p.Field9DeepEqual(ano.NotifyPartyCompanyName) {
		return false
	}
	if !p.Field10DeepEqual(ano.PlaceOfReceipt) {
		return false
	}
	if !p.Field11DeepEqual(ano.OceanVessel) {
		return false
	}
	if !p.Field12DeepEqual(ano.PortOfLoading) {
		return false
	}
	if !p.Field13DeepEqual(ano.PortOfDescharge) {
		return false
	}
	if !p.Field14DeepEqual(ano.PlaceOfDestination) {
		return false
	}
	if !p.Field15DeepEqual(ano.PlaceOfDelivery) {
		return false
	}
	if !p.Field16DeepEqual(ano.ShippingMarkes) {
		return false
	}
	if !p.Field17DeepEqual(ano.QuantityOfPackages) {
		return false
	}
	if !p.Field18DeepEqual(ano.KindOfPackagesGW) {
		return false
	}
	if !p.Field19DeepEqual(ano.KindOfPackagesM) {
		return false
	}
	if !p.Field20DeepEqual(ano.DescriptionOfGoods) {
		return false
	}
	if !p.Field21DeepEqual(ano.GrossWeight) {
		return false
	}
	if !p.Field22DeepEqual(ano.Measurement) {
		return false
	}
	if !p.Field23DeepEqual(ano.FreightAndCharges) {
		return false
	}
	if !p.Field24DeepEqual(ano.PlaceOfIssue) {
		return false
	}
	if !p.Field25DeepEqual(ano.DateOfIssue) {
		return false
	}
	if !p.Field26DeepEqual(ano.DeliveryAgent) {
		return false
	}
	if !p.Field27DeepEqual(ano.ShippedOnBoard) {
		return false
	}
	if !p.Field28DeepEqual(ano.NumOfEbl) {
		return false
	}
	if !p.Field29DeepEqual(ano.DateOfIssueDeadline) {
		return false
	}
	if !p.Field30DeepEqual(ano.Status) {
		return false
	}
	if !p.Field31DeepEqual(ano.File) {
		return false
	}
	if !p.Field32DeepEqual(ano.ContractFiles) {
		return false
	}
	if !p.Field33DeepEqual(ano.InvoiceFiles) {
		return false
	}
	if !p.Field34DeepEqual(ano.TransferCompanyID) {
		return false
	}
	if !p.Field35DeepEqual(ano.TransferCompanyName) {
		return false
	}
	if !p.Field36DeepEqual(ano.CompanyID) {
		return false
	}
	if !p.Field37DeepEqual(ano.CompanyName) {
		return false
	}
	if !p.Field38DeepEqual(ano.DocumentFiles) {
		return false
	}
	return true
}

func (p *EblExtra) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field3DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field8DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field9DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfReceipt, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field11DeepEqual(src string) bool {

	if strings.Compare(p.OceanVessel, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field12DeepEqual(src string) bool {

	if strings.Compare(p.PortOfLoading, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field13DeepEqual(src string) bool {

	if strings.Compare(p.PortOfDescharge, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field14DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDestination, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field15DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDelivery, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ShippingMarkes, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field17DeepEqual(src float64) bool {

	if p.QuantityOfPackages != src {
		return false
	}
	return true
}
func (p *EblExtra) Field18DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesGW, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field19DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesM, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field20DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionOfGoods, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field21DeepEqual(src float64) bool {

	if p.GrossWeight != src {
		return false
	}
	return true
}
func (p *EblExtra) Field22DeepEqual(src float64) bool {

	if p.Measurement != src {
		return false
	}
	return true
}
func (p *EblExtra) Field23DeepEqual(src string) bool {

	if strings.Compare(p.FreightAndCharges, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field24DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfIssue, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field25DeepEqual(src int64) bool {

	if p.DateOfIssue != src {
		return false
	}
	return true
}
func (p *EblExtra) Field26DeepEqual(src string) bool {

	if strings.Compare(p.DeliveryAgent, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field27DeepEqual(src int64) bool {

	if p.ShippedOnBoard != src {
		return false
	}
	return true
}
func (p *EblExtra) Field28DeepEqual(src int64) bool {

	if p.NumOfEbl != src {
		return false
	}
	return true
}
func (p *EblExtra) Field29DeepEqual(src int64) bool {

	if p.DateOfIssueDeadline != src {
		return false
	}
	return true
}
func (p *EblExtra) Field30DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field31DeepEqual(src string) bool {

	if strings.Compare(p.File, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field32DeepEqual(src []*Contract) bool {

	if len(p.ContractFiles) != len(src) {
		return false
	}
	for i, v := range p.ContractFiles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EblExtra) Field33DeepEqual(src []*Invoice) bool {

	if len(p.InvoiceFiles) != len(src) {
		return false
	}
	for i, v := range p.InvoiceFiles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EblExtra) Field34DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field35DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field36DeepEqual(src string) bool {

	if strings.Compare(p.CompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field37DeepEqual(src string) bool {

	if strings.Compare(p.CompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *EblExtra) Field38DeepEqual(src []*Document) bool {

	if len(p.DocumentFiles) != len(src) {
		return false
	}
	for i, v := range p.DocumentFiles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type EblFilter struct {
	EblNo                string  `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID      string  `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	ShipperCompanyID     string  `thrift:"shipperCompanyID,3,required" frugal:"3,required,string" json:"shipperCompanyID"`
	ConsigneeCompanyID   string  `thrift:"consigneeCompanyID,4,required" frugal:"4,required,string" json:"consigneeCompanyID"`
	NotifyPartyCompanyID string  `thrift:"notifyPartyCompanyID,5,required" frugal:"5,required,string" json:"notifyPartyCompanyID"`
	PlaceOfReceipt       string  `thrift:"placeOfReceipt,6,required" frugal:"6,required,string" json:"placeOfReceipt"`
	OceanVessel          string  `thrift:"oceanVessel,7,required" frugal:"7,required,string" json:"oceanVessel"`
	PortOfLoading        string  `thrift:"portOfLoading,8,required" frugal:"8,required,string" json:"portOfLoading"`
	PortOfDescharge      string  `thrift:"portOfDescharge,9,required" frugal:"9,required,string" json:"portOfDescharge"`
	PlaceOfDestination   string  `thrift:"placeOfDestination,10,required" frugal:"10,required,string" json:"placeOfDestination"`
	PlaceOfDelivery      string  `thrift:"placeOfDelivery,11,required" frugal:"11,required,string" json:"placeOfDelivery"`
	ShippingMarkes       string  `thrift:"shippingMarkes,12,required" frugal:"12,required,string" json:"shippingMarkes"`
	QuantityOfPackages   float64 `thrift:"quantityOfPackages,13,required" frugal:"13,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW     string  `thrift:"kindOfPackagesGW,14,required" frugal:"14,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM      string  `thrift:"kindOfPackagesM,15,required" frugal:"15,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods   string  `thrift:"descriptionOfGoods,16,required" frugal:"16,required,string" json:"descriptionOfGoods"`
	GrossWeight          float64 `thrift:"grossWeight,17,required" frugal:"17,required,double" json:"grossWeight"`
	Measurement          float64 `thrift:"measurement,18,required" frugal:"18,required,double" json:"measurement"`
	FreightAndCharges    string  `thrift:"freightAndCharges,19,required" frugal:"19,required,string" json:"freightAndCharges"`
	PlaceOfIssue         string  `thrift:"placeOfIssue,20,required" frugal:"20,required,string" json:"placeOfIssue"`
	DateOfIssue          int64   `thrift:"dateOfIssue,21,required" frugal:"21,required,i64" json:"dateOfIssue"`
	DeliveryAgent        string  `thrift:"deliveryAgent,22,required" frugal:"22,required,string" json:"deliveryAgent"`
	ShippedOnBoard       int64   `thrift:"shippedOnBoard,23,required" frugal:"23,required,i64" json:"shippedOnBoard"`
	NumOfEbl             int64   `thrift:"numOfEbl,24,required" frugal:"24,required,i64" json:"numOfEbl"`
	DateOfIssueDeadline  int64   `thrift:"dateOfIssueDeadline,25,required" frugal:"25,required,i64" json:"dateOfIssueDeadline"`
	Status               string  `thrift:"status,26,required" frugal:"26,required,string" json:"status"`
	TransferCompanyID    string  `thrift:"transferCompanyID,27,required" frugal:"27,required,string" json:"transferCompanyID"`
	CompanyID            string  `thrift:"companyID,28,required" frugal:"28,required,string" json:"companyID"`
}

func NewEblFilter() *EblFilter {
	return &EblFilter{}
}

func (p *EblFilter) InitDefault() {
}

func (p *EblFilter) GetEblNo() (v string) {
	return p.EblNo
}

func (p *EblFilter) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *EblFilter) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *EblFilter) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *EblFilter) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *EblFilter) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *EblFilter) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *EblFilter) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *EblFilter) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *EblFilter) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *EblFilter) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *EblFilter) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *EblFilter) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *EblFilter) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *EblFilter) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *EblFilter) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *EblFilter) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *EblFilter) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *EblFilter) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *EblFilter) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *EblFilter) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *EblFilter) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *EblFilter) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *EblFilter) GetNumOfEbl() (v int64) {
	return p.NumOfEbl
}

func (p *EblFilter) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *EblFilter) GetStatus() (v string) {
	return p.Status
}

func (p *EblFilter) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *EblFilter) GetCompanyID() (v string) {
	return p.CompanyID
}
func (p *EblFilter) SetEblNo(val string) {
	p.EblNo = val
}
func (p *EblFilter) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *EblFilter) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *EblFilter) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *EblFilter) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *EblFilter) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *EblFilter) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *EblFilter) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *EblFilter) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *EblFilter) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *EblFilter) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *EblFilter) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *EblFilter) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *EblFilter) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *EblFilter) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *EblFilter) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *EblFilter) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *EblFilter) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *EblFilter) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *EblFilter) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *EblFilter) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *EblFilter) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *EblFilter) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *EblFilter) SetNumOfEbl(val int64) {
	p.NumOfEbl = val
}
func (p *EblFilter) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *EblFilter) SetStatus(val string) {
	p.Status = val
}
func (p *EblFilter) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *EblFilter) SetCompanyID(val string) {
	p.CompanyID = val
}

var fieldIDToName_EblFilter = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "shipperCompanyID",
	4:  "consigneeCompanyID",
	5:  "notifyPartyCompanyID",
	6:  "placeOfReceipt",
	7:  "oceanVessel",
	8:  "portOfLoading",
	9:  "portOfDescharge",
	10: "placeOfDestination",
	11: "placeOfDelivery",
	12: "shippingMarkes",
	13: "quantityOfPackages",
	14: "kindOfPackagesGW",
	15: "kindOfPackagesM",
	16: "descriptionOfGoods",
	17: "grossWeight",
	18: "measurement",
	19: "freightAndCharges",
	20: "placeOfIssue",
	21: "dateOfIssue",
	22: "deliveryAgent",
	23: "shippedOnBoard",
	24: "numOfEbl",
	25: "dateOfIssueDeadline",
	26: "status",
	27: "transferCompanyID",
	28: "companyID",
}

func (p *EblFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblNo bool = false
	var issetOriginCompanyID bool = false
	var issetShipperCompanyID bool = false
	var issetConsigneeCompanyID bool = false
	var issetNotifyPartyCompanyID bool = false
	var issetPlaceOfReceipt bool = false
	var issetOceanVessel bool = false
	var issetPortOfLoading bool = false
	var issetPortOfDescharge bool = false
	var issetPlaceOfDestination bool = false
	var issetPlaceOfDelivery bool = false
	var issetShippingMarkes bool = false
	var issetQuantityOfPackages bool = false
	var issetKindOfPackagesGW bool = false
	var issetKindOfPackagesM bool = false
	var issetDescriptionOfGoods bool = false
	var issetGrossWeight bool = false
	var issetMeasurement bool = false
	var issetFreightAndCharges bool = false
	var issetPlaceOfIssue bool = false
	var issetDateOfIssue bool = false
	var issetDeliveryAgent bool = false
	var issetShippedOnBoard bool = false
	var issetNumOfEbl bool = false
	var issetDateOfIssueDeadline bool = false
	var issetStatus bool = false
	var issetTransferCompanyID bool = false
	var issetCompanyID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfReceipt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetOceanVessel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfLoading = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfDescharge = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDestination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDelivery = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippingMarkes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetQuantityOfPackages = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesGW = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesM = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionOfGoods = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetGrossWeight = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetMeasurement = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreightAndCharges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeliveryAgent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippedOnBoard = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumOfEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssueDeadline = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransferCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompanyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyID {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfReceipt {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetOceanVessel {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetPortOfLoading {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetPortOfDescharge {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDestination {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDelivery {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetShippingMarkes {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetQuantityOfPackages {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesGW {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesM {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionOfGoods {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetGrossWeight {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetMeasurement {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetFreightAndCharges {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfIssue {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssue {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetDeliveryAgent {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetShippedOnBoard {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetNumOfEbl {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssueDeadline {
		fieldId = 25
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 26
		goto RequiredFieldNotSetError
	}

	if !issetTransferCompanyID {
		fieldId = 27
		goto RequiredFieldNotSetError
	}

	if !issetCompanyID {
		fieldId = 28
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EblFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EblFilter[fieldId]))
}

func (p *EblFilter) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *EblFilter) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyID = _field
	return nil
}
func (p *EblFilter) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyID = _field
	return nil
}
func (p *EblFilter) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyID = _field
	return nil
}
func (p *EblFilter) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyID = _field
	return nil
}
func (p *EblFilter) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfReceipt = _field
	return nil
}
func (p *EblFilter) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OceanVessel = _field
	return nil
}
func (p *EblFilter) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfLoading = _field
	return nil
}
func (p *EblFilter) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfDescharge = _field
	return nil
}
func (p *EblFilter) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDestination = _field
	return nil
}
func (p *EblFilter) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDelivery = _field
	return nil
}
func (p *EblFilter) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippingMarkes = _field
	return nil
}
func (p *EblFilter) ReadField13(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QuantityOfPackages = _field
	return nil
}
func (p *EblFilter) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesGW = _field
	return nil
}
func (p *EblFilter) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesM = _field
	return nil
}
func (p *EblFilter) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionOfGoods = _field
	return nil
}
func (p *EblFilter) ReadField17(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GrossWeight = _field
	return nil
}
func (p *EblFilter) ReadField18(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Measurement = _field
	return nil
}
func (p *EblFilter) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FreightAndCharges = _field
	return nil
}
func (p *EblFilter) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfIssue = _field
	return nil
}
func (p *EblFilter) ReadField21(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssue = _field
	return nil
}
func (p *EblFilter) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeliveryAgent = _field
	return nil
}
func (p *EblFilter) ReadField23(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippedOnBoard = _field
	return nil
}
func (p *EblFilter) ReadField24(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumOfEbl = _field
	return nil
}
func (p *EblFilter) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssueDeadline = _field
	return nil
}
func (p *EblFilter) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *EblFilter) ReadField27(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransferCompanyID = _field
	return nil
}
func (p *EblFilter) ReadField28(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompanyID = _field
	return nil
}

func (p *EblFilter) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("EblFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EblFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EblFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EblFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyID", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EblFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyID", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EblFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyID", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *EblFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfReceipt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfReceipt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EblFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("oceanVessel", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OceanVessel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EblFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfLoading", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfLoading); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EblFilter) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfDescharge", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfDescharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *EblFilter) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDestination", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDestination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *EblFilter) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDelivery", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDelivery); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *EblFilter) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippingMarkes", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShippingMarkes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *EblFilter) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("quantityOfPackages", thrift.DOUBLE, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.QuantityOfPackages); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *EblFilter) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesGW", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesGW); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *EblFilter) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesM", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesM); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *EblFilter) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("descriptionOfGoods", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionOfGoods); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *EblFilter) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grossWeight", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.GrossWeight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *EblFilter) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("measurement", thrift.DOUBLE, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Measurement); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *EblFilter) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("freightAndCharges", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreightAndCharges); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *EblFilter) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfIssue", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *EblFilter) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssue", thrift.I64, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *EblFilter) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deliveryAgent", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DeliveryAgent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *EblFilter) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippedOnBoard", thrift.I64, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ShippedOnBoard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *EblFilter) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numOfEbl", thrift.I64, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NumOfEbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *EblFilter) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssueDeadline", thrift.I64, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DateOfIssueDeadline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *EblFilter) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *EblFilter) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferCompanyID", thrift.STRING, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferCompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *EblFilter) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("companyID", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompanyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *EblFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EblFilter(%+v)", *p)

}

func (p *EblFilter) DeepEqual(ano *EblFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.OriginCompanyID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ShipperCompanyID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ConsigneeCompanyID) {
		return false
	}
	if !p.Field5DeepEqual(ano.NotifyPartyCompanyID) {
		return false
	}
	if !p.Field6DeepEqual(ano.PlaceOfReceipt) {
		return false
	}
	if !p.Field7DeepEqual(ano.OceanVessel) {
		return false
	}
	if !p.Field8DeepEqual(ano.PortOfLoading) {
		return false
	}
	if !p.Field9DeepEqual(ano.PortOfDescharge) {
		return false
	}
	if !p.Field10DeepEqual(ano.PlaceOfDestination) {
		return false
	}
	if !p.Field11DeepEqual(ano.PlaceOfDelivery) {
		return false
	}
	if !p.Field12DeepEqual(ano.ShippingMarkes) {
		return false
	}
	if !p.Field13DeepEqual(ano.QuantityOfPackages) {
		return false
	}
	if !p.Field14DeepEqual(ano.KindOfPackagesGW) {
		return false
	}
	if !p.Field15DeepEqual(ano.KindOfPackagesM) {
		return false
	}
	if !p.Field16DeepEqual(ano.DescriptionOfGoods) {
		return false
	}
	if !p.Field17DeepEqual(ano.GrossWeight) {
		return false
	}
	if !p.Field18DeepEqual(ano.Measurement) {
		return false
	}
	if !p.Field19DeepEqual(ano.FreightAndCharges) {
		return false
	}
	if !p.Field20DeepEqual(ano.PlaceOfIssue) {
		return false
	}
	if !p.Field21DeepEqual(ano.DateOfIssue) {
		return false
	}
	if !p.Field22DeepEqual(ano.DeliveryAgent) {
		return false
	}
	if !p.Field23DeepEqual(ano.ShippedOnBoard) {
		return false
	}
	if !p.Field24DeepEqual(ano.NumOfEbl) {
		return false
	}
	if !p.Field25DeepEqual(ano.DateOfIssueDeadline) {
		return false
	}
	if !p.Field26DeepEqual(ano.Status) {
		return false
	}
	if !p.Field27DeepEqual(ano.TransferCompanyID) {
		return false
	}
	if !p.Field28DeepEqual(ano.CompanyID) {
		return false
	}
	return true
}

func (p *EblFilter) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field5DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field6DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfReceipt, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field7DeepEqual(src string) bool {

	if strings.Compare(p.OceanVessel, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PortOfLoading, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field9DeepEqual(src string) bool {

	if strings.Compare(p.PortOfDescharge, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDestination, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field11DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDelivery, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field12DeepEqual(src string) bool {

	if strings.Compare(p.ShippingMarkes, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field13DeepEqual(src float64) bool {

	if p.QuantityOfPackages != src {
		return false
	}
	return true
}
func (p *EblFilter) Field14DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesGW, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field15DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesM, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field16DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionOfGoods, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field17DeepEqual(src float64) bool {

	if p.GrossWeight != src {
		return false
	}
	return true
}
func (p *EblFilter) Field18DeepEqual(src float64) bool {

	if p.Measurement != src {
		return false
	}
	return true
}
func (p *EblFilter) Field19DeepEqual(src string) bool {

	if strings.Compare(p.FreightAndCharges, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field20DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfIssue, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field21DeepEqual(src int64) bool {

	if p.DateOfIssue != src {
		return false
	}
	return true
}
func (p *EblFilter) Field22DeepEqual(src string) bool {

	if strings.Compare(p.DeliveryAgent, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field23DeepEqual(src int64) bool {

	if p.ShippedOnBoard != src {
		return false
	}
	return true
}
func (p *EblFilter) Field24DeepEqual(src int64) bool {

	if p.NumOfEbl != src {
		return false
	}
	return true
}
func (p *EblFilter) Field25DeepEqual(src int64) bool {

	if p.DateOfIssueDeadline != src {
		return false
	}
	return true
}
func (p *EblFilter) Field26DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field27DeepEqual(src string) bool {

	if strings.Compare(p.TransferCompanyID, src) != 0 {
		return false
	}
	return true
}
func (p *EblFilter) Field28DeepEqual(src string) bool {

	if strings.Compare(p.CompanyID, src) != 0 {
		return false
	}
	return true
}

type FabricEbl interface {
	CreateCompany(ctx context.Context, req *CreateCompanyReq) (r *CreateCompanyResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	GetUserInfo(ctx context.Context, req *GetUserInfoReq) (r *GetUserInfoResp, err error)

	GetCompanyAllList(ctx context.Context, req *GetCompanyAllListReq) (r *GetCompanyAllListResp, err error)

	CreateEbl(ctx context.Context, req *CreateEblReq) (r *CreateEblResp, err error)

	QueryAllEblList(ctx context.Context, req *QueryAllEblListReq) (r *QueryAllEblListResp, err error)

	QueryEblList(ctx context.Context, req *QueryEblListReq) (r *QueryEblListResp, err error)

	OperateEbl(ctx context.Context, req *OperateEblReq) (r *OperateEblResp, err error)

	UploadSeal(ctx context.Context, req *UploadSealReq) (r *UploadSealResp, err error)

	CheckToken(ctx context.Context, req *CheckTokenReq) (r *CheckTokenResp, err error)

	CreateInvoice(ctx context.Context, req *CreateInvoiceReq) (r *CreateInvoiceResp, err error)

	CreateContract(ctx context.Context, req *CreateContractReq) (r *CreateContractResp, err error)

	CreateDocument(ctx context.Context, req *CreateDocumentReq) (r *CreateDocumentResp, err error)

	QueryInvoiceList(ctx context.Context, req *QueryInvoiceListReq) (r *QueryInvoiceListResp, err error)

	QueryContractList(ctx context.Context, req *QueryContractListReq) (r *QueryContractListResp, err error)

	QueryDocumentList(ctx context.Context, req *QueryDocumentListReq) (r *QueryDocumentListResp, err error)

	GetInvoice(ctx context.Context, req *GetInvoiceReq) (r *GetInvoiceResp, err error)

	GetContract(ctx context.Context, req *GetContractReq) (r *GetContractResp, err error)

	GetDocument(ctx context.Context, req *GetDocumentReq) (r *GetDocumentResp, err error)

	QuerySeal(ctx context.Context, req *QuerySealReq) (r *QuerySealResp, err error)

	DeleteSeal(ctx context.Context, req *DeleteSealReq) (r *DeleteSealResp, err error)
}

type FabricEblCreateCompanyArgs struct {
	Req *CreateCompanyReq `thrift:"req,1" frugal:"1,default,CreateCompanyReq" json:"req"`
}

func NewFabricEblCreateCompanyArgs() *FabricEblCreateCompanyArgs {
	return &FabricEblCreateCompanyArgs{}
}

func (p *FabricEblCreateCompanyArgs) InitDefault() {
}

var FabricEblCreateCompanyArgs_Req_DEFAULT *CreateCompanyReq

func (p *FabricEblCreateCompanyArgs) GetReq() (v *CreateCompanyReq) {
	if !p.IsSetReq() {
		return FabricEblCreateCompanyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateCompanyArgs) SetReq(val *CreateCompanyReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateCompanyArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateCompanyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateCompanyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateCompanyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateCompanyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateCompanyArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompany_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateCompanyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyArgs(%+v)", *p)

}

func (p *FabricEblCreateCompanyArgs) DeepEqual(ano *FabricEblCreateCompanyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateCompanyArgs) Field1DeepEqual(src *CreateCompanyReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateCompanyResult struct {
	Success *CreateCompanyResp `thrift:"success,0,optional" frugal:"0,optional,CreateCompanyResp" json:"success,omitempty"`
}

func NewFabricEblCreateCompanyResult() *FabricEblCreateCompanyResult {
	return &FabricEblCreateCompanyResult{}
}

func (p *FabricEblCreateCompanyResult) InitDefault() {
}

var FabricEblCreateCompanyResult_Success_DEFAULT *CreateCompanyResp

func (p *FabricEblCreateCompanyResult) GetSuccess() (v *CreateCompanyResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateCompanyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateCompanyResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCompanyResp)
}

var fieldIDToName_FabricEblCreateCompanyResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateCompanyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateCompanyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateCompanyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateCompanyResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateCompanyResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCompany_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateCompanyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateCompanyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyResult(%+v)", *p)

}

func (p *FabricEblCreateCompanyResult) DeepEqual(ano *FabricEblCreateCompanyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateCompanyResult) Field0DeepEqual(src *CreateCompanyResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewFabricEblLoginArgs() *FabricEblLoginArgs {
	return &FabricEblLoginArgs{}
}

func (p *FabricEblLoginArgs) InitDefault() {
}

var FabricEblLoginArgs_Req_DEFAULT *LoginReq

func (p *FabricEblLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return FabricEblLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

var fieldIDToName_FabricEblLoginArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLoginReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblLoginArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Login_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblLoginArgs(%+v)", *p)

}

func (p *FabricEblLoginArgs) DeepEqual(ano *FabricEblLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblLoginArgs) Field1DeepEqual(src *LoginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewFabricEblLoginResult() *FabricEblLoginResult {
	return &FabricEblLoginResult{}
}

func (p *FabricEblLoginResult) InitDefault() {
}

var FabricEblLoginResult_Success_DEFAULT *LoginResp

func (p *FabricEblLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return FabricEblLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

var fieldIDToName_FabricEblLoginResult = map[int16]string{
	0: "success",
}

func (p *FabricEblLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLoginResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblLoginResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Login_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblLoginResult(%+v)", *p)

}

func (p *FabricEblLoginResult) DeepEqual(ano *FabricEblLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblLoginResult) Field0DeepEqual(src *LoginResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetUserInfoArgs struct {
	Req *GetUserInfoReq `thrift:"req,1" frugal:"1,default,GetUserInfoReq" json:"req"`
}

func NewFabricEblGetUserInfoArgs() *FabricEblGetUserInfoArgs {
	return &FabricEblGetUserInfoArgs{}
}

func (p *FabricEblGetUserInfoArgs) InitDefault() {
}

var FabricEblGetUserInfoArgs_Req_DEFAULT *GetUserInfoReq

func (p *FabricEblGetUserInfoArgs) GetReq() (v *GetUserInfoReq) {
	if !p.IsSetReq() {
		return FabricEblGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetUserInfoArgs) SetReq(val *GetUserInfoReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetUserInfoArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetUserInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetUserInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetUserInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetUserInfoArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetUserInfoArgs(%+v)", *p)

}

func (p *FabricEblGetUserInfoArgs) DeepEqual(ano *FabricEblGetUserInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetUserInfoArgs) Field1DeepEqual(src *GetUserInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetUserInfoResult struct {
	Success *GetUserInfoResp `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResp" json:"success,omitempty"`
}

func NewFabricEblGetUserInfoResult() *FabricEblGetUserInfoResult {
	return &FabricEblGetUserInfoResult{}
}

func (p *FabricEblGetUserInfoResult) InitDefault() {
}

var FabricEblGetUserInfoResult_Success_DEFAULT *GetUserInfoResp

func (p *FabricEblGetUserInfoResult) GetSuccess() (v *GetUserInfoResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResp)
}

var fieldIDToName_FabricEblGetUserInfoResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetUserInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetUserInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetUserInfoResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetUserInfoResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetUserInfoResult(%+v)", *p)

}

func (p *FabricEblGetUserInfoResult) DeepEqual(ano *FabricEblGetUserInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetUserInfoResult) Field0DeepEqual(src *GetUserInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetCompanyAllListArgs struct {
	Req *GetCompanyAllListReq `thrift:"req,1" frugal:"1,default,GetCompanyAllListReq" json:"req"`
}

func NewFabricEblGetCompanyAllListArgs() *FabricEblGetCompanyAllListArgs {
	return &FabricEblGetCompanyAllListArgs{}
}

func (p *FabricEblGetCompanyAllListArgs) InitDefault() {
}

var FabricEblGetCompanyAllListArgs_Req_DEFAULT *GetCompanyAllListReq

func (p *FabricEblGetCompanyAllListArgs) GetReq() (v *GetCompanyAllListReq) {
	if !p.IsSetReq() {
		return FabricEblGetCompanyAllListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetCompanyAllListArgs) SetReq(val *GetCompanyAllListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetCompanyAllListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetCompanyAllListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetCompanyAllListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetCompanyAllListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetCompanyAllListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetCompanyAllListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCompanyAllList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetCompanyAllListArgs(%+v)", *p)

}

func (p *FabricEblGetCompanyAllListArgs) DeepEqual(ano *FabricEblGetCompanyAllListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetCompanyAllListArgs) Field1DeepEqual(src *GetCompanyAllListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetCompanyAllListResult struct {
	Success *GetCompanyAllListResp `thrift:"success,0,optional" frugal:"0,optional,GetCompanyAllListResp" json:"success,omitempty"`
}

func NewFabricEblGetCompanyAllListResult() *FabricEblGetCompanyAllListResult {
	return &FabricEblGetCompanyAllListResult{}
}

func (p *FabricEblGetCompanyAllListResult) InitDefault() {
}

var FabricEblGetCompanyAllListResult_Success_DEFAULT *GetCompanyAllListResp

func (p *FabricEblGetCompanyAllListResult) GetSuccess() (v *GetCompanyAllListResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetCompanyAllListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetCompanyAllListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCompanyAllListResp)
}

var fieldIDToName_FabricEblGetCompanyAllListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetCompanyAllListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetCompanyAllListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetCompanyAllListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetCompanyAllListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetCompanyAllListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetCompanyAllList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetCompanyAllListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetCompanyAllListResult(%+v)", *p)

}

func (p *FabricEblGetCompanyAllListResult) DeepEqual(ano *FabricEblGetCompanyAllListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetCompanyAllListResult) Field0DeepEqual(src *GetCompanyAllListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateEblArgs struct {
	Req *CreateEblReq `thrift:"req,1" frugal:"1,default,CreateEblReq" json:"req"`
}

func NewFabricEblCreateEblArgs() *FabricEblCreateEblArgs {
	return &FabricEblCreateEblArgs{}
}

func (p *FabricEblCreateEblArgs) InitDefault() {
}

var FabricEblCreateEblArgs_Req_DEFAULT *CreateEblReq

func (p *FabricEblCreateEblArgs) GetReq() (v *CreateEblReq) {
	if !p.IsSetReq() {
		return FabricEblCreateEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateEblArgs) SetReq(val *CreateEblReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateEblArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateEblArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateEblArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateEblArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEblReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateEblArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEbl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateEblArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateEblArgs(%+v)", *p)

}

func (p *FabricEblCreateEblArgs) DeepEqual(ano *FabricEblCreateEblArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateEblArgs) Field1DeepEqual(src *CreateEblReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateEblResult struct {
	Success *CreateEblResp `thrift:"success,0,optional" frugal:"0,optional,CreateEblResp" json:"success,omitempty"`
}

func NewFabricEblCreateEblResult() *FabricEblCreateEblResult {
	return &FabricEblCreateEblResult{}
}

func (p *FabricEblCreateEblResult) InitDefault() {
}

var FabricEblCreateEblResult_Success_DEFAULT *CreateEblResp

func (p *FabricEblCreateEblResult) GetSuccess() (v *CreateEblResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEblResp)
}

var fieldIDToName_FabricEblCreateEblResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateEblResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateEblResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateEblResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEblResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateEblResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEbl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateEblResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateEblResult(%+v)", *p)

}

func (p *FabricEblCreateEblResult) DeepEqual(ano *FabricEblCreateEblResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateEblResult) Field0DeepEqual(src *CreateEblResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryAllEblListArgs struct {
	Req *QueryAllEblListReq `thrift:"req,1" frugal:"1,default,QueryAllEblListReq" json:"req"`
}

func NewFabricEblQueryAllEblListArgs() *FabricEblQueryAllEblListArgs {
	return &FabricEblQueryAllEblListArgs{}
}

func (p *FabricEblQueryAllEblListArgs) InitDefault() {
}

var FabricEblQueryAllEblListArgs_Req_DEFAULT *QueryAllEblListReq

func (p *FabricEblQueryAllEblListArgs) GetReq() (v *QueryAllEblListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryAllEblListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryAllEblListArgs) SetReq(val *QueryAllEblListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryAllEblListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryAllEblListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryAllEblListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryAllEblListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryAllEblListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryAllEblListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryAllEblListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryAllEblListArgs(%+v)", *p)

}

func (p *FabricEblQueryAllEblListArgs) DeepEqual(ano *FabricEblQueryAllEblListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryAllEblListArgs) Field1DeepEqual(src *QueryAllEblListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryAllEblListResult struct {
	Success *QueryAllEblListResp `thrift:"success,0,optional" frugal:"0,optional,QueryAllEblListResp" json:"success,omitempty"`
}

func NewFabricEblQueryAllEblListResult() *FabricEblQueryAllEblListResult {
	return &FabricEblQueryAllEblListResult{}
}

func (p *FabricEblQueryAllEblListResult) InitDefault() {
}

var FabricEblQueryAllEblListResult_Success_DEFAULT *QueryAllEblListResp

func (p *FabricEblQueryAllEblListResult) GetSuccess() (v *QueryAllEblListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryAllEblListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryAllEblListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryAllEblListResp)
}

var fieldIDToName_FabricEblQueryAllEblListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryAllEblListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryAllEblListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryAllEblListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryAllEblListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryAllEblListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAllEblList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryAllEblListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryAllEblListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryAllEblListResult(%+v)", *p)

}

func (p *FabricEblQueryAllEblListResult) DeepEqual(ano *FabricEblQueryAllEblListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryAllEblListResult) Field0DeepEqual(src *QueryAllEblListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryEblListArgs struct {
	Req *QueryEblListReq `thrift:"req,1" frugal:"1,default,QueryEblListReq" json:"req"`
}

func NewFabricEblQueryEblListArgs() *FabricEblQueryEblListArgs {
	return &FabricEblQueryEblListArgs{}
}

func (p *FabricEblQueryEblListArgs) InitDefault() {
}

var FabricEblQueryEblListArgs_Req_DEFAULT *QueryEblListReq

func (p *FabricEblQueryEblListArgs) GetReq() (v *QueryEblListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryEblListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryEblListArgs) SetReq(val *QueryEblListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryEblListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryEblListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryEblListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryEblListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryEblListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryEblListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryEblListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryEblListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryEblListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblListArgs(%+v)", *p)

}

func (p *FabricEblQueryEblListArgs) DeepEqual(ano *FabricEblQueryEblListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryEblListArgs) Field1DeepEqual(src *QueryEblListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryEblListResult struct {
	Success *QueryEblListResp `thrift:"success,0,optional" frugal:"0,optional,QueryEblListResp" json:"success,omitempty"`
}

func NewFabricEblQueryEblListResult() *FabricEblQueryEblListResult {
	return &FabricEblQueryEblListResult{}
}

func (p *FabricEblQueryEblListResult) InitDefault() {
}

var FabricEblQueryEblListResult_Success_DEFAULT *QueryEblListResp

func (p *FabricEblQueryEblListResult) GetSuccess() (v *QueryEblListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryEblListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryEblListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryEblListResp)
}

var fieldIDToName_FabricEblQueryEblListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryEblListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryEblListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryEblListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryEblListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryEblListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryEblListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryEblList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryEblListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryEblListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblListResult(%+v)", *p)

}

func (p *FabricEblQueryEblListResult) DeepEqual(ano *FabricEblQueryEblListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryEblListResult) Field0DeepEqual(src *QueryEblListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblOperateEblArgs struct {
	Req *OperateEblReq `thrift:"req,1" frugal:"1,default,OperateEblReq" json:"req"`
}

func NewFabricEblOperateEblArgs() *FabricEblOperateEblArgs {
	return &FabricEblOperateEblArgs{}
}

func (p *FabricEblOperateEblArgs) InitDefault() {
}

var FabricEblOperateEblArgs_Req_DEFAULT *OperateEblReq

func (p *FabricEblOperateEblArgs) GetReq() (v *OperateEblReq) {
	if !p.IsSetReq() {
		return FabricEblOperateEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblOperateEblArgs) SetReq(val *OperateEblReq) {
	p.Req = val
}

var fieldIDToName_FabricEblOperateEblArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblOperateEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblOperateEblArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblOperateEblArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblOperateEblArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewOperateEblReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblOperateEblArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEbl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblOperateEblArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblOperateEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblOperateEblArgs(%+v)", *p)

}

func (p *FabricEblOperateEblArgs) DeepEqual(ano *FabricEblOperateEblArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblOperateEblArgs) Field1DeepEqual(src *OperateEblReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblOperateEblResult struct {
	Success *OperateEblResp `thrift:"success,0,optional" frugal:"0,optional,OperateEblResp" json:"success,omitempty"`
}

func NewFabricEblOperateEblResult() *FabricEblOperateEblResult {
	return &FabricEblOperateEblResult{}
}

func (p *FabricEblOperateEblResult) InitDefault() {
}

var FabricEblOperateEblResult_Success_DEFAULT *OperateEblResp

func (p *FabricEblOperateEblResult) GetSuccess() (v *OperateEblResp) {
	if !p.IsSetSuccess() {
		return FabricEblOperateEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblOperateEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*OperateEblResp)
}

var fieldIDToName_FabricEblOperateEblResult = map[int16]string{
	0: "success",
}

func (p *FabricEblOperateEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblOperateEblResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblOperateEblResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblOperateEblResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewOperateEblResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblOperateEblResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("OperateEbl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblOperateEblResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblOperateEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblOperateEblResult(%+v)", *p)

}

func (p *FabricEblOperateEblResult) DeepEqual(ano *FabricEblOperateEblResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblOperateEblResult) Field0DeepEqual(src *OperateEblResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblUploadSealArgs struct {
	Req *UploadSealReq `thrift:"req,1" frugal:"1,default,UploadSealReq" json:"req"`
}

func NewFabricEblUploadSealArgs() *FabricEblUploadSealArgs {
	return &FabricEblUploadSealArgs{}
}

func (p *FabricEblUploadSealArgs) InitDefault() {
}

var FabricEblUploadSealArgs_Req_DEFAULT *UploadSealReq

func (p *FabricEblUploadSealArgs) GetReq() (v *UploadSealReq) {
	if !p.IsSetReq() {
		return FabricEblUploadSealArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblUploadSealArgs) SetReq(val *UploadSealReq) {
	p.Req = val
}

var fieldIDToName_FabricEblUploadSealArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblUploadSealArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblUploadSealArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblUploadSealArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblUploadSealArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUploadSealReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblUploadSealArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadSeal_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblUploadSealArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblUploadSealArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblUploadSealArgs(%+v)", *p)

}

func (p *FabricEblUploadSealArgs) DeepEqual(ano *FabricEblUploadSealArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblUploadSealArgs) Field1DeepEqual(src *UploadSealReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblUploadSealResult struct {
	Success *UploadSealResp `thrift:"success,0,optional" frugal:"0,optional,UploadSealResp" json:"success,omitempty"`
}

func NewFabricEblUploadSealResult() *FabricEblUploadSealResult {
	return &FabricEblUploadSealResult{}
}

func (p *FabricEblUploadSealResult) InitDefault() {
}

var FabricEblUploadSealResult_Success_DEFAULT *UploadSealResp

func (p *FabricEblUploadSealResult) GetSuccess() (v *UploadSealResp) {
	if !p.IsSetSuccess() {
		return FabricEblUploadSealResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblUploadSealResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadSealResp)
}

var fieldIDToName_FabricEblUploadSealResult = map[int16]string{
	0: "success",
}

func (p *FabricEblUploadSealResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblUploadSealResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblUploadSealResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblUploadSealResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUploadSealResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblUploadSealResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UploadSeal_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblUploadSealResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblUploadSealResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblUploadSealResult(%+v)", *p)

}

func (p *FabricEblUploadSealResult) DeepEqual(ano *FabricEblUploadSealResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblUploadSealResult) Field0DeepEqual(src *UploadSealResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCheckTokenArgs struct {
	Req *CheckTokenReq `thrift:"req,1" frugal:"1,default,CheckTokenReq" json:"req"`
}

func NewFabricEblCheckTokenArgs() *FabricEblCheckTokenArgs {
	return &FabricEblCheckTokenArgs{}
}

func (p *FabricEblCheckTokenArgs) InitDefault() {
}

var FabricEblCheckTokenArgs_Req_DEFAULT *CheckTokenReq

func (p *FabricEblCheckTokenArgs) GetReq() (v *CheckTokenReq) {
	if !p.IsSetReq() {
		return FabricEblCheckTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCheckTokenArgs) SetReq(val *CheckTokenReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCheckTokenArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCheckTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCheckTokenArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCheckTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCheckTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCheckTokenReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCheckTokenArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCheckTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCheckTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCheckTokenArgs(%+v)", *p)

}

func (p *FabricEblCheckTokenArgs) DeepEqual(ano *FabricEblCheckTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCheckTokenArgs) Field1DeepEqual(src *CheckTokenReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCheckTokenResult struct {
	Success *CheckTokenResp `thrift:"success,0,optional" frugal:"0,optional,CheckTokenResp" json:"success,omitempty"`
}

func NewFabricEblCheckTokenResult() *FabricEblCheckTokenResult {
	return &FabricEblCheckTokenResult{}
}

func (p *FabricEblCheckTokenResult) InitDefault() {
}

var FabricEblCheckTokenResult_Success_DEFAULT *CheckTokenResp

func (p *FabricEblCheckTokenResult) GetSuccess() (v *CheckTokenResp) {
	if !p.IsSetSuccess() {
		return FabricEblCheckTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCheckTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckTokenResp)
}

var fieldIDToName_FabricEblCheckTokenResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCheckTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCheckTokenResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCheckTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCheckTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCheckTokenResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCheckTokenResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CheckToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCheckTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCheckTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCheckTokenResult(%+v)", *p)

}

func (p *FabricEblCheckTokenResult) DeepEqual(ano *FabricEblCheckTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCheckTokenResult) Field0DeepEqual(src *CheckTokenResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateInvoiceArgs struct {
	Req *CreateInvoiceReq `thrift:"req,1" frugal:"1,default,CreateInvoiceReq" json:"req"`
}

func NewFabricEblCreateInvoiceArgs() *FabricEblCreateInvoiceArgs {
	return &FabricEblCreateInvoiceArgs{}
}

func (p *FabricEblCreateInvoiceArgs) InitDefault() {
}

var FabricEblCreateInvoiceArgs_Req_DEFAULT *CreateInvoiceReq

func (p *FabricEblCreateInvoiceArgs) GetReq() (v *CreateInvoiceReq) {
	if !p.IsSetReq() {
		return FabricEblCreateInvoiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateInvoiceArgs) SetReq(val *CreateInvoiceReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateInvoiceArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateInvoiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateInvoiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateInvoiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateInvoiceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateInvoiceReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateInvoiceArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInvoice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateInvoiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateInvoiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateInvoiceArgs(%+v)", *p)

}

func (p *FabricEblCreateInvoiceArgs) DeepEqual(ano *FabricEblCreateInvoiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateInvoiceArgs) Field1DeepEqual(src *CreateInvoiceReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateInvoiceResult struct {
	Success *CreateInvoiceResp `thrift:"success,0,optional" frugal:"0,optional,CreateInvoiceResp" json:"success,omitempty"`
}

func NewFabricEblCreateInvoiceResult() *FabricEblCreateInvoiceResult {
	return &FabricEblCreateInvoiceResult{}
}

func (p *FabricEblCreateInvoiceResult) InitDefault() {
}

var FabricEblCreateInvoiceResult_Success_DEFAULT *CreateInvoiceResp

func (p *FabricEblCreateInvoiceResult) GetSuccess() (v *CreateInvoiceResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateInvoiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateInvoiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateInvoiceResp)
}

var fieldIDToName_FabricEblCreateInvoiceResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateInvoiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateInvoiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateInvoiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateInvoiceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateInvoiceResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateInvoiceResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateInvoice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateInvoiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateInvoiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateInvoiceResult(%+v)", *p)

}

func (p *FabricEblCreateInvoiceResult) DeepEqual(ano *FabricEblCreateInvoiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateInvoiceResult) Field0DeepEqual(src *CreateInvoiceResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateContractArgs struct {
	Req *CreateContractReq `thrift:"req,1" frugal:"1,default,CreateContractReq" json:"req"`
}

func NewFabricEblCreateContractArgs() *FabricEblCreateContractArgs {
	return &FabricEblCreateContractArgs{}
}

func (p *FabricEblCreateContractArgs) InitDefault() {
}

var FabricEblCreateContractArgs_Req_DEFAULT *CreateContractReq

func (p *FabricEblCreateContractArgs) GetReq() (v *CreateContractReq) {
	if !p.IsSetReq() {
		return FabricEblCreateContractArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateContractArgs) SetReq(val *CreateContractReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateContractArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateContractArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateContractArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateContractArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateContractArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateContractReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateContractArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateContract_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateContractArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateContractArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateContractArgs(%+v)", *p)

}

func (p *FabricEblCreateContractArgs) DeepEqual(ano *FabricEblCreateContractArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateContractArgs) Field1DeepEqual(src *CreateContractReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateContractResult struct {
	Success *CreateContractResp `thrift:"success,0,optional" frugal:"0,optional,CreateContractResp" json:"success,omitempty"`
}

func NewFabricEblCreateContractResult() *FabricEblCreateContractResult {
	return &FabricEblCreateContractResult{}
}

func (p *FabricEblCreateContractResult) InitDefault() {
}

var FabricEblCreateContractResult_Success_DEFAULT *CreateContractResp

func (p *FabricEblCreateContractResult) GetSuccess() (v *CreateContractResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateContractResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateContractResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateContractResp)
}

var fieldIDToName_FabricEblCreateContractResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateContractResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateContractResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateContractResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateContractResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateContractResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateContractResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateContract_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateContractResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateContractResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateContractResult(%+v)", *p)

}

func (p *FabricEblCreateContractResult) DeepEqual(ano *FabricEblCreateContractResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateContractResult) Field0DeepEqual(src *CreateContractResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateDocumentArgs struct {
	Req *CreateDocumentReq `thrift:"req,1" frugal:"1,default,CreateDocumentReq" json:"req"`
}

func NewFabricEblCreateDocumentArgs() *FabricEblCreateDocumentArgs {
	return &FabricEblCreateDocumentArgs{}
}

func (p *FabricEblCreateDocumentArgs) InitDefault() {
}

var FabricEblCreateDocumentArgs_Req_DEFAULT *CreateDocumentReq

func (p *FabricEblCreateDocumentArgs) GetReq() (v *CreateDocumentReq) {
	if !p.IsSetReq() {
		return FabricEblCreateDocumentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateDocumentArgs) SetReq(val *CreateDocumentReq) {
	p.Req = val
}

var fieldIDToName_FabricEblCreateDocumentArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblCreateDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateDocumentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateDocumentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateDocumentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateDocumentReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblCreateDocumentArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDocument_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateDocumentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblCreateDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateDocumentArgs(%+v)", *p)

}

func (p *FabricEblCreateDocumentArgs) DeepEqual(ano *FabricEblCreateDocumentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblCreateDocumentArgs) Field1DeepEqual(src *CreateDocumentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblCreateDocumentResult struct {
	Success *CreateDocumentResp `thrift:"success,0,optional" frugal:"0,optional,CreateDocumentResp" json:"success,omitempty"`
}

func NewFabricEblCreateDocumentResult() *FabricEblCreateDocumentResult {
	return &FabricEblCreateDocumentResult{}
}

func (p *FabricEblCreateDocumentResult) InitDefault() {
}

var FabricEblCreateDocumentResult_Success_DEFAULT *CreateDocumentResp

func (p *FabricEblCreateDocumentResult) GetSuccess() (v *CreateDocumentResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateDocumentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateDocumentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateDocumentResp)
}

var fieldIDToName_FabricEblCreateDocumentResult = map[int16]string{
	0: "success",
}

func (p *FabricEblCreateDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateDocumentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblCreateDocumentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblCreateDocumentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateDocumentResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblCreateDocumentResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDocument_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblCreateDocumentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblCreateDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateDocumentResult(%+v)", *p)

}

func (p *FabricEblCreateDocumentResult) DeepEqual(ano *FabricEblCreateDocumentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblCreateDocumentResult) Field0DeepEqual(src *CreateDocumentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryInvoiceListArgs struct {
	Req *QueryInvoiceListReq `thrift:"req,1" frugal:"1,default,QueryInvoiceListReq" json:"req"`
}

func NewFabricEblQueryInvoiceListArgs() *FabricEblQueryInvoiceListArgs {
	return &FabricEblQueryInvoiceListArgs{}
}

func (p *FabricEblQueryInvoiceListArgs) InitDefault() {
}

var FabricEblQueryInvoiceListArgs_Req_DEFAULT *QueryInvoiceListReq

func (p *FabricEblQueryInvoiceListArgs) GetReq() (v *QueryInvoiceListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryInvoiceListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryInvoiceListArgs) SetReq(val *QueryInvoiceListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryInvoiceListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryInvoiceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryInvoiceListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryInvoiceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryInvoiceListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryInvoiceListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryInvoiceListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryInvoiceList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryInvoiceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryInvoiceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryInvoiceListArgs(%+v)", *p)

}

func (p *FabricEblQueryInvoiceListArgs) DeepEqual(ano *FabricEblQueryInvoiceListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryInvoiceListArgs) Field1DeepEqual(src *QueryInvoiceListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryInvoiceListResult struct {
	Success *QueryInvoiceListResp `thrift:"success,0,optional" frugal:"0,optional,QueryInvoiceListResp" json:"success,omitempty"`
}

func NewFabricEblQueryInvoiceListResult() *FabricEblQueryInvoiceListResult {
	return &FabricEblQueryInvoiceListResult{}
}

func (p *FabricEblQueryInvoiceListResult) InitDefault() {
}

var FabricEblQueryInvoiceListResult_Success_DEFAULT *QueryInvoiceListResp

func (p *FabricEblQueryInvoiceListResult) GetSuccess() (v *QueryInvoiceListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryInvoiceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryInvoiceListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryInvoiceListResp)
}

var fieldIDToName_FabricEblQueryInvoiceListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryInvoiceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryInvoiceListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryInvoiceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryInvoiceListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryInvoiceListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryInvoiceListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryInvoiceList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryInvoiceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryInvoiceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryInvoiceListResult(%+v)", *p)

}

func (p *FabricEblQueryInvoiceListResult) DeepEqual(ano *FabricEblQueryInvoiceListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryInvoiceListResult) Field0DeepEqual(src *QueryInvoiceListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryContractListArgs struct {
	Req *QueryContractListReq `thrift:"req,1" frugal:"1,default,QueryContractListReq" json:"req"`
}

func NewFabricEblQueryContractListArgs() *FabricEblQueryContractListArgs {
	return &FabricEblQueryContractListArgs{}
}

func (p *FabricEblQueryContractListArgs) InitDefault() {
}

var FabricEblQueryContractListArgs_Req_DEFAULT *QueryContractListReq

func (p *FabricEblQueryContractListArgs) GetReq() (v *QueryContractListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryContractListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryContractListArgs) SetReq(val *QueryContractListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryContractListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryContractListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryContractListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryContractListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryContractListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryContractListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryContractListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryContractList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryContractListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryContractListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryContractListArgs(%+v)", *p)

}

func (p *FabricEblQueryContractListArgs) DeepEqual(ano *FabricEblQueryContractListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryContractListArgs) Field1DeepEqual(src *QueryContractListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryContractListResult struct {
	Success *QueryContractListResp `thrift:"success,0,optional" frugal:"0,optional,QueryContractListResp" json:"success,omitempty"`
}

func NewFabricEblQueryContractListResult() *FabricEblQueryContractListResult {
	return &FabricEblQueryContractListResult{}
}

func (p *FabricEblQueryContractListResult) InitDefault() {
}

var FabricEblQueryContractListResult_Success_DEFAULT *QueryContractListResp

func (p *FabricEblQueryContractListResult) GetSuccess() (v *QueryContractListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryContractListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryContractListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryContractListResp)
}

var fieldIDToName_FabricEblQueryContractListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryContractListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryContractListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryContractListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryContractListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryContractListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryContractListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryContractList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryContractListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryContractListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryContractListResult(%+v)", *p)

}

func (p *FabricEblQueryContractListResult) DeepEqual(ano *FabricEblQueryContractListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryContractListResult) Field0DeepEqual(src *QueryContractListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryDocumentListArgs struct {
	Req *QueryDocumentListReq `thrift:"req,1" frugal:"1,default,QueryDocumentListReq" json:"req"`
}

func NewFabricEblQueryDocumentListArgs() *FabricEblQueryDocumentListArgs {
	return &FabricEblQueryDocumentListArgs{}
}

func (p *FabricEblQueryDocumentListArgs) InitDefault() {
}

var FabricEblQueryDocumentListArgs_Req_DEFAULT *QueryDocumentListReq

func (p *FabricEblQueryDocumentListArgs) GetReq() (v *QueryDocumentListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryDocumentListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryDocumentListArgs) SetReq(val *QueryDocumentListReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQueryDocumentListArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQueryDocumentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryDocumentListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryDocumentListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryDocumentListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQueryDocumentListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQueryDocumentListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryDocumentList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryDocumentListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQueryDocumentListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryDocumentListArgs(%+v)", *p)

}

func (p *FabricEblQueryDocumentListArgs) DeepEqual(ano *FabricEblQueryDocumentListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQueryDocumentListArgs) Field1DeepEqual(src *QueryDocumentListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQueryDocumentListResult struct {
	Success *QueryDocumentListResp `thrift:"success,0,optional" frugal:"0,optional,QueryDocumentListResp" json:"success,omitempty"`
}

func NewFabricEblQueryDocumentListResult() *FabricEblQueryDocumentListResult {
	return &FabricEblQueryDocumentListResult{}
}

func (p *FabricEblQueryDocumentListResult) InitDefault() {
}

var FabricEblQueryDocumentListResult_Success_DEFAULT *QueryDocumentListResp

func (p *FabricEblQueryDocumentListResult) GetSuccess() (v *QueryDocumentListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryDocumentListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryDocumentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryDocumentListResp)
}

var fieldIDToName_FabricEblQueryDocumentListResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQueryDocumentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryDocumentListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQueryDocumentListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQueryDocumentListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryDocumentListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQueryDocumentListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QueryDocumentList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQueryDocumentListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQueryDocumentListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryDocumentListResult(%+v)", *p)

}

func (p *FabricEblQueryDocumentListResult) DeepEqual(ano *FabricEblQueryDocumentListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQueryDocumentListResult) Field0DeepEqual(src *QueryDocumentListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetInvoiceArgs struct {
	Req *GetInvoiceReq `thrift:"req,1" frugal:"1,default,GetInvoiceReq" json:"req"`
}

func NewFabricEblGetInvoiceArgs() *FabricEblGetInvoiceArgs {
	return &FabricEblGetInvoiceArgs{}
}

func (p *FabricEblGetInvoiceArgs) InitDefault() {
}

var FabricEblGetInvoiceArgs_Req_DEFAULT *GetInvoiceReq

func (p *FabricEblGetInvoiceArgs) GetReq() (v *GetInvoiceReq) {
	if !p.IsSetReq() {
		return FabricEblGetInvoiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetInvoiceArgs) SetReq(val *GetInvoiceReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetInvoiceArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetInvoiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetInvoiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetInvoiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetInvoiceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetInvoiceReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetInvoiceArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetInvoice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetInvoiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetInvoiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetInvoiceArgs(%+v)", *p)

}

func (p *FabricEblGetInvoiceArgs) DeepEqual(ano *FabricEblGetInvoiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetInvoiceArgs) Field1DeepEqual(src *GetInvoiceReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetInvoiceResult struct {
	Success *GetInvoiceResp `thrift:"success,0,optional" frugal:"0,optional,GetInvoiceResp" json:"success,omitempty"`
}

func NewFabricEblGetInvoiceResult() *FabricEblGetInvoiceResult {
	return &FabricEblGetInvoiceResult{}
}

func (p *FabricEblGetInvoiceResult) InitDefault() {
}

var FabricEblGetInvoiceResult_Success_DEFAULT *GetInvoiceResp

func (p *FabricEblGetInvoiceResult) GetSuccess() (v *GetInvoiceResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetInvoiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetInvoiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetInvoiceResp)
}

var fieldIDToName_FabricEblGetInvoiceResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetInvoiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetInvoiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetInvoiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetInvoiceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetInvoiceResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetInvoiceResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetInvoice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetInvoiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetInvoiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetInvoiceResult(%+v)", *p)

}

func (p *FabricEblGetInvoiceResult) DeepEqual(ano *FabricEblGetInvoiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetInvoiceResult) Field0DeepEqual(src *GetInvoiceResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetContractArgs struct {
	Req *GetContractReq `thrift:"req,1" frugal:"1,default,GetContractReq" json:"req"`
}

func NewFabricEblGetContractArgs() *FabricEblGetContractArgs {
	return &FabricEblGetContractArgs{}
}

func (p *FabricEblGetContractArgs) InitDefault() {
}

var FabricEblGetContractArgs_Req_DEFAULT *GetContractReq

func (p *FabricEblGetContractArgs) GetReq() (v *GetContractReq) {
	if !p.IsSetReq() {
		return FabricEblGetContractArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetContractArgs) SetReq(val *GetContractReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetContractArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetContractArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetContractArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetContractArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetContractArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetContractReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetContractArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetContract_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetContractArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetContractArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetContractArgs(%+v)", *p)

}

func (p *FabricEblGetContractArgs) DeepEqual(ano *FabricEblGetContractArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetContractArgs) Field1DeepEqual(src *GetContractReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetContractResult struct {
	Success *GetContractResp `thrift:"success,0,optional" frugal:"0,optional,GetContractResp" json:"success,omitempty"`
}

func NewFabricEblGetContractResult() *FabricEblGetContractResult {
	return &FabricEblGetContractResult{}
}

func (p *FabricEblGetContractResult) InitDefault() {
}

var FabricEblGetContractResult_Success_DEFAULT *GetContractResp

func (p *FabricEblGetContractResult) GetSuccess() (v *GetContractResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetContractResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetContractResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetContractResp)
}

var fieldIDToName_FabricEblGetContractResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetContractResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetContractResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetContractResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetContractResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetContractResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetContractResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetContract_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetContractResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetContractResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetContractResult(%+v)", *p)

}

func (p *FabricEblGetContractResult) DeepEqual(ano *FabricEblGetContractResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetContractResult) Field0DeepEqual(src *GetContractResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetDocumentArgs struct {
	Req *GetDocumentReq `thrift:"req,1" frugal:"1,default,GetDocumentReq" json:"req"`
}

func NewFabricEblGetDocumentArgs() *FabricEblGetDocumentArgs {
	return &FabricEblGetDocumentArgs{}
}

func (p *FabricEblGetDocumentArgs) InitDefault() {
}

var FabricEblGetDocumentArgs_Req_DEFAULT *GetDocumentReq

func (p *FabricEblGetDocumentArgs) GetReq() (v *GetDocumentReq) {
	if !p.IsSetReq() {
		return FabricEblGetDocumentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetDocumentArgs) SetReq(val *GetDocumentReq) {
	p.Req = val
}

var fieldIDToName_FabricEblGetDocumentArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblGetDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetDocumentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetDocumentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetDocumentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDocumentReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblGetDocumentArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocument_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetDocumentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblGetDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetDocumentArgs(%+v)", *p)

}

func (p *FabricEblGetDocumentArgs) DeepEqual(ano *FabricEblGetDocumentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblGetDocumentArgs) Field1DeepEqual(src *GetDocumentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblGetDocumentResult struct {
	Success *GetDocumentResp `thrift:"success,0,optional" frugal:"0,optional,GetDocumentResp" json:"success,omitempty"`
}

func NewFabricEblGetDocumentResult() *FabricEblGetDocumentResult {
	return &FabricEblGetDocumentResult{}
}

func (p *FabricEblGetDocumentResult) InitDefault() {
}

var FabricEblGetDocumentResult_Success_DEFAULT *GetDocumentResp

func (p *FabricEblGetDocumentResult) GetSuccess() (v *GetDocumentResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetDocumentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetDocumentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDocumentResp)
}

var fieldIDToName_FabricEblGetDocumentResult = map[int16]string{
	0: "success",
}

func (p *FabricEblGetDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetDocumentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblGetDocumentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblGetDocumentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDocumentResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblGetDocumentResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocument_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblGetDocumentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblGetDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetDocumentResult(%+v)", *p)

}

func (p *FabricEblGetDocumentResult) DeepEqual(ano *FabricEblGetDocumentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblGetDocumentResult) Field0DeepEqual(src *GetDocumentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQuerySealArgs struct {
	Req *QuerySealReq `thrift:"req,1" frugal:"1,default,QuerySealReq" json:"req"`
}

func NewFabricEblQuerySealArgs() *FabricEblQuerySealArgs {
	return &FabricEblQuerySealArgs{}
}

func (p *FabricEblQuerySealArgs) InitDefault() {
}

var FabricEblQuerySealArgs_Req_DEFAULT *QuerySealReq

func (p *FabricEblQuerySealArgs) GetReq() (v *QuerySealReq) {
	if !p.IsSetReq() {
		return FabricEblQuerySealArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQuerySealArgs) SetReq(val *QuerySealReq) {
	p.Req = val
}

var fieldIDToName_FabricEblQuerySealArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblQuerySealArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQuerySealArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQuerySealArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQuerySealArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewQuerySealReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblQuerySealArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QuerySeal_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQuerySealArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblQuerySealArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQuerySealArgs(%+v)", *p)

}

func (p *FabricEblQuerySealArgs) DeepEqual(ano *FabricEblQuerySealArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblQuerySealArgs) Field1DeepEqual(src *QuerySealReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblQuerySealResult struct {
	Success *QuerySealResp `thrift:"success,0,optional" frugal:"0,optional,QuerySealResp" json:"success,omitempty"`
}

func NewFabricEblQuerySealResult() *FabricEblQuerySealResult {
	return &FabricEblQuerySealResult{}
}

func (p *FabricEblQuerySealResult) InitDefault() {
}

var FabricEblQuerySealResult_Success_DEFAULT *QuerySealResp

func (p *FabricEblQuerySealResult) GetSuccess() (v *QuerySealResp) {
	if !p.IsSetSuccess() {
		return FabricEblQuerySealResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQuerySealResult) SetSuccess(x interface{}) {
	p.Success = x.(*QuerySealResp)
}

var fieldIDToName_FabricEblQuerySealResult = map[int16]string{
	0: "success",
}

func (p *FabricEblQuerySealResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQuerySealResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblQuerySealResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblQuerySealResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQuerySealResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblQuerySealResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("QuerySeal_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblQuerySealResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblQuerySealResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQuerySealResult(%+v)", *p)

}

func (p *FabricEblQuerySealResult) DeepEqual(ano *FabricEblQuerySealResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblQuerySealResult) Field0DeepEqual(src *QuerySealResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblDeleteSealArgs struct {
	Req *DeleteSealReq `thrift:"req,1" frugal:"1,default,DeleteSealReq" json:"req"`
}

func NewFabricEblDeleteSealArgs() *FabricEblDeleteSealArgs {
	return &FabricEblDeleteSealArgs{}
}

func (p *FabricEblDeleteSealArgs) InitDefault() {
}

var FabricEblDeleteSealArgs_Req_DEFAULT *DeleteSealReq

func (p *FabricEblDeleteSealArgs) GetReq() (v *DeleteSealReq) {
	if !p.IsSetReq() {
		return FabricEblDeleteSealArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblDeleteSealArgs) SetReq(val *DeleteSealReq) {
	p.Req = val
}

var fieldIDToName_FabricEblDeleteSealArgs = map[int16]string{
	1: "req",
}

func (p *FabricEblDeleteSealArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblDeleteSealArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblDeleteSealArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblDeleteSealArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteSealReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricEblDeleteSealArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSeal_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblDeleteSealArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricEblDeleteSealArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblDeleteSealArgs(%+v)", *p)

}

func (p *FabricEblDeleteSealArgs) DeepEqual(ano *FabricEblDeleteSealArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricEblDeleteSealArgs) Field1DeepEqual(src *DeleteSealReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricEblDeleteSealResult struct {
	Success *DeleteSealResp `thrift:"success,0,optional" frugal:"0,optional,DeleteSealResp" json:"success,omitempty"`
}

func NewFabricEblDeleteSealResult() *FabricEblDeleteSealResult {
	return &FabricEblDeleteSealResult{}
}

func (p *FabricEblDeleteSealResult) InitDefault() {
}

var FabricEblDeleteSealResult_Success_DEFAULT *DeleteSealResp

func (p *FabricEblDeleteSealResult) GetSuccess() (v *DeleteSealResp) {
	if !p.IsSetSuccess() {
		return FabricEblDeleteSealResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblDeleteSealResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSealResp)
}

var fieldIDToName_FabricEblDeleteSealResult = map[int16]string{
	0: "success",
}

func (p *FabricEblDeleteSealResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblDeleteSealResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricEblDeleteSealResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricEblDeleteSealResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteSealResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricEblDeleteSealResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSeal_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricEblDeleteSealResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricEblDeleteSealResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblDeleteSealResult(%+v)", *p)

}

func (p *FabricEblDeleteSealResult) DeepEqual(ano *FabricEblDeleteSealResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricEblDeleteSealResult) Field0DeepEqual(src *DeleteSealResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
