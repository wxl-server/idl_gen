// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package fabric_ebl

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type FileType int64

const (
	FileType_Invoice  FileType = 1
	FileType_Contract FileType = 2
	FileType_Document FileType = 3
	FileType_Seal     FileType = 4
	FileType_Ebl      FileType = 5
)

func (p FileType) String() string {
	switch p {
	case FileType_Invoice:
		return "Invoice"
	case FileType_Contract:
		return "Contract"
	case FileType_Document:
		return "Document"
	case FileType_Seal:
		return "Seal"
	case FileType_Ebl:
		return "Ebl"
	}
	return "<UNSET>"
}

func FileTypeFromString(s string) (FileType, error) {
	switch s {
	case "Invoice":
		return FileType_Invoice, nil
	case "Contract":
		return FileType_Contract, nil
	case "Document":
		return FileType_Document, nil
	case "Seal":
		return FileType_Seal, nil
	case "Ebl":
		return FileType_Ebl, nil
	}
	return FileType(0), fmt.Errorf("not a valid FileType string")
}

func FileTypePtr(v FileType) *FileType { return &v }
func (p *FileType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FileType(result.Int64)
	return
}

func (p *FileType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type OperationType int64

const (
	OperationType_Submit         OperationType = 1
	OperationType_Approve        OperationType = 2
	OperationType_Reject         OperationType = 3
	OperationType_Retreat        OperationType = 4
	OperationType_Seal           OperationType = 5
	OperationType_Issue          OperationType = 6
	OperationType_AcceptIssue    OperationType = 7
	OperationType_Transfer       OperationType = 8
	OperationType_Redeem         OperationType = 9
	OperationType_AcceptTransfer OperationType = 10
	OperationType_RefuseIssue    OperationType = 11
	OperationType_RefuseTransfer OperationType = 12
)

func (p OperationType) String() string {
	switch p {
	case OperationType_Submit:
		return "Submit"
	case OperationType_Approve:
		return "Approve"
	case OperationType_Reject:
		return "Reject"
	case OperationType_Retreat:
		return "Retreat"
	case OperationType_Seal:
		return "Seal"
	case OperationType_Issue:
		return "Issue"
	case OperationType_AcceptIssue:
		return "AcceptIssue"
	case OperationType_Transfer:
		return "Transfer"
	case OperationType_Redeem:
		return "Redeem"
	case OperationType_AcceptTransfer:
		return "AcceptTransfer"
	case OperationType_RefuseIssue:
		return "RefuseIssue"
	case OperationType_RefuseTransfer:
		return "RefuseTransfer"
	}
	return "<UNSET>"
}

func OperationTypeFromString(s string) (OperationType, error) {
	switch s {
	case "Submit":
		return OperationType_Submit, nil
	case "Approve":
		return OperationType_Approve, nil
	case "Reject":
		return OperationType_Reject, nil
	case "Retreat":
		return OperationType_Retreat, nil
	case "Seal":
		return OperationType_Seal, nil
	case "Issue":
		return OperationType_Issue, nil
	case "AcceptIssue":
		return OperationType_AcceptIssue, nil
	case "Transfer":
		return OperationType_Transfer, nil
	case "Redeem":
		return OperationType_Redeem, nil
	case "AcceptTransfer":
		return OperationType_AcceptTransfer, nil
	case "RefuseIssue":
		return OperationType_RefuseIssue, nil
	case "RefuseTransfer":
		return OperationType_RefuseTransfer, nil
	}
	return OperationType(0), fmt.Errorf("not a valid OperationType string")
}

func OperationTypePtr(v OperationType) *OperationType { return &v }
func (p *OperationType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = OperationType(result.Int64)
	return
}

func (p *OperationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type QueryEblType int64

const (
	QueryEblType_Manage        QueryEblType = 1
	QueryEblType_TransferIssue QueryEblType = 2
	QueryEblType_Accept        QueryEblType = 3
)

func (p QueryEblType) String() string {
	switch p {
	case QueryEblType_Manage:
		return "Manage"
	case QueryEblType_TransferIssue:
		return "TransferIssue"
	case QueryEblType_Accept:
		return "Accept"
	}
	return "<UNSET>"
}

func QueryEblTypeFromString(s string) (QueryEblType, error) {
	switch s {
	case "Manage":
		return QueryEblType_Manage, nil
	case "TransferIssue":
		return QueryEblType_TransferIssue, nil
	case "Accept":
		return QueryEblType_Accept, nil
	}
	return QueryEblType(0), fmt.Errorf("not a valid QueryEblType string")
}

func QueryEblTypePtr(v QueryEblType) *QueryEblType { return &v }
func (p *QueryEblType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = QueryEblType(result.Int64)
	return
}

func (p *QueryEblType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CompanyType int64

const (
	CompanyType_Ship   CompanyType = 1
	CompanyType_Bank   CompanyType = 2
	CompanyType_Common CompanyType = 3
)

func (p CompanyType) String() string {
	switch p {
	case CompanyType_Ship:
		return "Ship"
	case CompanyType_Bank:
		return "Bank"
	case CompanyType_Common:
		return "Common"
	}
	return "<UNSET>"
}

func CompanyTypeFromString(s string) (CompanyType, error) {
	switch s {
	case "Ship":
		return CompanyType_Ship, nil
	case "Bank":
		return CompanyType_Bank, nil
	case "Common":
		return CompanyType_Common, nil
	}
	return CompanyType(0), fmt.Errorf("not a valid CompanyType string")
}

func CompanyTypePtr(v CompanyType) *CompanyType { return &v }
func (p *CompanyType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CompanyType(result.Int64)
	return
}

func (p *CompanyType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserType int64

const (
	UserType_Admin       UserType = 1
	UserType_EblMaker    UserType = 2
	UserType_EblChecker  UserType = 3
	UserType_EblSealer   UserType = 4
	UserType_CompanyUser UserType = 5
)

func (p UserType) String() string {
	switch p {
	case UserType_Admin:
		return "Admin"
	case UserType_EblMaker:
		return "EblMaker"
	case UserType_EblChecker:
		return "EblChecker"
	case UserType_EblSealer:
		return "EblSealer"
	case UserType_CompanyUser:
		return "CompanyUser"
	}
	return "<UNSET>"
}

func UserTypeFromString(s string) (UserType, error) {
	switch s {
	case "Admin":
		return UserType_Admin, nil
	case "EblMaker":
		return UserType_EblMaker, nil
	case "EblChecker":
		return UserType_EblChecker, nil
	case "EblSealer":
		return UserType_EblSealer, nil
	case "CompanyUser":
		return UserType_CompanyUser, nil
	}
	return UserType(0), fmt.Errorf("not a valid UserType string")
}

func UserTypePtr(v UserType) *UserType { return &v }
func (p *UserType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = UserType(result.Int64)
	return
}

func (p *UserType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type InvoiceType int64

const (
	InvoiceType_Electronic InvoiceType = 1
	InvoiceType_Paper      InvoiceType = 2
)

func (p InvoiceType) String() string {
	switch p {
	case InvoiceType_Electronic:
		return "Electronic"
	case InvoiceType_Paper:
		return "Paper"
	}
	return "<UNSET>"
}

func InvoiceTypeFromString(s string) (InvoiceType, error) {
	switch s {
	case "Electronic":
		return InvoiceType_Electronic, nil
	case "Paper":
		return InvoiceType_Paper, nil
	}
	return InvoiceType(0), fmt.Errorf("not a valid InvoiceType string")
}

func InvoiceTypePtr(v InvoiceType) *InvoiceType { return &v }
func (p *InvoiceType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = InvoiceType(result.Int64)
	return
}

func (p *InvoiceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContractStatus int64

const (
	ContractStatus_Active     ContractStatus = 1
	ContractStatus_Terminated ContractStatus = 2
)

func (p ContractStatus) String() string {
	switch p {
	case ContractStatus_Active:
		return "Active"
	case ContractStatus_Terminated:
		return "Terminated"
	}
	return "<UNSET>"
}

func ContractStatusFromString(s string) (ContractStatus, error) {
	switch s {
	case "Active":
		return ContractStatus_Active, nil
	case "Terminated":
		return ContractStatus_Terminated, nil
	}
	return ContractStatus(0), fmt.Errorf("not a valid ContractStatus string")
}

func ContractStatusPtr(v ContractStatus) *ContractStatus { return &v }
func (p *ContractStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ContractStatus(result.Int64)
	return
}

func (p *ContractStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DocType int64

const (
	DocType_StorageIn  DocType = 1
	DocType_StorageOut DocType = 2
	DocType_Settlement DocType = 3
)

func (p DocType) String() string {
	switch p {
	case DocType_StorageIn:
		return "StorageIn"
	case DocType_StorageOut:
		return "StorageOut"
	case DocType_Settlement:
		return "Settlement"
	}
	return "<UNSET>"
}

func DocTypeFromString(s string) (DocType, error) {
	switch s {
	case "StorageIn":
		return DocType_StorageIn, nil
	case "StorageOut":
		return DocType_StorageOut, nil
	case "Settlement":
		return DocType_Settlement, nil
	}
	return DocType(0), fmt.Errorf("not a valid DocType string")
}

func DocTypePtr(v DocType) *DocType { return &v }
func (p *DocType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DocType(result.Int64)
	return
}

func (p *DocType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CreateCompanyReq struct {
	CompanyCode   string      `thrift:"company_code,1,required" frugal:"1,required,string" json:"company_code"`
	CompanyName   string      `thrift:"company_name,2,required" frugal:"2,required,string" json:"company_name"`
	CompanyType   CompanyType `thrift:"company_type,3,required" frugal:"3,required,CompanyType" json:"company_type"`
	AdminEmail    string      `thrift:"admin_email,4,required" frugal:"4,required,string" json:"admin_email"`
	AdminPassword string      `thrift:"admin_password,5,required" frugal:"5,required,string" json:"admin_password"`
	AdminName     string      `thrift:"admin_name,6,required" frugal:"6,required,string" json:"admin_name"`
}

func NewCreateCompanyReq() *CreateCompanyReq {
	return &CreateCompanyReq{}
}

func (p *CreateCompanyReq) InitDefault() {
}

func (p *CreateCompanyReq) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *CreateCompanyReq) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *CreateCompanyReq) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}

func (p *CreateCompanyReq) GetAdminEmail() (v string) {
	return p.AdminEmail
}

func (p *CreateCompanyReq) GetAdminPassword() (v string) {
	return p.AdminPassword
}

func (p *CreateCompanyReq) GetAdminName() (v string) {
	return p.AdminName
}
func (p *CreateCompanyReq) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *CreateCompanyReq) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *CreateCompanyReq) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}
func (p *CreateCompanyReq) SetAdminEmail(val string) {
	p.AdminEmail = val
}
func (p *CreateCompanyReq) SetAdminPassword(val string) {
	p.AdminPassword = val
}
func (p *CreateCompanyReq) SetAdminName(val string) {
	p.AdminName = val
}

func (p *CreateCompanyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyReq(%+v)", *p)
}

var fieldIDToName_CreateCompanyReq = map[int16]string{
	1: "company_code",
	2: "company_name",
	3: "company_type",
	4: "admin_email",
	5: "admin_password",
	6: "admin_name",
}

type CreateCompanyResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateCompanyResp() *CreateCompanyResp {
	return &CreateCompanyResp{}
}

func (p *CreateCompanyResp) InitDefault() {
}

func (p *CreateCompanyResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateCompanyResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateCompanyResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyResp(%+v)", *p)
}

var fieldIDToName_CreateCompanyResp = map[int16]string{
	1: "id",
}

type CreateCompanyUserReq struct {
	Email    string   `thrift:"email,1,required" frugal:"1,required,string" json:"email"`
	Password string   `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Name     string   `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	Type     UserType `thrift:"type,4,required" frugal:"4,required,UserType" json:"type"`
	Token    string   `thrift:"token,5,required" frugal:"5,required,string" json:"token"`
}

func NewCreateCompanyUserReq() *CreateCompanyUserReq {
	return &CreateCompanyUserReq{}
}

func (p *CreateCompanyUserReq) InitDefault() {
}

func (p *CreateCompanyUserReq) GetEmail() (v string) {
	return p.Email
}

func (p *CreateCompanyUserReq) GetPassword() (v string) {
	return p.Password
}

func (p *CreateCompanyUserReq) GetName() (v string) {
	return p.Name
}

func (p *CreateCompanyUserReq) GetType() (v UserType) {
	return p.Type
}

func (p *CreateCompanyUserReq) GetToken() (v string) {
	return p.Token
}
func (p *CreateCompanyUserReq) SetEmail(val string) {
	p.Email = val
}
func (p *CreateCompanyUserReq) SetPassword(val string) {
	p.Password = val
}
func (p *CreateCompanyUserReq) SetName(val string) {
	p.Name = val
}
func (p *CreateCompanyUserReq) SetType(val UserType) {
	p.Type = val
}
func (p *CreateCompanyUserReq) SetToken(val string) {
	p.Token = val
}

func (p *CreateCompanyUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyUserReq(%+v)", *p)
}

var fieldIDToName_CreateCompanyUserReq = map[int16]string{
	1: "email",
	2: "password",
	3: "name",
	4: "type",
	5: "token",
}

type CreateCompanyUserResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateCompanyUserResp() *CreateCompanyUserResp {
	return &CreateCompanyUserResp{}
}

func (p *CreateCompanyUserResp) InitDefault() {
}

func (p *CreateCompanyUserResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateCompanyUserResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateCompanyUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCompanyUserResp(%+v)", *p)
}

var fieldIDToName_CreateCompanyUserResp = map[int16]string{
	1: "id",
}

type QueryCompanyUserListReq struct {
	Token    string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64  `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64  `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
}

func NewQueryCompanyUserListReq() *QueryCompanyUserListReq {
	return &QueryCompanyUserListReq{}
}

func (p *QueryCompanyUserListReq) InitDefault() {
}

func (p *QueryCompanyUserListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryCompanyUserListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryCompanyUserListReq) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *QueryCompanyUserListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryCompanyUserListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryCompanyUserListReq) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *QueryCompanyUserListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCompanyUserListReq(%+v)", *p)
}

var fieldIDToName_QueryCompanyUserListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
}

type QueryCompanyUserListResp struct {
	CompanyUserList []*CompanyUser `thrift:"companyUserList,1,required" frugal:"1,required,list<CompanyUser>" json:"companyUserList"`
	Total           int64          `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryCompanyUserListResp() *QueryCompanyUserListResp {
	return &QueryCompanyUserListResp{}
}

func (p *QueryCompanyUserListResp) InitDefault() {
}

func (p *QueryCompanyUserListResp) GetCompanyUserList() (v []*CompanyUser) {
	return p.CompanyUserList
}

func (p *QueryCompanyUserListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryCompanyUserListResp) SetCompanyUserList(val []*CompanyUser) {
	p.CompanyUserList = val
}
func (p *QueryCompanyUserListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryCompanyUserListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCompanyUserListResp(%+v)", *p)
}

var fieldIDToName_QueryCompanyUserListResp = map[int16]string{
	1: "companyUserList",
	2: "total",
}

type CompanyUser struct {
	Id        int64    `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Email     string   `thrift:"email,2,required" frugal:"2,required,string" json:"email"`
	Name      string   `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	UserType  UserType `thrift:"user_type,4,required" frugal:"4,required,UserType" json:"user_type"`
	CreatedAt int64    `thrift:"created_at,5,required" frugal:"5,required,i64" json:"created_at"`
	UpdatedAt int64    `thrift:"updated_at,6,required" frugal:"6,required,i64" json:"updated_at"`
}

func NewCompanyUser() *CompanyUser {
	return &CompanyUser{}
}

func (p *CompanyUser) InitDefault() {
}

func (p *CompanyUser) GetId() (v int64) {
	return p.Id
}

func (p *CompanyUser) GetEmail() (v string) {
	return p.Email
}

func (p *CompanyUser) GetName() (v string) {
	return p.Name
}

func (p *CompanyUser) GetUserType() (v UserType) {
	return p.UserType
}

func (p *CompanyUser) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *CompanyUser) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}
func (p *CompanyUser) SetId(val int64) {
	p.Id = val
}
func (p *CompanyUser) SetEmail(val string) {
	p.Email = val
}
func (p *CompanyUser) SetName(val string) {
	p.Name = val
}
func (p *CompanyUser) SetUserType(val UserType) {
	p.UserType = val
}
func (p *CompanyUser) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *CompanyUser) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}

func (p *CompanyUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyUser(%+v)", *p)
}

var fieldIDToName_CompanyUser = map[int16]string{
	1: "id",
	2: "email",
	3: "name",
	4: "user_type",
	5: "created_at",
	6: "updated_at",
}

type LoginReq struct {
	Email    string `thrift:"email,1,required" frugal:"1,required,string" json:"email"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewLoginReq() *LoginReq {
	return &LoginReq{}
}

func (p *LoginReq) InitDefault() {
}

func (p *LoginReq) GetEmail() (v string) {
	return p.Email
}

func (p *LoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *LoginReq) SetEmail(val string) {
	p.Email = val
}
func (p *LoginReq) SetPassword(val string) {
	p.Password = val
}

func (p *LoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginReq(%+v)", *p)
}

var fieldIDToName_LoginReq = map[int16]string{
	1: "email",
	2: "password",
}

type LoginResp struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewLoginResp() *LoginResp {
	return &LoginResp{}
}

func (p *LoginResp) InitDefault() {
}

func (p *LoginResp) GetToken() (v string) {
	return p.Token
}
func (p *LoginResp) SetToken(val string) {
	p.Token = val
}

func (p *LoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResp(%+v)", *p)
}

var fieldIDToName_LoginResp = map[int16]string{
	1: "token",
}

type GetUserInfoReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewGetUserInfoReq() *GetUserInfoReq {
	return &GetUserInfoReq{}
}

func (p *GetUserInfoReq) InitDefault() {
}

func (p *GetUserInfoReq) GetToken() (v string) {
	return p.Token
}
func (p *GetUserInfoReq) SetToken(val string) {
	p.Token = val
}

func (p *GetUserInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoReq(%+v)", *p)
}

var fieldIDToName_GetUserInfoReq = map[int16]string{
	1: "token",
}

type GetUserInfoResp struct {
	UserId      int64       `thrift:"user_id,1,required" frugal:"1,required,i64" json:"user_id"`
	UserEmail   string      `thrift:"user_email,2,required" frugal:"2,required,string" json:"user_email"`
	UserName    string      `thrift:"user_name,3,required" frugal:"3,required,string" json:"user_name"`
	UserType    UserType    `thrift:"user_type,4,required" frugal:"4,required,UserType" json:"user_type"`
	CompanyId   int64       `thrift:"company_id,5,required" frugal:"5,required,i64" json:"company_id"`
	CompanyName string      `thrift:"company_name,6,required" frugal:"6,required,string" json:"company_name"`
	CompanyCode string      `thrift:"company_code,7,required" frugal:"7,required,string" json:"company_code"`
	CompanyType CompanyType `thrift:"company_type,8,required" frugal:"8,required,CompanyType" json:"company_type"`
}

func NewGetUserInfoResp() *GetUserInfoResp {
	return &GetUserInfoResp{}
}

func (p *GetUserInfoResp) InitDefault() {
}

func (p *GetUserInfoResp) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetUserInfoResp) GetUserEmail() (v string) {
	return p.UserEmail
}

func (p *GetUserInfoResp) GetUserName() (v string) {
	return p.UserName
}

func (p *GetUserInfoResp) GetUserType() (v UserType) {
	return p.UserType
}

func (p *GetUserInfoResp) GetCompanyId() (v int64) {
	return p.CompanyId
}

func (p *GetUserInfoResp) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *GetUserInfoResp) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *GetUserInfoResp) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}
func (p *GetUserInfoResp) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetUserInfoResp) SetUserEmail(val string) {
	p.UserEmail = val
}
func (p *GetUserInfoResp) SetUserName(val string) {
	p.UserName = val
}
func (p *GetUserInfoResp) SetUserType(val UserType) {
	p.UserType = val
}
func (p *GetUserInfoResp) SetCompanyId(val int64) {
	p.CompanyId = val
}
func (p *GetUserInfoResp) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *GetUserInfoResp) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *GetUserInfoResp) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}

func (p *GetUserInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResp(%+v)", *p)
}

var fieldIDToName_GetUserInfoResp = map[int16]string{
	1: "user_id",
	2: "user_email",
	3: "user_name",
	4: "user_type",
	5: "company_id",
	6: "company_name",
	7: "company_code",
	8: "company_type",
}

type GetCompanyAllListReq struct {
}

func NewGetCompanyAllListReq() *GetCompanyAllListReq {
	return &GetCompanyAllListReq{}
}

func (p *GetCompanyAllListReq) InitDefault() {
}

func (p *GetCompanyAllListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompanyAllListReq(%+v)", *p)
}

var fieldIDToName_GetCompanyAllListReq = map[int16]string{}

type GetCompanyAllListResp struct {
	CompanyList []*Company `thrift:"company_list,1,required" frugal:"1,required,list<Company>" json:"company_list"`
}

func NewGetCompanyAllListResp() *GetCompanyAllListResp {
	return &GetCompanyAllListResp{}
}

func (p *GetCompanyAllListResp) InitDefault() {
}

func (p *GetCompanyAllListResp) GetCompanyList() (v []*Company) {
	return p.CompanyList
}
func (p *GetCompanyAllListResp) SetCompanyList(val []*Company) {
	p.CompanyList = val
}

func (p *GetCompanyAllListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompanyAllListResp(%+v)", *p)
}

var fieldIDToName_GetCompanyAllListResp = map[int16]string{
	1: "company_list",
}

type CreateEblReq struct {
	Ebl   *Ebl   `thrift:"ebl,1,required" frugal:"1,required,Ebl" json:"ebl"`
	Token string `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewCreateEblReq() *CreateEblReq {
	return &CreateEblReq{}
}

func (p *CreateEblReq) InitDefault() {
}

var CreateEblReq_Ebl_DEFAULT *Ebl

func (p *CreateEblReq) GetEbl() (v *Ebl) {
	if !p.IsSetEbl() {
		return CreateEblReq_Ebl_DEFAULT
	}
	return p.Ebl
}

func (p *CreateEblReq) GetToken() (v string) {
	return p.Token
}
func (p *CreateEblReq) SetEbl(val *Ebl) {
	p.Ebl = val
}
func (p *CreateEblReq) SetToken(val string) {
	p.Token = val
}

func (p *CreateEblReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *CreateEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblReq(%+v)", *p)
}

var fieldIDToName_CreateEblReq = map[int16]string{
	1: "ebl",
	2: "token",
}

type CreateEblResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateEblResp() *CreateEblResp {
	return &CreateEblResp{}
}

func (p *CreateEblResp) InitDefault() {
}

func (p *CreateEblResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateEblResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblResp(%+v)", *p)
}

var fieldIDToName_CreateEblResp = map[int16]string{
	1: "id",
}

type QueryAllEblListReq struct {
	Token    string  `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Bookmark *string `thrift:"bookmark,3,optional" frugal:"3,optional,string" json:"bookmark,omitempty"`
}

func NewQueryAllEblListReq() *QueryAllEblListReq {
	return &QueryAllEblListReq{}
}

func (p *QueryAllEblListReq) InitDefault() {
}

func (p *QueryAllEblListReq) GetToken() (v string) {
	return p.Token
}

var QueryAllEblListReq_PageSize_DEFAULT int64

func (p *QueryAllEblListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return QueryAllEblListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var QueryAllEblListReq_Bookmark_DEFAULT string

func (p *QueryAllEblListReq) GetBookmark() (v string) {
	if !p.IsSetBookmark() {
		return QueryAllEblListReq_Bookmark_DEFAULT
	}
	return *p.Bookmark
}
func (p *QueryAllEblListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryAllEblListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *QueryAllEblListReq) SetBookmark(val *string) {
	p.Bookmark = val
}

func (p *QueryAllEblListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *QueryAllEblListReq) IsSetBookmark() bool {
	return p.Bookmark != nil
}

func (p *QueryAllEblListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllEblListReq(%+v)", *p)
}

var fieldIDToName_QueryAllEblListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "bookmark",
}

type QueryAllEblListResp struct {
	EblList             []*EblExtra `thrift:"eblList,1,required" frugal:"1,required,list<EblExtra>" json:"eblList"`
	FetchedRecordsCount int64       `thrift:"fetchedRecordsCount,2,required" frugal:"2,required,i64" json:"fetchedRecordsCount"`
	Bookmark            string      `thrift:"bookmark,3,required" frugal:"3,required,string" json:"bookmark"`
}

func NewQueryAllEblListResp() *QueryAllEblListResp {
	return &QueryAllEblListResp{}
}

func (p *QueryAllEblListResp) InitDefault() {
}

func (p *QueryAllEblListResp) GetEblList() (v []*EblExtra) {
	return p.EblList
}

func (p *QueryAllEblListResp) GetFetchedRecordsCount() (v int64) {
	return p.FetchedRecordsCount
}

func (p *QueryAllEblListResp) GetBookmark() (v string) {
	return p.Bookmark
}
func (p *QueryAllEblListResp) SetEblList(val []*EblExtra) {
	p.EblList = val
}
func (p *QueryAllEblListResp) SetFetchedRecordsCount(val int64) {
	p.FetchedRecordsCount = val
}
func (p *QueryAllEblListResp) SetBookmark(val string) {
	p.Bookmark = val
}

func (p *QueryAllEblListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAllEblListResp(%+v)", *p)
}

var fieldIDToName_QueryAllEblListResp = map[int16]string{
	1: "eblList",
	2: "fetchedRecordsCount",
	3: "bookmark",
}

type QueryEblListReq struct {
	Token     string       `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize  *int64       `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Bookmark  *string      `thrift:"bookmark,3,optional" frugal:"3,optional,string" json:"bookmark,omitempty"`
	EblFilter *EblFilter   `thrift:"eblFilter,4,required" frugal:"4,required,EblFilter" json:"eblFilter"`
	Type      QueryEblType `thrift:"type,5,required" frugal:"5,required,QueryEblType" json:"type"`
}

func NewQueryEblListReq() *QueryEblListReq {
	return &QueryEblListReq{}
}

func (p *QueryEblListReq) InitDefault() {
}

func (p *QueryEblListReq) GetToken() (v string) {
	return p.Token
}

var QueryEblListReq_PageSize_DEFAULT int64

func (p *QueryEblListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return QueryEblListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var QueryEblListReq_Bookmark_DEFAULT string

func (p *QueryEblListReq) GetBookmark() (v string) {
	if !p.IsSetBookmark() {
		return QueryEblListReq_Bookmark_DEFAULT
	}
	return *p.Bookmark
}

var QueryEblListReq_EblFilter_DEFAULT *EblFilter

func (p *QueryEblListReq) GetEblFilter() (v *EblFilter) {
	if !p.IsSetEblFilter() {
		return QueryEblListReq_EblFilter_DEFAULT
	}
	return p.EblFilter
}

func (p *QueryEblListReq) GetType() (v QueryEblType) {
	return p.Type
}
func (p *QueryEblListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryEblListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *QueryEblListReq) SetBookmark(val *string) {
	p.Bookmark = val
}
func (p *QueryEblListReq) SetEblFilter(val *EblFilter) {
	p.EblFilter = val
}
func (p *QueryEblListReq) SetType(val QueryEblType) {
	p.Type = val
}

func (p *QueryEblListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *QueryEblListReq) IsSetBookmark() bool {
	return p.Bookmark != nil
}

func (p *QueryEblListReq) IsSetEblFilter() bool {
	return p.EblFilter != nil
}

func (p *QueryEblListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblListReq(%+v)", *p)
}

var fieldIDToName_QueryEblListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "bookmark",
	4: "eblFilter",
	5: "type",
}

type QueryEblListResp struct {
	EblList             []*EblExtra `thrift:"eblList,1,required" frugal:"1,required,list<EblExtra>" json:"eblList"`
	FetchedRecordsCount int64       `thrift:"fetchedRecordsCount,2,required" frugal:"2,required,i64" json:"fetchedRecordsCount"`
	Bookmark            string      `thrift:"bookmark,3,required" frugal:"3,required,string" json:"bookmark"`
}

func NewQueryEblListResp() *QueryEblListResp {
	return &QueryEblListResp{}
}

func (p *QueryEblListResp) InitDefault() {
}

func (p *QueryEblListResp) GetEblList() (v []*EblExtra) {
	return p.EblList
}

func (p *QueryEblListResp) GetFetchedRecordsCount() (v int64) {
	return p.FetchedRecordsCount
}

func (p *QueryEblListResp) GetBookmark() (v string) {
	return p.Bookmark
}
func (p *QueryEblListResp) SetEblList(val []*EblExtra) {
	p.EblList = val
}
func (p *QueryEblListResp) SetFetchedRecordsCount(val int64) {
	p.FetchedRecordsCount = val
}
func (p *QueryEblListResp) SetBookmark(val string) {
	p.Bookmark = val
}

func (p *QueryEblListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblListResp(%+v)", *p)
}

var fieldIDToName_QueryEblListResp = map[int16]string{
	1: "eblList",
	2: "fetchedRecordsCount",
	3: "bookmark",
}

type QueryEblTransferLogReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	EblNo string `thrift:"eblNo,2,required" frugal:"2,required,string" json:"eblNo"`
}

func NewQueryEblTransferLogReq() *QueryEblTransferLogReq {
	return &QueryEblTransferLogReq{}
}

func (p *QueryEblTransferLogReq) InitDefault() {
}

func (p *QueryEblTransferLogReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryEblTransferLogReq) GetEblNo() (v string) {
	return p.EblNo
}
func (p *QueryEblTransferLogReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryEblTransferLogReq) SetEblNo(val string) {
	p.EblNo = val
}

func (p *QueryEblTransferLogReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblTransferLogReq(%+v)", *p)
}

var fieldIDToName_QueryEblTransferLogReq = map[int16]string{
	1: "token",
	2: "eblNo",
}

type QueryEblTransferLogResp struct {
	EblTransferLogList []*EblTransferLog `thrift:"eblTransferLogList,1,required" frugal:"1,required,list<EblTransferLog>" json:"eblTransferLogList"`
}

func NewQueryEblTransferLogResp() *QueryEblTransferLogResp {
	return &QueryEblTransferLogResp{}
}

func (p *QueryEblTransferLogResp) InitDefault() {
}

func (p *QueryEblTransferLogResp) GetEblTransferLogList() (v []*EblTransferLog) {
	return p.EblTransferLogList
}
func (p *QueryEblTransferLogResp) SetEblTransferLogList(val []*EblTransferLog) {
	p.EblTransferLogList = val
}

func (p *QueryEblTransferLogResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblTransferLogResp(%+v)", *p)
}

var fieldIDToName_QueryEblTransferLogResp = map[int16]string{
	1: "eblTransferLogList",
}

type OperateEblReq struct {
	Token             string        `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	EblNo             string        `thrift:"eblNo,2,required" frugal:"2,required,string" json:"eblNo"`
	Type              OperationType `thrift:"type,3,required" frugal:"3,required,OperationType" json:"type"`
	SealId            *int64        `thrift:"sealId,4,optional" frugal:"4,optional,i64" json:"sealId,omitempty"`
	TransferCompanyId *int64        `thrift:"transferCompanyId,5,optional" frugal:"5,optional,i64" json:"transferCompanyId,omitempty"`
}

func NewOperateEblReq() *OperateEblReq {
	return &OperateEblReq{}
}

func (p *OperateEblReq) InitDefault() {
}

func (p *OperateEblReq) GetToken() (v string) {
	return p.Token
}

func (p *OperateEblReq) GetEblNo() (v string) {
	return p.EblNo
}

func (p *OperateEblReq) GetType() (v OperationType) {
	return p.Type
}

var OperateEblReq_SealId_DEFAULT int64

func (p *OperateEblReq) GetSealId() (v int64) {
	if !p.IsSetSealId() {
		return OperateEblReq_SealId_DEFAULT
	}
	return *p.SealId
}

var OperateEblReq_TransferCompanyId_DEFAULT int64

func (p *OperateEblReq) GetTransferCompanyId() (v int64) {
	if !p.IsSetTransferCompanyId() {
		return OperateEblReq_TransferCompanyId_DEFAULT
	}
	return *p.TransferCompanyId
}
func (p *OperateEblReq) SetToken(val string) {
	p.Token = val
}
func (p *OperateEblReq) SetEblNo(val string) {
	p.EblNo = val
}
func (p *OperateEblReq) SetType(val OperationType) {
	p.Type = val
}
func (p *OperateEblReq) SetSealId(val *int64) {
	p.SealId = val
}
func (p *OperateEblReq) SetTransferCompanyId(val *int64) {
	p.TransferCompanyId = val
}

func (p *OperateEblReq) IsSetSealId() bool {
	return p.SealId != nil
}

func (p *OperateEblReq) IsSetTransferCompanyId() bool {
	return p.TransferCompanyId != nil
}

func (p *OperateEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateEblReq(%+v)", *p)
}

var fieldIDToName_OperateEblReq = map[int16]string{
	1: "token",
	2: "eblNo",
	3: "type",
	4: "sealId",
	5: "transferCompanyId",
}

type OperateEblResp struct {
}

func NewOperateEblResp() *OperateEblResp {
	return &OperateEblResp{}
}

func (p *OperateEblResp) InitDefault() {
}

func (p *OperateEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateEblResp(%+v)", *p)
}

var fieldIDToName_OperateEblResp = map[int16]string{}

type QueryEblDetailReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	EblNo string `thrift:"eblNo,2,required" frugal:"2,required,string" json:"eblNo"`
}

func NewQueryEblDetailReq() *QueryEblDetailReq {
	return &QueryEblDetailReq{}
}

func (p *QueryEblDetailReq) InitDefault() {
}

func (p *QueryEblDetailReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryEblDetailReq) GetEblNo() (v string) {
	return p.EblNo
}
func (p *QueryEblDetailReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryEblDetailReq) SetEblNo(val string) {
	p.EblNo = val
}

func (p *QueryEblDetailReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblDetailReq(%+v)", *p)
}

var fieldIDToName_QueryEblDetailReq = map[int16]string{
	1: "token",
	2: "eblNo",
}

type QueryEblDetailResp struct {
	Ebl *EblExtra `thrift:"ebl,1,required" frugal:"1,required,EblExtra" json:"ebl"`
}

func NewQueryEblDetailResp() *QueryEblDetailResp {
	return &QueryEblDetailResp{}
}

func (p *QueryEblDetailResp) InitDefault() {
}

var QueryEblDetailResp_Ebl_DEFAULT *EblExtra

func (p *QueryEblDetailResp) GetEbl() (v *EblExtra) {
	if !p.IsSetEbl() {
		return QueryEblDetailResp_Ebl_DEFAULT
	}
	return p.Ebl
}
func (p *QueryEblDetailResp) SetEbl(val *EblExtra) {
	p.Ebl = val
}

func (p *QueryEblDetailResp) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *QueryEblDetailResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryEblDetailResp(%+v)", *p)
}

var fieldIDToName_QueryEblDetailResp = map[int16]string{
	1: "ebl",
}

type UploadSealReq struct {
	Token          string       `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Seal           *CompanySeal `thrift:"seal,2,required" frugal:"2,required,CompanySeal" json:"seal"`
	OriginFileName string       `thrift:"originFileName,3,required" frugal:"3,required,string" json:"originFileName"`
}

func NewUploadSealReq() *UploadSealReq {
	return &UploadSealReq{}
}

func (p *UploadSealReq) InitDefault() {
}

func (p *UploadSealReq) GetToken() (v string) {
	return p.Token
}

var UploadSealReq_Seal_DEFAULT *CompanySeal

func (p *UploadSealReq) GetSeal() (v *CompanySeal) {
	if !p.IsSetSeal() {
		return UploadSealReq_Seal_DEFAULT
	}
	return p.Seal
}

func (p *UploadSealReq) GetOriginFileName() (v string) {
	return p.OriginFileName
}
func (p *UploadSealReq) SetToken(val string) {
	p.Token = val
}
func (p *UploadSealReq) SetSeal(val *CompanySeal) {
	p.Seal = val
}
func (p *UploadSealReq) SetOriginFileName(val string) {
	p.OriginFileName = val
}

func (p *UploadSealReq) IsSetSeal() bool {
	return p.Seal != nil
}

func (p *UploadSealReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadSealReq(%+v)", *p)
}

var fieldIDToName_UploadSealReq = map[int16]string{
	1: "token",
	2: "seal",
	3: "originFileName",
}

type CompanySeal struct {
	Id        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name      string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Seal      []int8 `thrift:"seal,3,required" frugal:"3,required,list<byte>" json:"seal"`
	Url       string `thrift:"url,4,required" frugal:"4,required,string" json:"url"`
	CreatedAt *int64 `thrift:"created_at,5,optional" frugal:"5,optional,i64" json:"created_at,omitempty"`
	UpdatedAt *int64 `thrift:"updated_at,6,optional" frugal:"6,optional,i64" json:"updated_at,omitempty"`
	DeletedAt *int64 `thrift:"deleted_at,7,optional" frugal:"7,optional,i64" json:"deleted_at,omitempty"`
	CompanyId int64  `thrift:"company_id,8,required" frugal:"8,required,i64" json:"company_id"`
}

func NewCompanySeal() *CompanySeal {
	return &CompanySeal{}
}

func (p *CompanySeal) InitDefault() {
}

func (p *CompanySeal) GetId() (v int64) {
	return p.Id
}

func (p *CompanySeal) GetName() (v string) {
	return p.Name
}

func (p *CompanySeal) GetSeal() (v []int8) {
	return p.Seal
}

func (p *CompanySeal) GetUrl() (v string) {
	return p.Url
}

var CompanySeal_CreatedAt_DEFAULT int64

func (p *CompanySeal) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return CompanySeal_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var CompanySeal_UpdatedAt_DEFAULT int64

func (p *CompanySeal) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return CompanySeal_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var CompanySeal_DeletedAt_DEFAULT int64

func (p *CompanySeal) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return CompanySeal_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

func (p *CompanySeal) GetCompanyId() (v int64) {
	return p.CompanyId
}
func (p *CompanySeal) SetId(val int64) {
	p.Id = val
}
func (p *CompanySeal) SetName(val string) {
	p.Name = val
}
func (p *CompanySeal) SetSeal(val []int8) {
	p.Seal = val
}
func (p *CompanySeal) SetUrl(val string) {
	p.Url = val
}
func (p *CompanySeal) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *CompanySeal) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *CompanySeal) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}
func (p *CompanySeal) SetCompanyId(val int64) {
	p.CompanyId = val
}

func (p *CompanySeal) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *CompanySeal) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *CompanySeal) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *CompanySeal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanySeal(%+v)", *p)
}

var fieldIDToName_CompanySeal = map[int16]string{
	1: "id",
	2: "name",
	3: "seal",
	4: "url",
	5: "created_at",
	6: "updated_at",
	7: "deleted_at",
	8: "company_id",
}

type UploadSealResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewUploadSealResp() *UploadSealResp {
	return &UploadSealResp{}
}

func (p *UploadSealResp) InitDefault() {
}

func (p *UploadSealResp) GetId() (v int64) {
	return p.Id
}
func (p *UploadSealResp) SetId(val int64) {
	p.Id = val
}

func (p *UploadSealResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadSealResp(%+v)", *p)
}

var fieldIDToName_UploadSealResp = map[int16]string{
	1: "id",
}

type QuerySealReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewQuerySealReq() *QuerySealReq {
	return &QuerySealReq{}
}

func (p *QuerySealReq) InitDefault() {
}

func (p *QuerySealReq) GetToken() (v string) {
	return p.Token
}
func (p *QuerySealReq) SetToken(val string) {
	p.Token = val
}

func (p *QuerySealReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuerySealReq(%+v)", *p)
}

var fieldIDToName_QuerySealReq = map[int16]string{
	1: "token",
}

type QuerySealResp struct {
	Seal []*CompanySeal `thrift:"seal,1,required" frugal:"1,required,list<CompanySeal>" json:"seal"`
}

func NewQuerySealResp() *QuerySealResp {
	return &QuerySealResp{}
}

func (p *QuerySealResp) InitDefault() {
}

func (p *QuerySealResp) GetSeal() (v []*CompanySeal) {
	return p.Seal
}
func (p *QuerySealResp) SetSeal(val []*CompanySeal) {
	p.Seal = val
}

func (p *QuerySealResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuerySealResp(%+v)", *p)
}

var fieldIDToName_QuerySealResp = map[int16]string{
	1: "seal",
}

type DeleteSealReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewDeleteSealReq() *DeleteSealReq {
	return &DeleteSealReq{}
}

func (p *DeleteSealReq) InitDefault() {
}

func (p *DeleteSealReq) GetToken() (v string) {
	return p.Token
}

func (p *DeleteSealReq) GetId() (v int64) {
	return p.Id
}
func (p *DeleteSealReq) SetToken(val string) {
	p.Token = val
}
func (p *DeleteSealReq) SetId(val int64) {
	p.Id = val
}

func (p *DeleteSealReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSealReq(%+v)", *p)
}

var fieldIDToName_DeleteSealReq = map[int16]string{
	1: "token",
	2: "id",
}

type DeleteSealResp struct {
}

func NewDeleteSealResp() *DeleteSealResp {
	return &DeleteSealResp{}
}

func (p *DeleteSealResp) InitDefault() {
}

func (p *DeleteSealResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSealResp(%+v)", *p)
}

var fieldIDToName_DeleteSealResp = map[int16]string{}

type CheckTokenReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewCheckTokenReq() *CheckTokenReq {
	return &CheckTokenReq{}
}

func (p *CheckTokenReq) InitDefault() {
}

func (p *CheckTokenReq) GetToken() (v string) {
	return p.Token
}
func (p *CheckTokenReq) SetToken(val string) {
	p.Token = val
}

func (p *CheckTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckTokenReq(%+v)", *p)
}

var fieldIDToName_CheckTokenReq = map[int16]string{
	1: "token",
}

type CheckTokenResp struct {
	Valid bool `thrift:"valid,1,required" frugal:"1,required,bool" json:"valid"`
}

func NewCheckTokenResp() *CheckTokenResp {
	return &CheckTokenResp{}
}

func (p *CheckTokenResp) InitDefault() {
}

func (p *CheckTokenResp) GetValid() (v bool) {
	return p.Valid
}
func (p *CheckTokenResp) SetValid(val bool) {
	p.Valid = val
}

func (p *CheckTokenResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckTokenResp(%+v)", *p)
}

var fieldIDToName_CheckTokenResp = map[int16]string{
	1: "valid",
}

type CreateInvoiceReq struct {
	Token   string   `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Invoice *Invoice `thrift:"invoice,2,required" frugal:"2,required,Invoice" json:"invoice"`
}

func NewCreateInvoiceReq() *CreateInvoiceReq {
	return &CreateInvoiceReq{}
}

func (p *CreateInvoiceReq) InitDefault() {
}

func (p *CreateInvoiceReq) GetToken() (v string) {
	return p.Token
}

var CreateInvoiceReq_Invoice_DEFAULT *Invoice

func (p *CreateInvoiceReq) GetInvoice() (v *Invoice) {
	if !p.IsSetInvoice() {
		return CreateInvoiceReq_Invoice_DEFAULT
	}
	return p.Invoice
}
func (p *CreateInvoiceReq) SetToken(val string) {
	p.Token = val
}
func (p *CreateInvoiceReq) SetInvoice(val *Invoice) {
	p.Invoice = val
}

func (p *CreateInvoiceReq) IsSetInvoice() bool {
	return p.Invoice != nil
}

func (p *CreateInvoiceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateInvoiceReq(%+v)", *p)
}

var fieldIDToName_CreateInvoiceReq = map[int16]string{
	1: "token",
	2: "invoice",
}

type CreateInvoiceResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateInvoiceResp() *CreateInvoiceResp {
	return &CreateInvoiceResp{}
}

func (p *CreateInvoiceResp) InitDefault() {
}

func (p *CreateInvoiceResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateInvoiceResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateInvoiceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateInvoiceResp(%+v)", *p)
}

var fieldIDToName_CreateInvoiceResp = map[int16]string{
	1: "id",
}

type CreateContractReq struct {
	Token    string    `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Contract *Contract `thrift:"contract,2,required" frugal:"2,required,Contract" json:"contract"`
}

func NewCreateContractReq() *CreateContractReq {
	return &CreateContractReq{}
}

func (p *CreateContractReq) InitDefault() {
}

func (p *CreateContractReq) GetToken() (v string) {
	return p.Token
}

var CreateContractReq_Contract_DEFAULT *Contract

func (p *CreateContractReq) GetContract() (v *Contract) {
	if !p.IsSetContract() {
		return CreateContractReq_Contract_DEFAULT
	}
	return p.Contract
}
func (p *CreateContractReq) SetToken(val string) {
	p.Token = val
}
func (p *CreateContractReq) SetContract(val *Contract) {
	p.Contract = val
}

func (p *CreateContractReq) IsSetContract() bool {
	return p.Contract != nil
}

func (p *CreateContractReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateContractReq(%+v)", *p)
}

var fieldIDToName_CreateContractReq = map[int16]string{
	1: "token",
	2: "contract",
}

type CreateContractResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateContractResp() *CreateContractResp {
	return &CreateContractResp{}
}

func (p *CreateContractResp) InitDefault() {
}

func (p *CreateContractResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateContractResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateContractResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateContractResp(%+v)", *p)
}

var fieldIDToName_CreateContractResp = map[int16]string{
	1: "id",
}

type CreateDocumentReq struct {
	Token    string    `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Document *Document `thrift:"document,2,required" frugal:"2,required,Document" json:"document"`
}

func NewCreateDocumentReq() *CreateDocumentReq {
	return &CreateDocumentReq{}
}

func (p *CreateDocumentReq) InitDefault() {
}

func (p *CreateDocumentReq) GetToken() (v string) {
	return p.Token
}

var CreateDocumentReq_Document_DEFAULT *Document

func (p *CreateDocumentReq) GetDocument() (v *Document) {
	if !p.IsSetDocument() {
		return CreateDocumentReq_Document_DEFAULT
	}
	return p.Document
}
func (p *CreateDocumentReq) SetToken(val string) {
	p.Token = val
}
func (p *CreateDocumentReq) SetDocument(val *Document) {
	p.Document = val
}

func (p *CreateDocumentReq) IsSetDocument() bool {
	return p.Document != nil
}

func (p *CreateDocumentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDocumentReq(%+v)", *p)
}

var fieldIDToName_CreateDocumentReq = map[int16]string{
	1: "token",
	2: "document",
}

type CreateDocumentResp struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewCreateDocumentResp() *CreateDocumentResp {
	return &CreateDocumentResp{}
}

func (p *CreateDocumentResp) InitDefault() {
}

func (p *CreateDocumentResp) GetId() (v int64) {
	return p.Id
}
func (p *CreateDocumentResp) SetId(val int64) {
	p.Id = val
}

func (p *CreateDocumentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDocumentResp(%+v)", *p)
}

var fieldIDToName_CreateDocumentResp = map[int16]string{
	1: "id",
}

type QueryInvoiceListReq struct {
	Token    string         `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64          `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64          `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
	Invoice  *InvoiceFilter `thrift:"invoice,4,required" frugal:"4,required,InvoiceFilter" json:"invoice"`
}

func NewQueryInvoiceListReq() *QueryInvoiceListReq {
	return &QueryInvoiceListReq{}
}

func (p *QueryInvoiceListReq) InitDefault() {
}

func (p *QueryInvoiceListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryInvoiceListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryInvoiceListReq) GetPageNum() (v int64) {
	return p.PageNum
}

var QueryInvoiceListReq_Invoice_DEFAULT *InvoiceFilter

func (p *QueryInvoiceListReq) GetInvoice() (v *InvoiceFilter) {
	if !p.IsSetInvoice() {
		return QueryInvoiceListReq_Invoice_DEFAULT
	}
	return p.Invoice
}
func (p *QueryInvoiceListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryInvoiceListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryInvoiceListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryInvoiceListReq) SetInvoice(val *InvoiceFilter) {
	p.Invoice = val
}

func (p *QueryInvoiceListReq) IsSetInvoice() bool {
	return p.Invoice != nil
}

func (p *QueryInvoiceListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryInvoiceListReq(%+v)", *p)
}

var fieldIDToName_QueryInvoiceListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
	4: "invoice",
}

type QueryInvoiceListResp struct {
	InvoiceList []*Invoice `thrift:"invoiceList,1,required" frugal:"1,required,list<Invoice>" json:"invoiceList"`
	Total       int64      `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryInvoiceListResp() *QueryInvoiceListResp {
	return &QueryInvoiceListResp{}
}

func (p *QueryInvoiceListResp) InitDefault() {
}

func (p *QueryInvoiceListResp) GetInvoiceList() (v []*Invoice) {
	return p.InvoiceList
}

func (p *QueryInvoiceListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryInvoiceListResp) SetInvoiceList(val []*Invoice) {
	p.InvoiceList = val
}
func (p *QueryInvoiceListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryInvoiceListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryInvoiceListResp(%+v)", *p)
}

var fieldIDToName_QueryInvoiceListResp = map[int16]string{
	1: "invoiceList",
	2: "total",
}

type QueryContractListReq struct {
	Token    string          `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64           `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64           `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
	Contract *ContractFilter `thrift:"contract,4,optional" frugal:"4,optional,ContractFilter" json:"contract,omitempty"`
}

func NewQueryContractListReq() *QueryContractListReq {
	return &QueryContractListReq{}
}

func (p *QueryContractListReq) InitDefault() {
}

func (p *QueryContractListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryContractListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryContractListReq) GetPageNum() (v int64) {
	return p.PageNum
}

var QueryContractListReq_Contract_DEFAULT *ContractFilter

func (p *QueryContractListReq) GetContract() (v *ContractFilter) {
	if !p.IsSetContract() {
		return QueryContractListReq_Contract_DEFAULT
	}
	return p.Contract
}
func (p *QueryContractListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryContractListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryContractListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryContractListReq) SetContract(val *ContractFilter) {
	p.Contract = val
}

func (p *QueryContractListReq) IsSetContract() bool {
	return p.Contract != nil
}

func (p *QueryContractListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryContractListReq(%+v)", *p)
}

var fieldIDToName_QueryContractListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
	4: "contract",
}

type QueryContractListResp struct {
	ContractList []*Contract `thrift:"contractList,1,required" frugal:"1,required,list<Contract>" json:"contractList"`
	Total        int64       `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryContractListResp() *QueryContractListResp {
	return &QueryContractListResp{}
}

func (p *QueryContractListResp) InitDefault() {
}

func (p *QueryContractListResp) GetContractList() (v []*Contract) {
	return p.ContractList
}

func (p *QueryContractListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryContractListResp) SetContractList(val []*Contract) {
	p.ContractList = val
}
func (p *QueryContractListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryContractListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryContractListResp(%+v)", *p)
}

var fieldIDToName_QueryContractListResp = map[int16]string{
	1: "contractList",
	2: "total",
}

type QueryDocumentListReq struct {
	Token    string          `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	PageSize int64           `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
	PageNum  int64           `thrift:"pageNum,3,required" frugal:"3,required,i64" json:"pageNum"`
	Document *DocumentFilter `thrift:"document,4,optional" frugal:"4,optional,DocumentFilter" json:"document,omitempty"`
}

func NewQueryDocumentListReq() *QueryDocumentListReq {
	return &QueryDocumentListReq{}
}

func (p *QueryDocumentListReq) InitDefault() {
}

func (p *QueryDocumentListReq) GetToken() (v string) {
	return p.Token
}

func (p *QueryDocumentListReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryDocumentListReq) GetPageNum() (v int64) {
	return p.PageNum
}

var QueryDocumentListReq_Document_DEFAULT *DocumentFilter

func (p *QueryDocumentListReq) GetDocument() (v *DocumentFilter) {
	if !p.IsSetDocument() {
		return QueryDocumentListReq_Document_DEFAULT
	}
	return p.Document
}
func (p *QueryDocumentListReq) SetToken(val string) {
	p.Token = val
}
func (p *QueryDocumentListReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryDocumentListReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryDocumentListReq) SetDocument(val *DocumentFilter) {
	p.Document = val
}

func (p *QueryDocumentListReq) IsSetDocument() bool {
	return p.Document != nil
}

func (p *QueryDocumentListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDocumentListReq(%+v)", *p)
}

var fieldIDToName_QueryDocumentListReq = map[int16]string{
	1: "token",
	2: "pageSize",
	3: "pageNum",
	4: "document",
}

type QueryDocumentListResp struct {
	DocumentList []*Document `thrift:"documentList,1,required" frugal:"1,required,list<Document>" json:"documentList"`
	Total        int64       `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
}

func NewQueryDocumentListResp() *QueryDocumentListResp {
	return &QueryDocumentListResp{}
}

func (p *QueryDocumentListResp) InitDefault() {
}

func (p *QueryDocumentListResp) GetDocumentList() (v []*Document) {
	return p.DocumentList
}

func (p *QueryDocumentListResp) GetTotal() (v int64) {
	return p.Total
}
func (p *QueryDocumentListResp) SetDocumentList(val []*Document) {
	p.DocumentList = val
}
func (p *QueryDocumentListResp) SetTotal(val int64) {
	p.Total = val
}

func (p *QueryDocumentListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDocumentListResp(%+v)", *p)
}

var fieldIDToName_QueryDocumentListResp = map[int16]string{
	1: "documentList",
	2: "total",
}

type GetInvoiceReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewGetInvoiceReq() *GetInvoiceReq {
	return &GetInvoiceReq{}
}

func (p *GetInvoiceReq) InitDefault() {
}

func (p *GetInvoiceReq) GetToken() (v string) {
	return p.Token
}

func (p *GetInvoiceReq) GetId() (v int64) {
	return p.Id
}
func (p *GetInvoiceReq) SetToken(val string) {
	p.Token = val
}
func (p *GetInvoiceReq) SetId(val int64) {
	p.Id = val
}

func (p *GetInvoiceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInvoiceReq(%+v)", *p)
}

var fieldIDToName_GetInvoiceReq = map[int16]string{
	1: "token",
	2: "id",
}

type GetInvoiceResp struct {
	Invoice *Invoice `thrift:"invoice,1,required" frugal:"1,required,Invoice" json:"invoice"`
}

func NewGetInvoiceResp() *GetInvoiceResp {
	return &GetInvoiceResp{}
}

func (p *GetInvoiceResp) InitDefault() {
}

var GetInvoiceResp_Invoice_DEFAULT *Invoice

func (p *GetInvoiceResp) GetInvoice() (v *Invoice) {
	if !p.IsSetInvoice() {
		return GetInvoiceResp_Invoice_DEFAULT
	}
	return p.Invoice
}
func (p *GetInvoiceResp) SetInvoice(val *Invoice) {
	p.Invoice = val
}

func (p *GetInvoiceResp) IsSetInvoice() bool {
	return p.Invoice != nil
}

func (p *GetInvoiceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInvoiceResp(%+v)", *p)
}

var fieldIDToName_GetInvoiceResp = map[int16]string{
	1: "invoice",
}

type GetContractReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewGetContractReq() *GetContractReq {
	return &GetContractReq{}
}

func (p *GetContractReq) InitDefault() {
}

func (p *GetContractReq) GetToken() (v string) {
	return p.Token
}

func (p *GetContractReq) GetId() (v int64) {
	return p.Id
}
func (p *GetContractReq) SetToken(val string) {
	p.Token = val
}
func (p *GetContractReq) SetId(val int64) {
	p.Id = val
}

func (p *GetContractReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContractReq(%+v)", *p)
}

var fieldIDToName_GetContractReq = map[int16]string{
	1: "token",
	2: "id",
}

type GetContractResp struct {
	Contract *Contract `thrift:"contract,1,required" frugal:"1,required,Contract" json:"contract"`
}

func NewGetContractResp() *GetContractResp {
	return &GetContractResp{}
}

func (p *GetContractResp) InitDefault() {
}

var GetContractResp_Contract_DEFAULT *Contract

func (p *GetContractResp) GetContract() (v *Contract) {
	if !p.IsSetContract() {
		return GetContractResp_Contract_DEFAULT
	}
	return p.Contract
}
func (p *GetContractResp) SetContract(val *Contract) {
	p.Contract = val
}

func (p *GetContractResp) IsSetContract() bool {
	return p.Contract != nil
}

func (p *GetContractResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContractResp(%+v)", *p)
}

var fieldIDToName_GetContractResp = map[int16]string{
	1: "contract",
}

type GetDocumentReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Id    int64  `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewGetDocumentReq() *GetDocumentReq {
	return &GetDocumentReq{}
}

func (p *GetDocumentReq) InitDefault() {
}

func (p *GetDocumentReq) GetToken() (v string) {
	return p.Token
}

func (p *GetDocumentReq) GetId() (v int64) {
	return p.Id
}
func (p *GetDocumentReq) SetToken(val string) {
	p.Token = val
}
func (p *GetDocumentReq) SetId(val int64) {
	p.Id = val
}

func (p *GetDocumentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDocumentReq(%+v)", *p)
}

var fieldIDToName_GetDocumentReq = map[int16]string{
	1: "token",
	2: "id",
}

type GetDocumentResp struct {
	Document *Document `thrift:"document,1,required" frugal:"1,required,Document" json:"document"`
}

func NewGetDocumentResp() *GetDocumentResp {
	return &GetDocumentResp{}
}

func (p *GetDocumentResp) InitDefault() {
}

var GetDocumentResp_Document_DEFAULT *Document

func (p *GetDocumentResp) GetDocument() (v *Document) {
	if !p.IsSetDocument() {
		return GetDocumentResp_Document_DEFAULT
	}
	return p.Document
}
func (p *GetDocumentResp) SetDocument(val *Document) {
	p.Document = val
}

func (p *GetDocumentResp) IsSetDocument() bool {
	return p.Document != nil
}

func (p *GetDocumentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDocumentResp(%+v)", *p)
}

var fieldIDToName_GetDocumentResp = map[int16]string{
	1: "document",
}

type Invoice struct {
	InvoiceNumber string      `thrift:"InvoiceNumber,1,required" frugal:"1,required,string" json:"InvoiceNumber"`
	Amount        float64     `thrift:"Amount,2,required" frugal:"2,required,double" json:"Amount"`
	IssueDate     int64       `thrift:"IssueDate,3,required" frugal:"3,required,i64" json:"IssueDate"`
	Type          InvoiceType `thrift:"Type,4,required" frugal:"4,required,InvoiceType" json:"Type"`
	FileHash      string      `thrift:"FileHash,5,required" frugal:"5,required,string" json:"FileHash"`
	Extra         *string     `thrift:"extra,6,optional" frugal:"6,optional,string" json:"extra,omitempty"`
	CreatedAt     *int64      `thrift:"CreatedAt,7,optional" frugal:"7,optional,i64" json:"CreatedAt,omitempty"`
	UpdatedAt     *int64      `thrift:"UpdatedAt,8,optional" frugal:"8,optional,i64" json:"UpdatedAt,omitempty"`
	Id            int64       `thrift:"Id,9,required" frugal:"9,required,i64" json:"Id"`
	Name          string      `thrift:"name,10,required" frugal:"10,required,string" json:"name"`
}

func NewInvoice() *Invoice {
	return &Invoice{}
}

func (p *Invoice) InitDefault() {
}

func (p *Invoice) GetInvoiceNumber() (v string) {
	return p.InvoiceNumber
}

func (p *Invoice) GetAmount() (v float64) {
	return p.Amount
}

func (p *Invoice) GetIssueDate() (v int64) {
	return p.IssueDate
}

func (p *Invoice) GetType() (v InvoiceType) {
	return p.Type
}

func (p *Invoice) GetFileHash() (v string) {
	return p.FileHash
}

var Invoice_Extra_DEFAULT string

func (p *Invoice) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Invoice_Extra_DEFAULT
	}
	return *p.Extra
}

var Invoice_CreatedAt_DEFAULT int64

func (p *Invoice) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Invoice_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Invoice_UpdatedAt_DEFAULT int64

func (p *Invoice) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Invoice_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

func (p *Invoice) GetId() (v int64) {
	return p.Id
}

func (p *Invoice) GetName() (v string) {
	return p.Name
}
func (p *Invoice) SetInvoiceNumber(val string) {
	p.InvoiceNumber = val
}
func (p *Invoice) SetAmount(val float64) {
	p.Amount = val
}
func (p *Invoice) SetIssueDate(val int64) {
	p.IssueDate = val
}
func (p *Invoice) SetType(val InvoiceType) {
	p.Type = val
}
func (p *Invoice) SetFileHash(val string) {
	p.FileHash = val
}
func (p *Invoice) SetExtra(val *string) {
	p.Extra = val
}
func (p *Invoice) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Invoice) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Invoice) SetId(val int64) {
	p.Id = val
}
func (p *Invoice) SetName(val string) {
	p.Name = val
}

func (p *Invoice) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Invoice) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Invoice) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Invoice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Invoice(%+v)", *p)
}

var fieldIDToName_Invoice = map[int16]string{
	1:  "InvoiceNumber",
	2:  "Amount",
	3:  "IssueDate",
	4:  "Type",
	5:  "FileHash",
	6:  "extra",
	7:  "CreatedAt",
	8:  "UpdatedAt",
	9:  "Id",
	10: "name",
}

type InvoiceFilter struct {
	InvoiceNumber *string      `thrift:"InvoiceNumber,1,optional" frugal:"1,optional,string" json:"InvoiceNumber,omitempty"`
	Amount        *float64     `thrift:"Amount,2,optional" frugal:"2,optional,double" json:"Amount,omitempty"`
	IssueDate     *int64       `thrift:"IssueDate,3,optional" frugal:"3,optional,i64" json:"IssueDate,omitempty"`
	Type          *InvoiceType `thrift:"Type,4,optional" frugal:"4,optional,InvoiceType" json:"Type,omitempty"`
	FileHash      *string      `thrift:"FileHash,5,optional" frugal:"5,optional,string" json:"FileHash,omitempty"`
	Name          *string      `thrift:"name,6,optional" frugal:"6,optional,string" json:"name,omitempty"`
}

func NewInvoiceFilter() *InvoiceFilter {
	return &InvoiceFilter{}
}

func (p *InvoiceFilter) InitDefault() {
}

var InvoiceFilter_InvoiceNumber_DEFAULT string

func (p *InvoiceFilter) GetInvoiceNumber() (v string) {
	if !p.IsSetInvoiceNumber() {
		return InvoiceFilter_InvoiceNumber_DEFAULT
	}
	return *p.InvoiceNumber
}

var InvoiceFilter_Amount_DEFAULT float64

func (p *InvoiceFilter) GetAmount() (v float64) {
	if !p.IsSetAmount() {
		return InvoiceFilter_Amount_DEFAULT
	}
	return *p.Amount
}

var InvoiceFilter_IssueDate_DEFAULT int64

func (p *InvoiceFilter) GetIssueDate() (v int64) {
	if !p.IsSetIssueDate() {
		return InvoiceFilter_IssueDate_DEFAULT
	}
	return *p.IssueDate
}

var InvoiceFilter_Type_DEFAULT InvoiceType

func (p *InvoiceFilter) GetType() (v InvoiceType) {
	if !p.IsSetType() {
		return InvoiceFilter_Type_DEFAULT
	}
	return *p.Type
}

var InvoiceFilter_FileHash_DEFAULT string

func (p *InvoiceFilter) GetFileHash() (v string) {
	if !p.IsSetFileHash() {
		return InvoiceFilter_FileHash_DEFAULT
	}
	return *p.FileHash
}

var InvoiceFilter_Name_DEFAULT string

func (p *InvoiceFilter) GetName() (v string) {
	if !p.IsSetName() {
		return InvoiceFilter_Name_DEFAULT
	}
	return *p.Name
}
func (p *InvoiceFilter) SetInvoiceNumber(val *string) {
	p.InvoiceNumber = val
}
func (p *InvoiceFilter) SetAmount(val *float64) {
	p.Amount = val
}
func (p *InvoiceFilter) SetIssueDate(val *int64) {
	p.IssueDate = val
}
func (p *InvoiceFilter) SetType(val *InvoiceType) {
	p.Type = val
}
func (p *InvoiceFilter) SetFileHash(val *string) {
	p.FileHash = val
}
func (p *InvoiceFilter) SetName(val *string) {
	p.Name = val
}

func (p *InvoiceFilter) IsSetInvoiceNumber() bool {
	return p.InvoiceNumber != nil
}

func (p *InvoiceFilter) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *InvoiceFilter) IsSetIssueDate() bool {
	return p.IssueDate != nil
}

func (p *InvoiceFilter) IsSetType() bool {
	return p.Type != nil
}

func (p *InvoiceFilter) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *InvoiceFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *InvoiceFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvoiceFilter(%+v)", *p)
}

var fieldIDToName_InvoiceFilter = map[int16]string{
	1: "InvoiceNumber",
	2: "Amount",
	3: "IssueDate",
	4: "Type",
	5: "FileHash",
	6: "name",
}

type Contract struct {
	ContractNumber string         `thrift:"ContractNumber,1,required" frugal:"1,required,string" json:"ContractNumber"`
	SignDate       int64          `thrift:"SignDate,2,required" frugal:"2,required,i64" json:"SignDate"`
	EffectiveDate  int64          `thrift:"EffectiveDate,3,required" frugal:"3,required,i64" json:"EffectiveDate"`
	Amount         float64        `thrift:"Amount,4,required" frugal:"4,required,double" json:"Amount"`
	Status         ContractStatus `thrift:"Status,5,required" frugal:"5,required,ContractStatus" json:"Status"`
	FileHash       string         `thrift:"FileHash,6,required" frugal:"6,required,string" json:"FileHash"`
	Extra          *string        `thrift:"extra,7,optional" frugal:"7,optional,string" json:"extra,omitempty"`
	CreatedAt      *int64         `thrift:"CreatedAt,8,optional" frugal:"8,optional,i64" json:"CreatedAt,omitempty"`
	UpdatedAt      *int64         `thrift:"UpdatedAt,9,optional" frugal:"9,optional,i64" json:"UpdatedAt,omitempty"`
	Id             int64          `thrift:"Id,10,required" frugal:"10,required,i64" json:"Id"`
	Name           string         `thrift:"name,11,required" frugal:"11,required,string" json:"name"`
}

func NewContract() *Contract {
	return &Contract{}
}

func (p *Contract) InitDefault() {
}

func (p *Contract) GetContractNumber() (v string) {
	return p.ContractNumber
}

func (p *Contract) GetSignDate() (v int64) {
	return p.SignDate
}

func (p *Contract) GetEffectiveDate() (v int64) {
	return p.EffectiveDate
}

func (p *Contract) GetAmount() (v float64) {
	return p.Amount
}

func (p *Contract) GetStatus() (v ContractStatus) {
	return p.Status
}

func (p *Contract) GetFileHash() (v string) {
	return p.FileHash
}

var Contract_Extra_DEFAULT string

func (p *Contract) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Contract_Extra_DEFAULT
	}
	return *p.Extra
}

var Contract_CreatedAt_DEFAULT int64

func (p *Contract) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Contract_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Contract_UpdatedAt_DEFAULT int64

func (p *Contract) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Contract_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

func (p *Contract) GetId() (v int64) {
	return p.Id
}

func (p *Contract) GetName() (v string) {
	return p.Name
}
func (p *Contract) SetContractNumber(val string) {
	p.ContractNumber = val
}
func (p *Contract) SetSignDate(val int64) {
	p.SignDate = val
}
func (p *Contract) SetEffectiveDate(val int64) {
	p.EffectiveDate = val
}
func (p *Contract) SetAmount(val float64) {
	p.Amount = val
}
func (p *Contract) SetStatus(val ContractStatus) {
	p.Status = val
}
func (p *Contract) SetFileHash(val string) {
	p.FileHash = val
}
func (p *Contract) SetExtra(val *string) {
	p.Extra = val
}
func (p *Contract) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Contract) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Contract) SetId(val int64) {
	p.Id = val
}
func (p *Contract) SetName(val string) {
	p.Name = val
}

func (p *Contract) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Contract) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Contract) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Contract) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contract(%+v)", *p)
}

var fieldIDToName_Contract = map[int16]string{
	1:  "ContractNumber",
	2:  "SignDate",
	3:  "EffectiveDate",
	4:  "Amount",
	5:  "Status",
	6:  "FileHash",
	7:  "extra",
	8:  "CreatedAt",
	9:  "UpdatedAt",
	10: "Id",
	11: "name",
}

type ContractFilter struct {
	ContractNumber *string         `thrift:"ContractNumber,1,optional" frugal:"1,optional,string" json:"ContractNumber,omitempty"`
	SignDate       *int64          `thrift:"SignDate,2,optional" frugal:"2,optional,i64" json:"SignDate,omitempty"`
	EffectiveDate  *int64          `thrift:"EffectiveDate,3,optional" frugal:"3,optional,i64" json:"EffectiveDate,omitempty"`
	Amount         *float64        `thrift:"Amount,4,optional" frugal:"4,optional,double" json:"Amount,omitempty"`
	Status         *ContractStatus `thrift:"Status,5,optional" frugal:"5,optional,ContractStatus" json:"Status,omitempty"`
	FileHash       *string         `thrift:"FileHash,6,optional" frugal:"6,optional,string" json:"FileHash,omitempty"`
	Name           *string         `thrift:"name,7,optional" frugal:"7,optional,string" json:"name,omitempty"`
}

func NewContractFilter() *ContractFilter {
	return &ContractFilter{}
}

func (p *ContractFilter) InitDefault() {
}

var ContractFilter_ContractNumber_DEFAULT string

func (p *ContractFilter) GetContractNumber() (v string) {
	if !p.IsSetContractNumber() {
		return ContractFilter_ContractNumber_DEFAULT
	}
	return *p.ContractNumber
}

var ContractFilter_SignDate_DEFAULT int64

func (p *ContractFilter) GetSignDate() (v int64) {
	if !p.IsSetSignDate() {
		return ContractFilter_SignDate_DEFAULT
	}
	return *p.SignDate
}

var ContractFilter_EffectiveDate_DEFAULT int64

func (p *ContractFilter) GetEffectiveDate() (v int64) {
	if !p.IsSetEffectiveDate() {
		return ContractFilter_EffectiveDate_DEFAULT
	}
	return *p.EffectiveDate
}

var ContractFilter_Amount_DEFAULT float64

func (p *ContractFilter) GetAmount() (v float64) {
	if !p.IsSetAmount() {
		return ContractFilter_Amount_DEFAULT
	}
	return *p.Amount
}

var ContractFilter_Status_DEFAULT ContractStatus

func (p *ContractFilter) GetStatus() (v ContractStatus) {
	if !p.IsSetStatus() {
		return ContractFilter_Status_DEFAULT
	}
	return *p.Status
}

var ContractFilter_FileHash_DEFAULT string

func (p *ContractFilter) GetFileHash() (v string) {
	if !p.IsSetFileHash() {
		return ContractFilter_FileHash_DEFAULT
	}
	return *p.FileHash
}

var ContractFilter_Name_DEFAULT string

func (p *ContractFilter) GetName() (v string) {
	if !p.IsSetName() {
		return ContractFilter_Name_DEFAULT
	}
	return *p.Name
}
func (p *ContractFilter) SetContractNumber(val *string) {
	p.ContractNumber = val
}
func (p *ContractFilter) SetSignDate(val *int64) {
	p.SignDate = val
}
func (p *ContractFilter) SetEffectiveDate(val *int64) {
	p.EffectiveDate = val
}
func (p *ContractFilter) SetAmount(val *float64) {
	p.Amount = val
}
func (p *ContractFilter) SetStatus(val *ContractStatus) {
	p.Status = val
}
func (p *ContractFilter) SetFileHash(val *string) {
	p.FileHash = val
}
func (p *ContractFilter) SetName(val *string) {
	p.Name = val
}

func (p *ContractFilter) IsSetContractNumber() bool {
	return p.ContractNumber != nil
}

func (p *ContractFilter) IsSetSignDate() bool {
	return p.SignDate != nil
}

func (p *ContractFilter) IsSetEffectiveDate() bool {
	return p.EffectiveDate != nil
}

func (p *ContractFilter) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *ContractFilter) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ContractFilter) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *ContractFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *ContractFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContractFilter(%+v)", *p)
}

var fieldIDToName_ContractFilter = map[int16]string{
	1: "ContractNumber",
	2: "SignDate",
	3: "EffectiveDate",
	4: "Amount",
	5: "Status",
	6: "FileHash",
	7: "name",
}

type Document struct {
	DocType     DocType `thrift:"DocType,1,required" frugal:"1,required,DocType" json:"DocType"`
	DocNumber   string  `thrift:"DocNumber,2,required" frugal:"2,required,string" json:"DocNumber"`
	RelatedDate int64   `thrift:"RelatedDate,3,required" frugal:"3,required,i64" json:"RelatedDate"`
	FileHash    string  `thrift:"FileHash,4,required" frugal:"4,required,string" json:"FileHash"`
	Extra       *string `thrift:"extra,5,optional" frugal:"5,optional,string" json:"extra,omitempty"`
	CreatedAt   *int64  `thrift:"CreatedAt,6,optional" frugal:"6,optional,i64" json:"CreatedAt,omitempty"`
	UpdatedAt   *int64  `thrift:"UpdatedAt,7,optional" frugal:"7,optional,i64" json:"UpdatedAt,omitempty"`
	Id          int64   `thrift:"Id,8,required" frugal:"8,required,i64" json:"Id"`
	Name        string  `thrift:"name,9,required" frugal:"9,required,string" json:"name"`
}

func NewDocument() *Document {
	return &Document{}
}

func (p *Document) InitDefault() {
}

func (p *Document) GetDocType() (v DocType) {
	return p.DocType
}

func (p *Document) GetDocNumber() (v string) {
	return p.DocNumber
}

func (p *Document) GetRelatedDate() (v int64) {
	return p.RelatedDate
}

func (p *Document) GetFileHash() (v string) {
	return p.FileHash
}

var Document_Extra_DEFAULT string

func (p *Document) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return Document_Extra_DEFAULT
	}
	return *p.Extra
}

var Document_CreatedAt_DEFAULT int64

func (p *Document) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Document_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Document_UpdatedAt_DEFAULT int64

func (p *Document) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Document_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

func (p *Document) GetId() (v int64) {
	return p.Id
}

func (p *Document) GetName() (v string) {
	return p.Name
}
func (p *Document) SetDocType(val DocType) {
	p.DocType = val
}
func (p *Document) SetDocNumber(val string) {
	p.DocNumber = val
}
func (p *Document) SetRelatedDate(val int64) {
	p.RelatedDate = val
}
func (p *Document) SetFileHash(val string) {
	p.FileHash = val
}
func (p *Document) SetExtra(val *string) {
	p.Extra = val
}
func (p *Document) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Document) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Document) SetId(val int64) {
	p.Id = val
}
func (p *Document) SetName(val string) {
	p.Name = val
}

func (p *Document) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Document) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Document) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Document) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Document(%+v)", *p)
}

var fieldIDToName_Document = map[int16]string{
	1: "DocType",
	2: "DocNumber",
	3: "RelatedDate",
	4: "FileHash",
	5: "extra",
	6: "CreatedAt",
	7: "UpdatedAt",
	8: "Id",
	9: "name",
}

type DocumentFilter struct {
	DocType     *DocType `thrift:"DocType,1,optional" frugal:"1,optional,DocType" json:"DocType,omitempty"`
	DocNumber   *string  `thrift:"DocNumber,2,optional" frugal:"2,optional,string" json:"DocNumber,omitempty"`
	RelatedDate *int64   `thrift:"RelatedDate,3,optional" frugal:"3,optional,i64" json:"RelatedDate,omitempty"`
	FileHash    *string  `thrift:"FileHash,4,optional" frugal:"4,optional,string" json:"FileHash,omitempty"`
	Name        *string  `thrift:"name,5,optional" frugal:"5,optional,string" json:"name,omitempty"`
}

func NewDocumentFilter() *DocumentFilter {
	return &DocumentFilter{}
}

func (p *DocumentFilter) InitDefault() {
}

var DocumentFilter_DocType_DEFAULT DocType

func (p *DocumentFilter) GetDocType() (v DocType) {
	if !p.IsSetDocType() {
		return DocumentFilter_DocType_DEFAULT
	}
	return *p.DocType
}

var DocumentFilter_DocNumber_DEFAULT string

func (p *DocumentFilter) GetDocNumber() (v string) {
	if !p.IsSetDocNumber() {
		return DocumentFilter_DocNumber_DEFAULT
	}
	return *p.DocNumber
}

var DocumentFilter_RelatedDate_DEFAULT int64

func (p *DocumentFilter) GetRelatedDate() (v int64) {
	if !p.IsSetRelatedDate() {
		return DocumentFilter_RelatedDate_DEFAULT
	}
	return *p.RelatedDate
}

var DocumentFilter_FileHash_DEFAULT string

func (p *DocumentFilter) GetFileHash() (v string) {
	if !p.IsSetFileHash() {
		return DocumentFilter_FileHash_DEFAULT
	}
	return *p.FileHash
}

var DocumentFilter_Name_DEFAULT string

func (p *DocumentFilter) GetName() (v string) {
	if !p.IsSetName() {
		return DocumentFilter_Name_DEFAULT
	}
	return *p.Name
}
func (p *DocumentFilter) SetDocType(val *DocType) {
	p.DocType = val
}
func (p *DocumentFilter) SetDocNumber(val *string) {
	p.DocNumber = val
}
func (p *DocumentFilter) SetRelatedDate(val *int64) {
	p.RelatedDate = val
}
func (p *DocumentFilter) SetFileHash(val *string) {
	p.FileHash = val
}
func (p *DocumentFilter) SetName(val *string) {
	p.Name = val
}

func (p *DocumentFilter) IsSetDocType() bool {
	return p.DocType != nil
}

func (p *DocumentFilter) IsSetDocNumber() bool {
	return p.DocNumber != nil
}

func (p *DocumentFilter) IsSetRelatedDate() bool {
	return p.RelatedDate != nil
}

func (p *DocumentFilter) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *DocumentFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *DocumentFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentFilter(%+v)", *p)
}

var fieldIDToName_DocumentFilter = map[int16]string{
	1: "DocType",
	2: "DocNumber",
	3: "RelatedDate",
	4: "FileHash",
	5: "name",
}

type Company struct {
	Id          int64       `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	CompanyCode string      `thrift:"company_code,2,required" frugal:"2,required,string" json:"company_code"`
	CompanyName string      `thrift:"company_name,3,required" frugal:"3,required,string" json:"company_name"`
	CompanyType CompanyType `thrift:"company_type,4,required" frugal:"4,required,CompanyType" json:"company_type"`
}

func NewCompany() *Company {
	return &Company{}
}

func (p *Company) InitDefault() {
}

func (p *Company) GetId() (v int64) {
	return p.Id
}

func (p *Company) GetCompanyCode() (v string) {
	return p.CompanyCode
}

func (p *Company) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *Company) GetCompanyType() (v CompanyType) {
	return p.CompanyType
}
func (p *Company) SetId(val int64) {
	p.Id = val
}
func (p *Company) SetCompanyCode(val string) {
	p.CompanyCode = val
}
func (p *Company) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *Company) SetCompanyType(val CompanyType) {
	p.CompanyType = val
}

func (p *Company) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Company(%+v)", *p)
}

var fieldIDToName_Company = map[int16]string{
	1: "id",
	2: "company_code",
	3: "company_name",
	4: "company_type",
}

type Ebl struct {
	EblNo                  string  `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID        string  `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	OriginCompanyName      string  `thrift:"originCompanyName,3,required" frugal:"3,required,string" json:"originCompanyName"`
	ShipperCompanyID       string  `thrift:"shipperCompanyID,4,required" frugal:"4,required,string" json:"shipperCompanyID"`
	ShipperCompanyName     string  `thrift:"shipperCompanyName,5,required" frugal:"5,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyID     string  `thrift:"consigneeCompanyID,6,required" frugal:"6,required,string" json:"consigneeCompanyID"`
	ConsigneeCompanyName   string  `thrift:"consigneeCompanyName,7,required" frugal:"7,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyID   string  `thrift:"notifyPartyCompanyID,8,required" frugal:"8,required,string" json:"notifyPartyCompanyID"`
	NotifyPartyCompanyName string  `thrift:"notifyPartyCompanyName,9,required" frugal:"9,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string  `thrift:"placeOfReceipt,10,required" frugal:"10,required,string" json:"placeOfReceipt"`
	OceanVessel            string  `thrift:"oceanVessel,11,required" frugal:"11,required,string" json:"oceanVessel"`
	PortOfLoading          string  `thrift:"portOfLoading,12,required" frugal:"12,required,string" json:"portOfLoading"`
	PortOfDescharge        string  `thrift:"portOfDescharge,13,required" frugal:"13,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string  `thrift:"placeOfDestination,14,required" frugal:"14,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string  `thrift:"placeOfDelivery,15,required" frugal:"15,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string  `thrift:"shippingMarkes,16,required" frugal:"16,required,string" json:"shippingMarkes"`
	QuantityOfPackages     float64 `thrift:"quantityOfPackages,17,required" frugal:"17,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW       string  `thrift:"kindOfPackagesGW,18,required" frugal:"18,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string  `thrift:"kindOfPackagesM,19,required" frugal:"19,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string  `thrift:"descriptionOfGoods,20,required" frugal:"20,required,string" json:"descriptionOfGoods"`
	GrossWeight            float64 `thrift:"grossWeight,21,required" frugal:"21,required,double" json:"grossWeight"`
	Measurement            float64 `thrift:"measurement,22,required" frugal:"22,required,double" json:"measurement"`
	FreightAndCharges      string  `thrift:"freightAndCharges,23,required" frugal:"23,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string  `thrift:"placeOfIssue,24,required" frugal:"24,required,string" json:"placeOfIssue"`
	DateOfIssue            int64   `thrift:"dateOfIssue,25,required" frugal:"25,required,i64" json:"dateOfIssue"`
	DeliveryAgent          string  `thrift:"deliveryAgent,26,required" frugal:"26,required,string" json:"deliveryAgent"`
	ShippedOnBoard         int64   `thrift:"shippedOnBoard,27,required" frugal:"27,required,i64" json:"shippedOnBoard"`
	NumOfEbl               int64   `thrift:"numOfEbl,28,required" frugal:"28,required,i64" json:"numOfEbl"`
	DateOfIssueDeadline    int64   `thrift:"dateOfIssueDeadline,29,required" frugal:"29,required,i64" json:"dateOfIssueDeadline"`
	Status                 string  `thrift:"status,30,required" frugal:"30,required,string" json:"status"`
	File                   string  `thrift:"file,31,required" frugal:"31,required,string" json:"file"`
	ContractFiles          []int64 `thrift:"contractFiles,32,required" frugal:"32,required,list<i64>" json:"contractFiles"`
	InvoiceFiles           []int64 `thrift:"invoiceFiles,33,required" frugal:"33,required,list<i64>" json:"invoiceFiles"`
	TransferCompanyID      string  `thrift:"transferCompanyID,34,required" frugal:"34,required,string" json:"transferCompanyID"`
	TransferCompanyName    string  `thrift:"transferCompanyName,35,required" frugal:"35,required,string" json:"transferCompanyName"`
	CompanyID              string  `thrift:"companyID,36,required" frugal:"36,required,string" json:"companyID"`
	CompanyName            string  `thrift:"companyName,37,required" frugal:"37,required,string" json:"companyName"`
	DocumentFiles          []int64 `thrift:"documentFiles,38,required" frugal:"38,required,list<i64>" json:"documentFiles"`
}

func NewEbl() *Ebl {
	return &Ebl{}
}

func (p *Ebl) InitDefault() {
}

func (p *Ebl) GetEblNo() (v string) {
	return p.EblNo
}

func (p *Ebl) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *Ebl) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *Ebl) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *Ebl) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *Ebl) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *Ebl) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *Ebl) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *Ebl) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *Ebl) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *Ebl) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *Ebl) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *Ebl) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *Ebl) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *Ebl) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *Ebl) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *Ebl) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *Ebl) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *Ebl) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *Ebl) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *Ebl) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *Ebl) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *Ebl) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *Ebl) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *Ebl) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *Ebl) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *Ebl) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *Ebl) GetNumOfEbl() (v int64) {
	return p.NumOfEbl
}

func (p *Ebl) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *Ebl) GetStatus() (v string) {
	return p.Status
}

func (p *Ebl) GetFile() (v string) {
	return p.File
}

func (p *Ebl) GetContractFiles() (v []int64) {
	return p.ContractFiles
}

func (p *Ebl) GetInvoiceFiles() (v []int64) {
	return p.InvoiceFiles
}

func (p *Ebl) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *Ebl) GetTransferCompanyName() (v string) {
	return p.TransferCompanyName
}

func (p *Ebl) GetCompanyID() (v string) {
	return p.CompanyID
}

func (p *Ebl) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *Ebl) GetDocumentFiles() (v []int64) {
	return p.DocumentFiles
}
func (p *Ebl) SetEblNo(val string) {
	p.EblNo = val
}
func (p *Ebl) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *Ebl) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *Ebl) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *Ebl) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *Ebl) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *Ebl) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *Ebl) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *Ebl) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *Ebl) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *Ebl) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *Ebl) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *Ebl) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *Ebl) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *Ebl) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *Ebl) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *Ebl) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *Ebl) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *Ebl) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *Ebl) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *Ebl) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *Ebl) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *Ebl) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *Ebl) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *Ebl) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *Ebl) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *Ebl) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *Ebl) SetNumOfEbl(val int64) {
	p.NumOfEbl = val
}
func (p *Ebl) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *Ebl) SetStatus(val string) {
	p.Status = val
}
func (p *Ebl) SetFile(val string) {
	p.File = val
}
func (p *Ebl) SetContractFiles(val []int64) {
	p.ContractFiles = val
}
func (p *Ebl) SetInvoiceFiles(val []int64) {
	p.InvoiceFiles = val
}
func (p *Ebl) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *Ebl) SetTransferCompanyName(val string) {
	p.TransferCompanyName = val
}
func (p *Ebl) SetCompanyID(val string) {
	p.CompanyID = val
}
func (p *Ebl) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *Ebl) SetDocumentFiles(val []int64) {
	p.DocumentFiles = val
}

func (p *Ebl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ebl(%+v)", *p)
}

var fieldIDToName_Ebl = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "originCompanyName",
	4:  "shipperCompanyID",
	5:  "shipperCompanyName",
	6:  "consigneeCompanyID",
	7:  "consigneeCompanyName",
	8:  "notifyPartyCompanyID",
	9:  "notifyPartyCompanyName",
	10: "placeOfReceipt",
	11: "oceanVessel",
	12: "portOfLoading",
	13: "portOfDescharge",
	14: "placeOfDestination",
	15: "placeOfDelivery",
	16: "shippingMarkes",
	17: "quantityOfPackages",
	18: "kindOfPackagesGW",
	19: "kindOfPackagesM",
	20: "descriptionOfGoods",
	21: "grossWeight",
	22: "measurement",
	23: "freightAndCharges",
	24: "placeOfIssue",
	25: "dateOfIssue",
	26: "deliveryAgent",
	27: "shippedOnBoard",
	28: "numOfEbl",
	29: "dateOfIssueDeadline",
	30: "status",
	31: "file",
	32: "contractFiles",
	33: "invoiceFiles",
	34: "transferCompanyID",
	35: "transferCompanyName",
	36: "companyID",
	37: "companyName",
	38: "documentFiles",
}

type EblTransferLog struct {
	TransFerEblNo           string `thrift:"transFerEblNo,1,required" frugal:"1,required,string" json:"transFerEblNo"`
	TransferFromCompanyID   string `thrift:"transferFromCompanyID,2,required" frugal:"2,required,string" json:"transferFromCompanyID"`
	TransferFromCompanyName string `thrift:"transferFromCompanyName,3,required" frugal:"3,required,string" json:"transferFromCompanyName"`
	TransferToCompanyID     string `thrift:"transferToCompanyID,4,required" frugal:"4,required,string" json:"transferToCompanyID"`
	TransferToCompanyName   string `thrift:"transferToCompanyName,5,required" frugal:"5,required,string" json:"transferToCompanyName"`
	TransferTime            int64  `thrift:"transferTime,6,required" frugal:"6,required,i64" json:"transferTime"`
	TransferType            string `thrift:"transferType,7,required" frugal:"7,required,string" json:"transferType"`
}

func NewEblTransferLog() *EblTransferLog {
	return &EblTransferLog{}
}

func (p *EblTransferLog) InitDefault() {
}

func (p *EblTransferLog) GetTransFerEblNo() (v string) {
	return p.TransFerEblNo
}

func (p *EblTransferLog) GetTransferFromCompanyID() (v string) {
	return p.TransferFromCompanyID
}

func (p *EblTransferLog) GetTransferFromCompanyName() (v string) {
	return p.TransferFromCompanyName
}

func (p *EblTransferLog) GetTransferToCompanyID() (v string) {
	return p.TransferToCompanyID
}

func (p *EblTransferLog) GetTransferToCompanyName() (v string) {
	return p.TransferToCompanyName
}

func (p *EblTransferLog) GetTransferTime() (v int64) {
	return p.TransferTime
}

func (p *EblTransferLog) GetTransferType() (v string) {
	return p.TransferType
}
func (p *EblTransferLog) SetTransFerEblNo(val string) {
	p.TransFerEblNo = val
}
func (p *EblTransferLog) SetTransferFromCompanyID(val string) {
	p.TransferFromCompanyID = val
}
func (p *EblTransferLog) SetTransferFromCompanyName(val string) {
	p.TransferFromCompanyName = val
}
func (p *EblTransferLog) SetTransferToCompanyID(val string) {
	p.TransferToCompanyID = val
}
func (p *EblTransferLog) SetTransferToCompanyName(val string) {
	p.TransferToCompanyName = val
}
func (p *EblTransferLog) SetTransferTime(val int64) {
	p.TransferTime = val
}
func (p *EblTransferLog) SetTransferType(val string) {
	p.TransferType = val
}

func (p *EblTransferLog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EblTransferLog(%+v)", *p)
}

var fieldIDToName_EblTransferLog = map[int16]string{
	1: "transFerEblNo",
	2: "transferFromCompanyID",
	3: "transferFromCompanyName",
	4: "transferToCompanyID",
	5: "transferToCompanyName",
	6: "transferTime",
	7: "transferType",
}

type EblExtra struct {
	EblNo                  string      `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID        string      `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	OriginCompanyName      string      `thrift:"originCompanyName,3,required" frugal:"3,required,string" json:"originCompanyName"`
	ShipperCompanyID       string      `thrift:"shipperCompanyID,4,required" frugal:"4,required,string" json:"shipperCompanyID"`
	ShipperCompanyName     string      `thrift:"shipperCompanyName,5,required" frugal:"5,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyID     string      `thrift:"consigneeCompanyID,6,required" frugal:"6,required,string" json:"consigneeCompanyID"`
	ConsigneeCompanyName   string      `thrift:"consigneeCompanyName,7,required" frugal:"7,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyID   string      `thrift:"notifyPartyCompanyID,8,required" frugal:"8,required,string" json:"notifyPartyCompanyID"`
	NotifyPartyCompanyName string      `thrift:"notifyPartyCompanyName,9,required" frugal:"9,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string      `thrift:"placeOfReceipt,10,required" frugal:"10,required,string" json:"placeOfReceipt"`
	OceanVessel            string      `thrift:"oceanVessel,11,required" frugal:"11,required,string" json:"oceanVessel"`
	PortOfLoading          string      `thrift:"portOfLoading,12,required" frugal:"12,required,string" json:"portOfLoading"`
	PortOfDescharge        string      `thrift:"portOfDescharge,13,required" frugal:"13,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string      `thrift:"placeOfDestination,14,required" frugal:"14,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string      `thrift:"placeOfDelivery,15,required" frugal:"15,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string      `thrift:"shippingMarkes,16,required" frugal:"16,required,string" json:"shippingMarkes"`
	QuantityOfPackages     float64     `thrift:"quantityOfPackages,17,required" frugal:"17,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW       string      `thrift:"kindOfPackagesGW,18,required" frugal:"18,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string      `thrift:"kindOfPackagesM,19,required" frugal:"19,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string      `thrift:"descriptionOfGoods,20,required" frugal:"20,required,string" json:"descriptionOfGoods"`
	GrossWeight            float64     `thrift:"grossWeight,21,required" frugal:"21,required,double" json:"grossWeight"`
	Measurement            float64     `thrift:"measurement,22,required" frugal:"22,required,double" json:"measurement"`
	FreightAndCharges      string      `thrift:"freightAndCharges,23,required" frugal:"23,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string      `thrift:"placeOfIssue,24,required" frugal:"24,required,string" json:"placeOfIssue"`
	DateOfIssue            int64       `thrift:"dateOfIssue,25,required" frugal:"25,required,i64" json:"dateOfIssue"`
	DeliveryAgent          string      `thrift:"deliveryAgent,26,required" frugal:"26,required,string" json:"deliveryAgent"`
	ShippedOnBoard         int64       `thrift:"shippedOnBoard,27,required" frugal:"27,required,i64" json:"shippedOnBoard"`
	NumOfEbl               int64       `thrift:"numOfEbl,28,required" frugal:"28,required,i64" json:"numOfEbl"`
	DateOfIssueDeadline    int64       `thrift:"dateOfIssueDeadline,29,required" frugal:"29,required,i64" json:"dateOfIssueDeadline"`
	Status                 string      `thrift:"status,30,required" frugal:"30,required,string" json:"status"`
	File                   string      `thrift:"file,31,required" frugal:"31,required,string" json:"file"`
	ContractFiles          []*Contract `thrift:"contractFiles,32,required" frugal:"32,required,list<Contract>" json:"contractFiles"`
	InvoiceFiles           []*Invoice  `thrift:"invoiceFiles,33,required" frugal:"33,required,list<Invoice>" json:"invoiceFiles"`
	TransferCompanyID      string      `thrift:"transferCompanyID,34,required" frugal:"34,required,string" json:"transferCompanyID"`
	TransferCompanyName    string      `thrift:"transferCompanyName,35,required" frugal:"35,required,string" json:"transferCompanyName"`
	CompanyID              string      `thrift:"companyID,36,required" frugal:"36,required,string" json:"companyID"`
	CompanyName            string      `thrift:"companyName,37,required" frugal:"37,required,string" json:"companyName"`
	DocumentFiles          []*Document `thrift:"documentFiles,38,required" frugal:"38,required,list<Document>" json:"documentFiles"`
}

func NewEblExtra() *EblExtra {
	return &EblExtra{}
}

func (p *EblExtra) InitDefault() {
}

func (p *EblExtra) GetEblNo() (v string) {
	return p.EblNo
}

func (p *EblExtra) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *EblExtra) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *EblExtra) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *EblExtra) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *EblExtra) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *EblExtra) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *EblExtra) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *EblExtra) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *EblExtra) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *EblExtra) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *EblExtra) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *EblExtra) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *EblExtra) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *EblExtra) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *EblExtra) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *EblExtra) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *EblExtra) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *EblExtra) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *EblExtra) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *EblExtra) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *EblExtra) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *EblExtra) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *EblExtra) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *EblExtra) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *EblExtra) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *EblExtra) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *EblExtra) GetNumOfEbl() (v int64) {
	return p.NumOfEbl
}

func (p *EblExtra) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *EblExtra) GetStatus() (v string) {
	return p.Status
}

func (p *EblExtra) GetFile() (v string) {
	return p.File
}

func (p *EblExtra) GetContractFiles() (v []*Contract) {
	return p.ContractFiles
}

func (p *EblExtra) GetInvoiceFiles() (v []*Invoice) {
	return p.InvoiceFiles
}

func (p *EblExtra) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *EblExtra) GetTransferCompanyName() (v string) {
	return p.TransferCompanyName
}

func (p *EblExtra) GetCompanyID() (v string) {
	return p.CompanyID
}

func (p *EblExtra) GetCompanyName() (v string) {
	return p.CompanyName
}

func (p *EblExtra) GetDocumentFiles() (v []*Document) {
	return p.DocumentFiles
}
func (p *EblExtra) SetEblNo(val string) {
	p.EblNo = val
}
func (p *EblExtra) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *EblExtra) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *EblExtra) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *EblExtra) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *EblExtra) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *EblExtra) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *EblExtra) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *EblExtra) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *EblExtra) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *EblExtra) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *EblExtra) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *EblExtra) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *EblExtra) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *EblExtra) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *EblExtra) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *EblExtra) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *EblExtra) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *EblExtra) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *EblExtra) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *EblExtra) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *EblExtra) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *EblExtra) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *EblExtra) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *EblExtra) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *EblExtra) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *EblExtra) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *EblExtra) SetNumOfEbl(val int64) {
	p.NumOfEbl = val
}
func (p *EblExtra) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *EblExtra) SetStatus(val string) {
	p.Status = val
}
func (p *EblExtra) SetFile(val string) {
	p.File = val
}
func (p *EblExtra) SetContractFiles(val []*Contract) {
	p.ContractFiles = val
}
func (p *EblExtra) SetInvoiceFiles(val []*Invoice) {
	p.InvoiceFiles = val
}
func (p *EblExtra) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *EblExtra) SetTransferCompanyName(val string) {
	p.TransferCompanyName = val
}
func (p *EblExtra) SetCompanyID(val string) {
	p.CompanyID = val
}
func (p *EblExtra) SetCompanyName(val string) {
	p.CompanyName = val
}
func (p *EblExtra) SetDocumentFiles(val []*Document) {
	p.DocumentFiles = val
}

func (p *EblExtra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EblExtra(%+v)", *p)
}

var fieldIDToName_EblExtra = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "originCompanyName",
	4:  "shipperCompanyID",
	5:  "shipperCompanyName",
	6:  "consigneeCompanyID",
	7:  "consigneeCompanyName",
	8:  "notifyPartyCompanyID",
	9:  "notifyPartyCompanyName",
	10: "placeOfReceipt",
	11: "oceanVessel",
	12: "portOfLoading",
	13: "portOfDescharge",
	14: "placeOfDestination",
	15: "placeOfDelivery",
	16: "shippingMarkes",
	17: "quantityOfPackages",
	18: "kindOfPackagesGW",
	19: "kindOfPackagesM",
	20: "descriptionOfGoods",
	21: "grossWeight",
	22: "measurement",
	23: "freightAndCharges",
	24: "placeOfIssue",
	25: "dateOfIssue",
	26: "deliveryAgent",
	27: "shippedOnBoard",
	28: "numOfEbl",
	29: "dateOfIssueDeadline",
	30: "status",
	31: "file",
	32: "contractFiles",
	33: "invoiceFiles",
	34: "transferCompanyID",
	35: "transferCompanyName",
	36: "companyID",
	37: "companyName",
	38: "documentFiles",
}

type EblFilter struct {
	EblNo                string  `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyID      string  `thrift:"originCompanyID,2,required" frugal:"2,required,string" json:"originCompanyID"`
	ShipperCompanyID     string  `thrift:"shipperCompanyID,3,required" frugal:"3,required,string" json:"shipperCompanyID"`
	ConsigneeCompanyID   string  `thrift:"consigneeCompanyID,4,required" frugal:"4,required,string" json:"consigneeCompanyID"`
	NotifyPartyCompanyID string  `thrift:"notifyPartyCompanyID,5,required" frugal:"5,required,string" json:"notifyPartyCompanyID"`
	PlaceOfReceipt       string  `thrift:"placeOfReceipt,6,required" frugal:"6,required,string" json:"placeOfReceipt"`
	OceanVessel          string  `thrift:"oceanVessel,7,required" frugal:"7,required,string" json:"oceanVessel"`
	PortOfLoading        string  `thrift:"portOfLoading,8,required" frugal:"8,required,string" json:"portOfLoading"`
	PortOfDescharge      string  `thrift:"portOfDescharge,9,required" frugal:"9,required,string" json:"portOfDescharge"`
	PlaceOfDestination   string  `thrift:"placeOfDestination,10,required" frugal:"10,required,string" json:"placeOfDestination"`
	PlaceOfDelivery      string  `thrift:"placeOfDelivery,11,required" frugal:"11,required,string" json:"placeOfDelivery"`
	ShippingMarkes       string  `thrift:"shippingMarkes,12,required" frugal:"12,required,string" json:"shippingMarkes"`
	QuantityOfPackages   float64 `thrift:"quantityOfPackages,13,required" frugal:"13,required,double" json:"quantityOfPackages"`
	KindOfPackagesGW     string  `thrift:"kindOfPackagesGW,14,required" frugal:"14,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM      string  `thrift:"kindOfPackagesM,15,required" frugal:"15,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods   string  `thrift:"descriptionOfGoods,16,required" frugal:"16,required,string" json:"descriptionOfGoods"`
	GrossWeight          float64 `thrift:"grossWeight,17,required" frugal:"17,required,double" json:"grossWeight"`
	Measurement          float64 `thrift:"measurement,18,required" frugal:"18,required,double" json:"measurement"`
	FreightAndCharges    string  `thrift:"freightAndCharges,19,required" frugal:"19,required,string" json:"freightAndCharges"`
	PlaceOfIssue         string  `thrift:"placeOfIssue,20,required" frugal:"20,required,string" json:"placeOfIssue"`
	DateOfIssue          int64   `thrift:"dateOfIssue,21,required" frugal:"21,required,i64" json:"dateOfIssue"`
	DeliveryAgent        string  `thrift:"deliveryAgent,22,required" frugal:"22,required,string" json:"deliveryAgent"`
	ShippedOnBoard       int64   `thrift:"shippedOnBoard,23,required" frugal:"23,required,i64" json:"shippedOnBoard"`
	NumOfEbl             int64   `thrift:"numOfEbl,24,required" frugal:"24,required,i64" json:"numOfEbl"`
	DateOfIssueDeadline  int64   `thrift:"dateOfIssueDeadline,25,required" frugal:"25,required,i64" json:"dateOfIssueDeadline"`
	Status               string  `thrift:"status,26,required" frugal:"26,required,string" json:"status"`
	TransferCompanyID    string  `thrift:"transferCompanyID,27,required" frugal:"27,required,string" json:"transferCompanyID"`
	CompanyID            string  `thrift:"companyID,28,required" frugal:"28,required,string" json:"companyID"`
}

func NewEblFilter() *EblFilter {
	return &EblFilter{}
}

func (p *EblFilter) InitDefault() {
}

func (p *EblFilter) GetEblNo() (v string) {
	return p.EblNo
}

func (p *EblFilter) GetOriginCompanyID() (v string) {
	return p.OriginCompanyID
}

func (p *EblFilter) GetShipperCompanyID() (v string) {
	return p.ShipperCompanyID
}

func (p *EblFilter) GetConsigneeCompanyID() (v string) {
	return p.ConsigneeCompanyID
}

func (p *EblFilter) GetNotifyPartyCompanyID() (v string) {
	return p.NotifyPartyCompanyID
}

func (p *EblFilter) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *EblFilter) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *EblFilter) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *EblFilter) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *EblFilter) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *EblFilter) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *EblFilter) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *EblFilter) GetQuantityOfPackages() (v float64) {
	return p.QuantityOfPackages
}

func (p *EblFilter) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *EblFilter) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *EblFilter) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *EblFilter) GetGrossWeight() (v float64) {
	return p.GrossWeight
}

func (p *EblFilter) GetMeasurement() (v float64) {
	return p.Measurement
}

func (p *EblFilter) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *EblFilter) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *EblFilter) GetDateOfIssue() (v int64) {
	return p.DateOfIssue
}

func (p *EblFilter) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *EblFilter) GetShippedOnBoard() (v int64) {
	return p.ShippedOnBoard
}

func (p *EblFilter) GetNumOfEbl() (v int64) {
	return p.NumOfEbl
}

func (p *EblFilter) GetDateOfIssueDeadline() (v int64) {
	return p.DateOfIssueDeadline
}

func (p *EblFilter) GetStatus() (v string) {
	return p.Status
}

func (p *EblFilter) GetTransferCompanyID() (v string) {
	return p.TransferCompanyID
}

func (p *EblFilter) GetCompanyID() (v string) {
	return p.CompanyID
}
func (p *EblFilter) SetEblNo(val string) {
	p.EblNo = val
}
func (p *EblFilter) SetOriginCompanyID(val string) {
	p.OriginCompanyID = val
}
func (p *EblFilter) SetShipperCompanyID(val string) {
	p.ShipperCompanyID = val
}
func (p *EblFilter) SetConsigneeCompanyID(val string) {
	p.ConsigneeCompanyID = val
}
func (p *EblFilter) SetNotifyPartyCompanyID(val string) {
	p.NotifyPartyCompanyID = val
}
func (p *EblFilter) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *EblFilter) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *EblFilter) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *EblFilter) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *EblFilter) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *EblFilter) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *EblFilter) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *EblFilter) SetQuantityOfPackages(val float64) {
	p.QuantityOfPackages = val
}
func (p *EblFilter) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *EblFilter) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *EblFilter) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *EblFilter) SetGrossWeight(val float64) {
	p.GrossWeight = val
}
func (p *EblFilter) SetMeasurement(val float64) {
	p.Measurement = val
}
func (p *EblFilter) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *EblFilter) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *EblFilter) SetDateOfIssue(val int64) {
	p.DateOfIssue = val
}
func (p *EblFilter) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *EblFilter) SetShippedOnBoard(val int64) {
	p.ShippedOnBoard = val
}
func (p *EblFilter) SetNumOfEbl(val int64) {
	p.NumOfEbl = val
}
func (p *EblFilter) SetDateOfIssueDeadline(val int64) {
	p.DateOfIssueDeadline = val
}
func (p *EblFilter) SetStatus(val string) {
	p.Status = val
}
func (p *EblFilter) SetTransferCompanyID(val string) {
	p.TransferCompanyID = val
}
func (p *EblFilter) SetCompanyID(val string) {
	p.CompanyID = val
}

func (p *EblFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EblFilter(%+v)", *p)
}

var fieldIDToName_EblFilter = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyID",
	3:  "shipperCompanyID",
	4:  "consigneeCompanyID",
	5:  "notifyPartyCompanyID",
	6:  "placeOfReceipt",
	7:  "oceanVessel",
	8:  "portOfLoading",
	9:  "portOfDescharge",
	10: "placeOfDestination",
	11: "placeOfDelivery",
	12: "shippingMarkes",
	13: "quantityOfPackages",
	14: "kindOfPackagesGW",
	15: "kindOfPackagesM",
	16: "descriptionOfGoods",
	17: "grossWeight",
	18: "measurement",
	19: "freightAndCharges",
	20: "placeOfIssue",
	21: "dateOfIssue",
	22: "deliveryAgent",
	23: "shippedOnBoard",
	24: "numOfEbl",
	25: "dateOfIssueDeadline",
	26: "status",
	27: "transferCompanyID",
	28: "companyID",
}

type FabricEbl interface {
	CreateCompany(ctx context.Context, req *CreateCompanyReq) (r *CreateCompanyResp, err error)

	Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)

	GetUserInfo(ctx context.Context, req *GetUserInfoReq) (r *GetUserInfoResp, err error)

	GetCompanyAllList(ctx context.Context, req *GetCompanyAllListReq) (r *GetCompanyAllListResp, err error)

	CreateEbl(ctx context.Context, req *CreateEblReq) (r *CreateEblResp, err error)

	QueryAllEblList(ctx context.Context, req *QueryAllEblListReq) (r *QueryAllEblListResp, err error)

	QueryEblList(ctx context.Context, req *QueryEblListReq) (r *QueryEblListResp, err error)

	OperateEbl(ctx context.Context, req *OperateEblReq) (r *OperateEblResp, err error)

	UploadSeal(ctx context.Context, req *UploadSealReq) (r *UploadSealResp, err error)

	CheckToken(ctx context.Context, req *CheckTokenReq) (r *CheckTokenResp, err error)

	CreateInvoice(ctx context.Context, req *CreateInvoiceReq) (r *CreateInvoiceResp, err error)

	CreateContract(ctx context.Context, req *CreateContractReq) (r *CreateContractResp, err error)

	CreateDocument(ctx context.Context, req *CreateDocumentReq) (r *CreateDocumentResp, err error)

	QueryInvoiceList(ctx context.Context, req *QueryInvoiceListReq) (r *QueryInvoiceListResp, err error)

	QueryContractList(ctx context.Context, req *QueryContractListReq) (r *QueryContractListResp, err error)

	QueryDocumentList(ctx context.Context, req *QueryDocumentListReq) (r *QueryDocumentListResp, err error)

	GetInvoice(ctx context.Context, req *GetInvoiceReq) (r *GetInvoiceResp, err error)

	GetContract(ctx context.Context, req *GetContractReq) (r *GetContractResp, err error)

	GetDocument(ctx context.Context, req *GetDocumentReq) (r *GetDocumentResp, err error)

	QuerySeal(ctx context.Context, req *QuerySealReq) (r *QuerySealResp, err error)

	DeleteSeal(ctx context.Context, req *DeleteSealReq) (r *DeleteSealResp, err error)

	QueryEblTransferLog(ctx context.Context, req *QueryEblTransferLogReq) (r *QueryEblTransferLogResp, err error)

	CreateCompanyUser(ctx context.Context, req *CreateCompanyUserReq) (r *CreateCompanyUserResp, err error)

	QueryCompanyUserList(ctx context.Context, req *QueryCompanyUserListReq) (r *QueryCompanyUserListResp, err error)

	QueryEblDetail(ctx context.Context, req *QueryEblDetailReq) (r *QueryEblDetailResp, err error)
}

type FabricEblCreateCompanyArgs struct {
	Req *CreateCompanyReq `thrift:"req,1" frugal:"1,default,CreateCompanyReq" json:"req"`
}

func NewFabricEblCreateCompanyArgs() *FabricEblCreateCompanyArgs {
	return &FabricEblCreateCompanyArgs{}
}

func (p *FabricEblCreateCompanyArgs) InitDefault() {
}

var FabricEblCreateCompanyArgs_Req_DEFAULT *CreateCompanyReq

func (p *FabricEblCreateCompanyArgs) GetReq() (v *CreateCompanyReq) {
	if !p.IsSetReq() {
		return FabricEblCreateCompanyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateCompanyArgs) SetReq(val *CreateCompanyReq) {
	p.Req = val
}

func (p *FabricEblCreateCompanyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateCompanyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCreateCompanyArgs = map[int16]string{
	1: "req",
}

type FabricEblCreateCompanyResult struct {
	Success *CreateCompanyResp `thrift:"success,0,optional" frugal:"0,optional,CreateCompanyResp" json:"success,omitempty"`
}

func NewFabricEblCreateCompanyResult() *FabricEblCreateCompanyResult {
	return &FabricEblCreateCompanyResult{}
}

func (p *FabricEblCreateCompanyResult) InitDefault() {
}

var FabricEblCreateCompanyResult_Success_DEFAULT *CreateCompanyResp

func (p *FabricEblCreateCompanyResult) GetSuccess() (v *CreateCompanyResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateCompanyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateCompanyResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCompanyResp)
}

func (p *FabricEblCreateCompanyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateCompanyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyResult(%+v)", *p)
}

var fieldIDToName_FabricEblCreateCompanyResult = map[int16]string{
	0: "success",
}

type FabricEblLoginArgs struct {
	Req *LoginReq `thrift:"req,1" frugal:"1,default,LoginReq" json:"req"`
}

func NewFabricEblLoginArgs() *FabricEblLoginArgs {
	return &FabricEblLoginArgs{}
}

func (p *FabricEblLoginArgs) InitDefault() {
}

var FabricEblLoginArgs_Req_DEFAULT *LoginReq

func (p *FabricEblLoginArgs) GetReq() (v *LoginReq) {
	if !p.IsSetReq() {
		return FabricEblLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblLoginArgs) SetReq(val *LoginReq) {
	p.Req = val
}

func (p *FabricEblLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblLoginArgs(%+v)", *p)
}

var fieldIDToName_FabricEblLoginArgs = map[int16]string{
	1: "req",
}

type FabricEblLoginResult struct {
	Success *LoginResp `thrift:"success,0,optional" frugal:"0,optional,LoginResp" json:"success,omitempty"`
}

func NewFabricEblLoginResult() *FabricEblLoginResult {
	return &FabricEblLoginResult{}
}

func (p *FabricEblLoginResult) InitDefault() {
}

var FabricEblLoginResult_Success_DEFAULT *LoginResp

func (p *FabricEblLoginResult) GetSuccess() (v *LoginResp) {
	if !p.IsSetSuccess() {
		return FabricEblLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResp)
}

func (p *FabricEblLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblLoginResult(%+v)", *p)
}

var fieldIDToName_FabricEblLoginResult = map[int16]string{
	0: "success",
}

type FabricEblGetUserInfoArgs struct {
	Req *GetUserInfoReq `thrift:"req,1" frugal:"1,default,GetUserInfoReq" json:"req"`
}

func NewFabricEblGetUserInfoArgs() *FabricEblGetUserInfoArgs {
	return &FabricEblGetUserInfoArgs{}
}

func (p *FabricEblGetUserInfoArgs) InitDefault() {
}

var FabricEblGetUserInfoArgs_Req_DEFAULT *GetUserInfoReq

func (p *FabricEblGetUserInfoArgs) GetReq() (v *GetUserInfoReq) {
	if !p.IsSetReq() {
		return FabricEblGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetUserInfoArgs) SetReq(val *GetUserInfoReq) {
	p.Req = val
}

func (p *FabricEblGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_FabricEblGetUserInfoArgs = map[int16]string{
	1: "req",
}

type FabricEblGetUserInfoResult struct {
	Success *GetUserInfoResp `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResp" json:"success,omitempty"`
}

func NewFabricEblGetUserInfoResult() *FabricEblGetUserInfoResult {
	return &FabricEblGetUserInfoResult{}
}

func (p *FabricEblGetUserInfoResult) InitDefault() {
}

var FabricEblGetUserInfoResult_Success_DEFAULT *GetUserInfoResp

func (p *FabricEblGetUserInfoResult) GetSuccess() (v *GetUserInfoResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResp)
}

func (p *FabricEblGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_FabricEblGetUserInfoResult = map[int16]string{
	0: "success",
}

type FabricEblGetCompanyAllListArgs struct {
	Req *GetCompanyAllListReq `thrift:"req,1" frugal:"1,default,GetCompanyAllListReq" json:"req"`
}

func NewFabricEblGetCompanyAllListArgs() *FabricEblGetCompanyAllListArgs {
	return &FabricEblGetCompanyAllListArgs{}
}

func (p *FabricEblGetCompanyAllListArgs) InitDefault() {
}

var FabricEblGetCompanyAllListArgs_Req_DEFAULT *GetCompanyAllListReq

func (p *FabricEblGetCompanyAllListArgs) GetReq() (v *GetCompanyAllListReq) {
	if !p.IsSetReq() {
		return FabricEblGetCompanyAllListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetCompanyAllListArgs) SetReq(val *GetCompanyAllListReq) {
	p.Req = val
}

func (p *FabricEblGetCompanyAllListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetCompanyAllListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetCompanyAllListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblGetCompanyAllListArgs = map[int16]string{
	1: "req",
}

type FabricEblGetCompanyAllListResult struct {
	Success *GetCompanyAllListResp `thrift:"success,0,optional" frugal:"0,optional,GetCompanyAllListResp" json:"success,omitempty"`
}

func NewFabricEblGetCompanyAllListResult() *FabricEblGetCompanyAllListResult {
	return &FabricEblGetCompanyAllListResult{}
}

func (p *FabricEblGetCompanyAllListResult) InitDefault() {
}

var FabricEblGetCompanyAllListResult_Success_DEFAULT *GetCompanyAllListResp

func (p *FabricEblGetCompanyAllListResult) GetSuccess() (v *GetCompanyAllListResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetCompanyAllListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetCompanyAllListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCompanyAllListResp)
}

func (p *FabricEblGetCompanyAllListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetCompanyAllListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetCompanyAllListResult(%+v)", *p)
}

var fieldIDToName_FabricEblGetCompanyAllListResult = map[int16]string{
	0: "success",
}

type FabricEblCreateEblArgs struct {
	Req *CreateEblReq `thrift:"req,1" frugal:"1,default,CreateEblReq" json:"req"`
}

func NewFabricEblCreateEblArgs() *FabricEblCreateEblArgs {
	return &FabricEblCreateEblArgs{}
}

func (p *FabricEblCreateEblArgs) InitDefault() {
}

var FabricEblCreateEblArgs_Req_DEFAULT *CreateEblReq

func (p *FabricEblCreateEblArgs) GetReq() (v *CreateEblReq) {
	if !p.IsSetReq() {
		return FabricEblCreateEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateEblArgs) SetReq(val *CreateEblReq) {
	p.Req = val
}

func (p *FabricEblCreateEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateEblArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCreateEblArgs = map[int16]string{
	1: "req",
}

type FabricEblCreateEblResult struct {
	Success *CreateEblResp `thrift:"success,0,optional" frugal:"0,optional,CreateEblResp" json:"success,omitempty"`
}

func NewFabricEblCreateEblResult() *FabricEblCreateEblResult {
	return &FabricEblCreateEblResult{}
}

func (p *FabricEblCreateEblResult) InitDefault() {
}

var FabricEblCreateEblResult_Success_DEFAULT *CreateEblResp

func (p *FabricEblCreateEblResult) GetSuccess() (v *CreateEblResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEblResp)
}

func (p *FabricEblCreateEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateEblResult(%+v)", *p)
}

var fieldIDToName_FabricEblCreateEblResult = map[int16]string{
	0: "success",
}

type FabricEblQueryAllEblListArgs struct {
	Req *QueryAllEblListReq `thrift:"req,1" frugal:"1,default,QueryAllEblListReq" json:"req"`
}

func NewFabricEblQueryAllEblListArgs() *FabricEblQueryAllEblListArgs {
	return &FabricEblQueryAllEblListArgs{}
}

func (p *FabricEblQueryAllEblListArgs) InitDefault() {
}

var FabricEblQueryAllEblListArgs_Req_DEFAULT *QueryAllEblListReq

func (p *FabricEblQueryAllEblListArgs) GetReq() (v *QueryAllEblListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryAllEblListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryAllEblListArgs) SetReq(val *QueryAllEblListReq) {
	p.Req = val
}

func (p *FabricEblQueryAllEblListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryAllEblListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryAllEblListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryAllEblListArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryAllEblListResult struct {
	Success *QueryAllEblListResp `thrift:"success,0,optional" frugal:"0,optional,QueryAllEblListResp" json:"success,omitempty"`
}

func NewFabricEblQueryAllEblListResult() *FabricEblQueryAllEblListResult {
	return &FabricEblQueryAllEblListResult{}
}

func (p *FabricEblQueryAllEblListResult) InitDefault() {
}

var FabricEblQueryAllEblListResult_Success_DEFAULT *QueryAllEblListResp

func (p *FabricEblQueryAllEblListResult) GetSuccess() (v *QueryAllEblListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryAllEblListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryAllEblListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryAllEblListResp)
}

func (p *FabricEblQueryAllEblListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryAllEblListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryAllEblListResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryAllEblListResult = map[int16]string{
	0: "success",
}

type FabricEblQueryEblListArgs struct {
	Req *QueryEblListReq `thrift:"req,1" frugal:"1,default,QueryEblListReq" json:"req"`
}

func NewFabricEblQueryEblListArgs() *FabricEblQueryEblListArgs {
	return &FabricEblQueryEblListArgs{}
}

func (p *FabricEblQueryEblListArgs) InitDefault() {
}

var FabricEblQueryEblListArgs_Req_DEFAULT *QueryEblListReq

func (p *FabricEblQueryEblListArgs) GetReq() (v *QueryEblListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryEblListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryEblListArgs) SetReq(val *QueryEblListReq) {
	p.Req = val
}

func (p *FabricEblQueryEblListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryEblListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryEblListArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryEblListResult struct {
	Success *QueryEblListResp `thrift:"success,0,optional" frugal:"0,optional,QueryEblListResp" json:"success,omitempty"`
}

func NewFabricEblQueryEblListResult() *FabricEblQueryEblListResult {
	return &FabricEblQueryEblListResult{}
}

func (p *FabricEblQueryEblListResult) InitDefault() {
}

var FabricEblQueryEblListResult_Success_DEFAULT *QueryEblListResp

func (p *FabricEblQueryEblListResult) GetSuccess() (v *QueryEblListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryEblListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryEblListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryEblListResp)
}

func (p *FabricEblQueryEblListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryEblListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblListResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryEblListResult = map[int16]string{
	0: "success",
}

type FabricEblOperateEblArgs struct {
	Req *OperateEblReq `thrift:"req,1" frugal:"1,default,OperateEblReq" json:"req"`
}

func NewFabricEblOperateEblArgs() *FabricEblOperateEblArgs {
	return &FabricEblOperateEblArgs{}
}

func (p *FabricEblOperateEblArgs) InitDefault() {
}

var FabricEblOperateEblArgs_Req_DEFAULT *OperateEblReq

func (p *FabricEblOperateEblArgs) GetReq() (v *OperateEblReq) {
	if !p.IsSetReq() {
		return FabricEblOperateEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblOperateEblArgs) SetReq(val *OperateEblReq) {
	p.Req = val
}

func (p *FabricEblOperateEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblOperateEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblOperateEblArgs(%+v)", *p)
}

var fieldIDToName_FabricEblOperateEblArgs = map[int16]string{
	1: "req",
}

type FabricEblOperateEblResult struct {
	Success *OperateEblResp `thrift:"success,0,optional" frugal:"0,optional,OperateEblResp" json:"success,omitempty"`
}

func NewFabricEblOperateEblResult() *FabricEblOperateEblResult {
	return &FabricEblOperateEblResult{}
}

func (p *FabricEblOperateEblResult) InitDefault() {
}

var FabricEblOperateEblResult_Success_DEFAULT *OperateEblResp

func (p *FabricEblOperateEblResult) GetSuccess() (v *OperateEblResp) {
	if !p.IsSetSuccess() {
		return FabricEblOperateEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblOperateEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*OperateEblResp)
}

func (p *FabricEblOperateEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblOperateEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblOperateEblResult(%+v)", *p)
}

var fieldIDToName_FabricEblOperateEblResult = map[int16]string{
	0: "success",
}

type FabricEblUploadSealArgs struct {
	Req *UploadSealReq `thrift:"req,1" frugal:"1,default,UploadSealReq" json:"req"`
}

func NewFabricEblUploadSealArgs() *FabricEblUploadSealArgs {
	return &FabricEblUploadSealArgs{}
}

func (p *FabricEblUploadSealArgs) InitDefault() {
}

var FabricEblUploadSealArgs_Req_DEFAULT *UploadSealReq

func (p *FabricEblUploadSealArgs) GetReq() (v *UploadSealReq) {
	if !p.IsSetReq() {
		return FabricEblUploadSealArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblUploadSealArgs) SetReq(val *UploadSealReq) {
	p.Req = val
}

func (p *FabricEblUploadSealArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblUploadSealArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblUploadSealArgs(%+v)", *p)
}

var fieldIDToName_FabricEblUploadSealArgs = map[int16]string{
	1: "req",
}

type FabricEblUploadSealResult struct {
	Success *UploadSealResp `thrift:"success,0,optional" frugal:"0,optional,UploadSealResp" json:"success,omitempty"`
}

func NewFabricEblUploadSealResult() *FabricEblUploadSealResult {
	return &FabricEblUploadSealResult{}
}

func (p *FabricEblUploadSealResult) InitDefault() {
}

var FabricEblUploadSealResult_Success_DEFAULT *UploadSealResp

func (p *FabricEblUploadSealResult) GetSuccess() (v *UploadSealResp) {
	if !p.IsSetSuccess() {
		return FabricEblUploadSealResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblUploadSealResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadSealResp)
}

func (p *FabricEblUploadSealResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblUploadSealResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblUploadSealResult(%+v)", *p)
}

var fieldIDToName_FabricEblUploadSealResult = map[int16]string{
	0: "success",
}

type FabricEblCheckTokenArgs struct {
	Req *CheckTokenReq `thrift:"req,1" frugal:"1,default,CheckTokenReq" json:"req"`
}

func NewFabricEblCheckTokenArgs() *FabricEblCheckTokenArgs {
	return &FabricEblCheckTokenArgs{}
}

func (p *FabricEblCheckTokenArgs) InitDefault() {
}

var FabricEblCheckTokenArgs_Req_DEFAULT *CheckTokenReq

func (p *FabricEblCheckTokenArgs) GetReq() (v *CheckTokenReq) {
	if !p.IsSetReq() {
		return FabricEblCheckTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCheckTokenArgs) SetReq(val *CheckTokenReq) {
	p.Req = val
}

func (p *FabricEblCheckTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCheckTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCheckTokenArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCheckTokenArgs = map[int16]string{
	1: "req",
}

type FabricEblCheckTokenResult struct {
	Success *CheckTokenResp `thrift:"success,0,optional" frugal:"0,optional,CheckTokenResp" json:"success,omitempty"`
}

func NewFabricEblCheckTokenResult() *FabricEblCheckTokenResult {
	return &FabricEblCheckTokenResult{}
}

func (p *FabricEblCheckTokenResult) InitDefault() {
}

var FabricEblCheckTokenResult_Success_DEFAULT *CheckTokenResp

func (p *FabricEblCheckTokenResult) GetSuccess() (v *CheckTokenResp) {
	if !p.IsSetSuccess() {
		return FabricEblCheckTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCheckTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckTokenResp)
}

func (p *FabricEblCheckTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCheckTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCheckTokenResult(%+v)", *p)
}

var fieldIDToName_FabricEblCheckTokenResult = map[int16]string{
	0: "success",
}

type FabricEblCreateInvoiceArgs struct {
	Req *CreateInvoiceReq `thrift:"req,1" frugal:"1,default,CreateInvoiceReq" json:"req"`
}

func NewFabricEblCreateInvoiceArgs() *FabricEblCreateInvoiceArgs {
	return &FabricEblCreateInvoiceArgs{}
}

func (p *FabricEblCreateInvoiceArgs) InitDefault() {
}

var FabricEblCreateInvoiceArgs_Req_DEFAULT *CreateInvoiceReq

func (p *FabricEblCreateInvoiceArgs) GetReq() (v *CreateInvoiceReq) {
	if !p.IsSetReq() {
		return FabricEblCreateInvoiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateInvoiceArgs) SetReq(val *CreateInvoiceReq) {
	p.Req = val
}

func (p *FabricEblCreateInvoiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateInvoiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateInvoiceArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCreateInvoiceArgs = map[int16]string{
	1: "req",
}

type FabricEblCreateInvoiceResult struct {
	Success *CreateInvoiceResp `thrift:"success,0,optional" frugal:"0,optional,CreateInvoiceResp" json:"success,omitempty"`
}

func NewFabricEblCreateInvoiceResult() *FabricEblCreateInvoiceResult {
	return &FabricEblCreateInvoiceResult{}
}

func (p *FabricEblCreateInvoiceResult) InitDefault() {
}

var FabricEblCreateInvoiceResult_Success_DEFAULT *CreateInvoiceResp

func (p *FabricEblCreateInvoiceResult) GetSuccess() (v *CreateInvoiceResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateInvoiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateInvoiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateInvoiceResp)
}

func (p *FabricEblCreateInvoiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateInvoiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateInvoiceResult(%+v)", *p)
}

var fieldIDToName_FabricEblCreateInvoiceResult = map[int16]string{
	0: "success",
}

type FabricEblCreateContractArgs struct {
	Req *CreateContractReq `thrift:"req,1" frugal:"1,default,CreateContractReq" json:"req"`
}

func NewFabricEblCreateContractArgs() *FabricEblCreateContractArgs {
	return &FabricEblCreateContractArgs{}
}

func (p *FabricEblCreateContractArgs) InitDefault() {
}

var FabricEblCreateContractArgs_Req_DEFAULT *CreateContractReq

func (p *FabricEblCreateContractArgs) GetReq() (v *CreateContractReq) {
	if !p.IsSetReq() {
		return FabricEblCreateContractArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateContractArgs) SetReq(val *CreateContractReq) {
	p.Req = val
}

func (p *FabricEblCreateContractArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateContractArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateContractArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCreateContractArgs = map[int16]string{
	1: "req",
}

type FabricEblCreateContractResult struct {
	Success *CreateContractResp `thrift:"success,0,optional" frugal:"0,optional,CreateContractResp" json:"success,omitempty"`
}

func NewFabricEblCreateContractResult() *FabricEblCreateContractResult {
	return &FabricEblCreateContractResult{}
}

func (p *FabricEblCreateContractResult) InitDefault() {
}

var FabricEblCreateContractResult_Success_DEFAULT *CreateContractResp

func (p *FabricEblCreateContractResult) GetSuccess() (v *CreateContractResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateContractResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateContractResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateContractResp)
}

func (p *FabricEblCreateContractResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateContractResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateContractResult(%+v)", *p)
}

var fieldIDToName_FabricEblCreateContractResult = map[int16]string{
	0: "success",
}

type FabricEblCreateDocumentArgs struct {
	Req *CreateDocumentReq `thrift:"req,1" frugal:"1,default,CreateDocumentReq" json:"req"`
}

func NewFabricEblCreateDocumentArgs() *FabricEblCreateDocumentArgs {
	return &FabricEblCreateDocumentArgs{}
}

func (p *FabricEblCreateDocumentArgs) InitDefault() {
}

var FabricEblCreateDocumentArgs_Req_DEFAULT *CreateDocumentReq

func (p *FabricEblCreateDocumentArgs) GetReq() (v *CreateDocumentReq) {
	if !p.IsSetReq() {
		return FabricEblCreateDocumentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateDocumentArgs) SetReq(val *CreateDocumentReq) {
	p.Req = val
}

func (p *FabricEblCreateDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateDocumentArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCreateDocumentArgs = map[int16]string{
	1: "req",
}

type FabricEblCreateDocumentResult struct {
	Success *CreateDocumentResp `thrift:"success,0,optional" frugal:"0,optional,CreateDocumentResp" json:"success,omitempty"`
}

func NewFabricEblCreateDocumentResult() *FabricEblCreateDocumentResult {
	return &FabricEblCreateDocumentResult{}
}

func (p *FabricEblCreateDocumentResult) InitDefault() {
}

var FabricEblCreateDocumentResult_Success_DEFAULT *CreateDocumentResp

func (p *FabricEblCreateDocumentResult) GetSuccess() (v *CreateDocumentResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateDocumentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateDocumentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateDocumentResp)
}

func (p *FabricEblCreateDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateDocumentResult(%+v)", *p)
}

var fieldIDToName_FabricEblCreateDocumentResult = map[int16]string{
	0: "success",
}

type FabricEblQueryInvoiceListArgs struct {
	Req *QueryInvoiceListReq `thrift:"req,1" frugal:"1,default,QueryInvoiceListReq" json:"req"`
}

func NewFabricEblQueryInvoiceListArgs() *FabricEblQueryInvoiceListArgs {
	return &FabricEblQueryInvoiceListArgs{}
}

func (p *FabricEblQueryInvoiceListArgs) InitDefault() {
}

var FabricEblQueryInvoiceListArgs_Req_DEFAULT *QueryInvoiceListReq

func (p *FabricEblQueryInvoiceListArgs) GetReq() (v *QueryInvoiceListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryInvoiceListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryInvoiceListArgs) SetReq(val *QueryInvoiceListReq) {
	p.Req = val
}

func (p *FabricEblQueryInvoiceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryInvoiceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryInvoiceListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryInvoiceListArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryInvoiceListResult struct {
	Success *QueryInvoiceListResp `thrift:"success,0,optional" frugal:"0,optional,QueryInvoiceListResp" json:"success,omitempty"`
}

func NewFabricEblQueryInvoiceListResult() *FabricEblQueryInvoiceListResult {
	return &FabricEblQueryInvoiceListResult{}
}

func (p *FabricEblQueryInvoiceListResult) InitDefault() {
}

var FabricEblQueryInvoiceListResult_Success_DEFAULT *QueryInvoiceListResp

func (p *FabricEblQueryInvoiceListResult) GetSuccess() (v *QueryInvoiceListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryInvoiceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryInvoiceListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryInvoiceListResp)
}

func (p *FabricEblQueryInvoiceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryInvoiceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryInvoiceListResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryInvoiceListResult = map[int16]string{
	0: "success",
}

type FabricEblQueryContractListArgs struct {
	Req *QueryContractListReq `thrift:"req,1" frugal:"1,default,QueryContractListReq" json:"req"`
}

func NewFabricEblQueryContractListArgs() *FabricEblQueryContractListArgs {
	return &FabricEblQueryContractListArgs{}
}

func (p *FabricEblQueryContractListArgs) InitDefault() {
}

var FabricEblQueryContractListArgs_Req_DEFAULT *QueryContractListReq

func (p *FabricEblQueryContractListArgs) GetReq() (v *QueryContractListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryContractListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryContractListArgs) SetReq(val *QueryContractListReq) {
	p.Req = val
}

func (p *FabricEblQueryContractListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryContractListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryContractListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryContractListArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryContractListResult struct {
	Success *QueryContractListResp `thrift:"success,0,optional" frugal:"0,optional,QueryContractListResp" json:"success,omitempty"`
}

func NewFabricEblQueryContractListResult() *FabricEblQueryContractListResult {
	return &FabricEblQueryContractListResult{}
}

func (p *FabricEblQueryContractListResult) InitDefault() {
}

var FabricEblQueryContractListResult_Success_DEFAULT *QueryContractListResp

func (p *FabricEblQueryContractListResult) GetSuccess() (v *QueryContractListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryContractListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryContractListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryContractListResp)
}

func (p *FabricEblQueryContractListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryContractListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryContractListResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryContractListResult = map[int16]string{
	0: "success",
}

type FabricEblQueryDocumentListArgs struct {
	Req *QueryDocumentListReq `thrift:"req,1" frugal:"1,default,QueryDocumentListReq" json:"req"`
}

func NewFabricEblQueryDocumentListArgs() *FabricEblQueryDocumentListArgs {
	return &FabricEblQueryDocumentListArgs{}
}

func (p *FabricEblQueryDocumentListArgs) InitDefault() {
}

var FabricEblQueryDocumentListArgs_Req_DEFAULT *QueryDocumentListReq

func (p *FabricEblQueryDocumentListArgs) GetReq() (v *QueryDocumentListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryDocumentListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryDocumentListArgs) SetReq(val *QueryDocumentListReq) {
	p.Req = val
}

func (p *FabricEblQueryDocumentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryDocumentListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryDocumentListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryDocumentListArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryDocumentListResult struct {
	Success *QueryDocumentListResp `thrift:"success,0,optional" frugal:"0,optional,QueryDocumentListResp" json:"success,omitempty"`
}

func NewFabricEblQueryDocumentListResult() *FabricEblQueryDocumentListResult {
	return &FabricEblQueryDocumentListResult{}
}

func (p *FabricEblQueryDocumentListResult) InitDefault() {
}

var FabricEblQueryDocumentListResult_Success_DEFAULT *QueryDocumentListResp

func (p *FabricEblQueryDocumentListResult) GetSuccess() (v *QueryDocumentListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryDocumentListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryDocumentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryDocumentListResp)
}

func (p *FabricEblQueryDocumentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryDocumentListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryDocumentListResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryDocumentListResult = map[int16]string{
	0: "success",
}

type FabricEblGetInvoiceArgs struct {
	Req *GetInvoiceReq `thrift:"req,1" frugal:"1,default,GetInvoiceReq" json:"req"`
}

func NewFabricEblGetInvoiceArgs() *FabricEblGetInvoiceArgs {
	return &FabricEblGetInvoiceArgs{}
}

func (p *FabricEblGetInvoiceArgs) InitDefault() {
}

var FabricEblGetInvoiceArgs_Req_DEFAULT *GetInvoiceReq

func (p *FabricEblGetInvoiceArgs) GetReq() (v *GetInvoiceReq) {
	if !p.IsSetReq() {
		return FabricEblGetInvoiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetInvoiceArgs) SetReq(val *GetInvoiceReq) {
	p.Req = val
}

func (p *FabricEblGetInvoiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetInvoiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetInvoiceArgs(%+v)", *p)
}

var fieldIDToName_FabricEblGetInvoiceArgs = map[int16]string{
	1: "req",
}

type FabricEblGetInvoiceResult struct {
	Success *GetInvoiceResp `thrift:"success,0,optional" frugal:"0,optional,GetInvoiceResp" json:"success,omitempty"`
}

func NewFabricEblGetInvoiceResult() *FabricEblGetInvoiceResult {
	return &FabricEblGetInvoiceResult{}
}

func (p *FabricEblGetInvoiceResult) InitDefault() {
}

var FabricEblGetInvoiceResult_Success_DEFAULT *GetInvoiceResp

func (p *FabricEblGetInvoiceResult) GetSuccess() (v *GetInvoiceResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetInvoiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetInvoiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetInvoiceResp)
}

func (p *FabricEblGetInvoiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetInvoiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetInvoiceResult(%+v)", *p)
}

var fieldIDToName_FabricEblGetInvoiceResult = map[int16]string{
	0: "success",
}

type FabricEblGetContractArgs struct {
	Req *GetContractReq `thrift:"req,1" frugal:"1,default,GetContractReq" json:"req"`
}

func NewFabricEblGetContractArgs() *FabricEblGetContractArgs {
	return &FabricEblGetContractArgs{}
}

func (p *FabricEblGetContractArgs) InitDefault() {
}

var FabricEblGetContractArgs_Req_DEFAULT *GetContractReq

func (p *FabricEblGetContractArgs) GetReq() (v *GetContractReq) {
	if !p.IsSetReq() {
		return FabricEblGetContractArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetContractArgs) SetReq(val *GetContractReq) {
	p.Req = val
}

func (p *FabricEblGetContractArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetContractArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetContractArgs(%+v)", *p)
}

var fieldIDToName_FabricEblGetContractArgs = map[int16]string{
	1: "req",
}

type FabricEblGetContractResult struct {
	Success *GetContractResp `thrift:"success,0,optional" frugal:"0,optional,GetContractResp" json:"success,omitempty"`
}

func NewFabricEblGetContractResult() *FabricEblGetContractResult {
	return &FabricEblGetContractResult{}
}

func (p *FabricEblGetContractResult) InitDefault() {
}

var FabricEblGetContractResult_Success_DEFAULT *GetContractResp

func (p *FabricEblGetContractResult) GetSuccess() (v *GetContractResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetContractResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetContractResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetContractResp)
}

func (p *FabricEblGetContractResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetContractResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetContractResult(%+v)", *p)
}

var fieldIDToName_FabricEblGetContractResult = map[int16]string{
	0: "success",
}

type FabricEblGetDocumentArgs struct {
	Req *GetDocumentReq `thrift:"req,1" frugal:"1,default,GetDocumentReq" json:"req"`
}

func NewFabricEblGetDocumentArgs() *FabricEblGetDocumentArgs {
	return &FabricEblGetDocumentArgs{}
}

func (p *FabricEblGetDocumentArgs) InitDefault() {
}

var FabricEblGetDocumentArgs_Req_DEFAULT *GetDocumentReq

func (p *FabricEblGetDocumentArgs) GetReq() (v *GetDocumentReq) {
	if !p.IsSetReq() {
		return FabricEblGetDocumentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblGetDocumentArgs) SetReq(val *GetDocumentReq) {
	p.Req = val
}

func (p *FabricEblGetDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblGetDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetDocumentArgs(%+v)", *p)
}

var fieldIDToName_FabricEblGetDocumentArgs = map[int16]string{
	1: "req",
}

type FabricEblGetDocumentResult struct {
	Success *GetDocumentResp `thrift:"success,0,optional" frugal:"0,optional,GetDocumentResp" json:"success,omitempty"`
}

func NewFabricEblGetDocumentResult() *FabricEblGetDocumentResult {
	return &FabricEblGetDocumentResult{}
}

func (p *FabricEblGetDocumentResult) InitDefault() {
}

var FabricEblGetDocumentResult_Success_DEFAULT *GetDocumentResp

func (p *FabricEblGetDocumentResult) GetSuccess() (v *GetDocumentResp) {
	if !p.IsSetSuccess() {
		return FabricEblGetDocumentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblGetDocumentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDocumentResp)
}

func (p *FabricEblGetDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblGetDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblGetDocumentResult(%+v)", *p)
}

var fieldIDToName_FabricEblGetDocumentResult = map[int16]string{
	0: "success",
}

type FabricEblQuerySealArgs struct {
	Req *QuerySealReq `thrift:"req,1" frugal:"1,default,QuerySealReq" json:"req"`
}

func NewFabricEblQuerySealArgs() *FabricEblQuerySealArgs {
	return &FabricEblQuerySealArgs{}
}

func (p *FabricEblQuerySealArgs) InitDefault() {
}

var FabricEblQuerySealArgs_Req_DEFAULT *QuerySealReq

func (p *FabricEblQuerySealArgs) GetReq() (v *QuerySealReq) {
	if !p.IsSetReq() {
		return FabricEblQuerySealArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQuerySealArgs) SetReq(val *QuerySealReq) {
	p.Req = val
}

func (p *FabricEblQuerySealArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQuerySealArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQuerySealArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQuerySealArgs = map[int16]string{
	1: "req",
}

type FabricEblQuerySealResult struct {
	Success *QuerySealResp `thrift:"success,0,optional" frugal:"0,optional,QuerySealResp" json:"success,omitempty"`
}

func NewFabricEblQuerySealResult() *FabricEblQuerySealResult {
	return &FabricEblQuerySealResult{}
}

func (p *FabricEblQuerySealResult) InitDefault() {
}

var FabricEblQuerySealResult_Success_DEFAULT *QuerySealResp

func (p *FabricEblQuerySealResult) GetSuccess() (v *QuerySealResp) {
	if !p.IsSetSuccess() {
		return FabricEblQuerySealResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQuerySealResult) SetSuccess(x interface{}) {
	p.Success = x.(*QuerySealResp)
}

func (p *FabricEblQuerySealResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQuerySealResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQuerySealResult(%+v)", *p)
}

var fieldIDToName_FabricEblQuerySealResult = map[int16]string{
	0: "success",
}

type FabricEblDeleteSealArgs struct {
	Req *DeleteSealReq `thrift:"req,1" frugal:"1,default,DeleteSealReq" json:"req"`
}

func NewFabricEblDeleteSealArgs() *FabricEblDeleteSealArgs {
	return &FabricEblDeleteSealArgs{}
}

func (p *FabricEblDeleteSealArgs) InitDefault() {
}

var FabricEblDeleteSealArgs_Req_DEFAULT *DeleteSealReq

func (p *FabricEblDeleteSealArgs) GetReq() (v *DeleteSealReq) {
	if !p.IsSetReq() {
		return FabricEblDeleteSealArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblDeleteSealArgs) SetReq(val *DeleteSealReq) {
	p.Req = val
}

func (p *FabricEblDeleteSealArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblDeleteSealArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblDeleteSealArgs(%+v)", *p)
}

var fieldIDToName_FabricEblDeleteSealArgs = map[int16]string{
	1: "req",
}

type FabricEblDeleteSealResult struct {
	Success *DeleteSealResp `thrift:"success,0,optional" frugal:"0,optional,DeleteSealResp" json:"success,omitempty"`
}

func NewFabricEblDeleteSealResult() *FabricEblDeleteSealResult {
	return &FabricEblDeleteSealResult{}
}

func (p *FabricEblDeleteSealResult) InitDefault() {
}

var FabricEblDeleteSealResult_Success_DEFAULT *DeleteSealResp

func (p *FabricEblDeleteSealResult) GetSuccess() (v *DeleteSealResp) {
	if !p.IsSetSuccess() {
		return FabricEblDeleteSealResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblDeleteSealResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSealResp)
}

func (p *FabricEblDeleteSealResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblDeleteSealResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblDeleteSealResult(%+v)", *p)
}

var fieldIDToName_FabricEblDeleteSealResult = map[int16]string{
	0: "success",
}

type FabricEblQueryEblTransferLogArgs struct {
	Req *QueryEblTransferLogReq `thrift:"req,1" frugal:"1,default,QueryEblTransferLogReq" json:"req"`
}

func NewFabricEblQueryEblTransferLogArgs() *FabricEblQueryEblTransferLogArgs {
	return &FabricEblQueryEblTransferLogArgs{}
}

func (p *FabricEblQueryEblTransferLogArgs) InitDefault() {
}

var FabricEblQueryEblTransferLogArgs_Req_DEFAULT *QueryEblTransferLogReq

func (p *FabricEblQueryEblTransferLogArgs) GetReq() (v *QueryEblTransferLogReq) {
	if !p.IsSetReq() {
		return FabricEblQueryEblTransferLogArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryEblTransferLogArgs) SetReq(val *QueryEblTransferLogReq) {
	p.Req = val
}

func (p *FabricEblQueryEblTransferLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryEblTransferLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblTransferLogArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryEblTransferLogArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryEblTransferLogResult struct {
	Success *QueryEblTransferLogResp `thrift:"success,0,optional" frugal:"0,optional,QueryEblTransferLogResp" json:"success,omitempty"`
}

func NewFabricEblQueryEblTransferLogResult() *FabricEblQueryEblTransferLogResult {
	return &FabricEblQueryEblTransferLogResult{}
}

func (p *FabricEblQueryEblTransferLogResult) InitDefault() {
}

var FabricEblQueryEblTransferLogResult_Success_DEFAULT *QueryEblTransferLogResp

func (p *FabricEblQueryEblTransferLogResult) GetSuccess() (v *QueryEblTransferLogResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryEblTransferLogResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryEblTransferLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryEblTransferLogResp)
}

func (p *FabricEblQueryEblTransferLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryEblTransferLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblTransferLogResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryEblTransferLogResult = map[int16]string{
	0: "success",
}

type FabricEblCreateCompanyUserArgs struct {
	Req *CreateCompanyUserReq `thrift:"req,1" frugal:"1,default,CreateCompanyUserReq" json:"req"`
}

func NewFabricEblCreateCompanyUserArgs() *FabricEblCreateCompanyUserArgs {
	return &FabricEblCreateCompanyUserArgs{}
}

func (p *FabricEblCreateCompanyUserArgs) InitDefault() {
}

var FabricEblCreateCompanyUserArgs_Req_DEFAULT *CreateCompanyUserReq

func (p *FabricEblCreateCompanyUserArgs) GetReq() (v *CreateCompanyUserReq) {
	if !p.IsSetReq() {
		return FabricEblCreateCompanyUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblCreateCompanyUserArgs) SetReq(val *CreateCompanyUserReq) {
	p.Req = val
}

func (p *FabricEblCreateCompanyUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblCreateCompanyUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyUserArgs(%+v)", *p)
}

var fieldIDToName_FabricEblCreateCompanyUserArgs = map[int16]string{
	1: "req",
}

type FabricEblCreateCompanyUserResult struct {
	Success *CreateCompanyUserResp `thrift:"success,0,optional" frugal:"0,optional,CreateCompanyUserResp" json:"success,omitempty"`
}

func NewFabricEblCreateCompanyUserResult() *FabricEblCreateCompanyUserResult {
	return &FabricEblCreateCompanyUserResult{}
}

func (p *FabricEblCreateCompanyUserResult) InitDefault() {
}

var FabricEblCreateCompanyUserResult_Success_DEFAULT *CreateCompanyUserResp

func (p *FabricEblCreateCompanyUserResult) GetSuccess() (v *CreateCompanyUserResp) {
	if !p.IsSetSuccess() {
		return FabricEblCreateCompanyUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblCreateCompanyUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCompanyUserResp)
}

func (p *FabricEblCreateCompanyUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblCreateCompanyUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblCreateCompanyUserResult(%+v)", *p)
}

var fieldIDToName_FabricEblCreateCompanyUserResult = map[int16]string{
	0: "success",
}

type FabricEblQueryCompanyUserListArgs struct {
	Req *QueryCompanyUserListReq `thrift:"req,1" frugal:"1,default,QueryCompanyUserListReq" json:"req"`
}

func NewFabricEblQueryCompanyUserListArgs() *FabricEblQueryCompanyUserListArgs {
	return &FabricEblQueryCompanyUserListArgs{}
}

func (p *FabricEblQueryCompanyUserListArgs) InitDefault() {
}

var FabricEblQueryCompanyUserListArgs_Req_DEFAULT *QueryCompanyUserListReq

func (p *FabricEblQueryCompanyUserListArgs) GetReq() (v *QueryCompanyUserListReq) {
	if !p.IsSetReq() {
		return FabricEblQueryCompanyUserListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryCompanyUserListArgs) SetReq(val *QueryCompanyUserListReq) {
	p.Req = val
}

func (p *FabricEblQueryCompanyUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryCompanyUserListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryCompanyUserListArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryCompanyUserListArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryCompanyUserListResult struct {
	Success *QueryCompanyUserListResp `thrift:"success,0,optional" frugal:"0,optional,QueryCompanyUserListResp" json:"success,omitempty"`
}

func NewFabricEblQueryCompanyUserListResult() *FabricEblQueryCompanyUserListResult {
	return &FabricEblQueryCompanyUserListResult{}
}

func (p *FabricEblQueryCompanyUserListResult) InitDefault() {
}

var FabricEblQueryCompanyUserListResult_Success_DEFAULT *QueryCompanyUserListResp

func (p *FabricEblQueryCompanyUserListResult) GetSuccess() (v *QueryCompanyUserListResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryCompanyUserListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryCompanyUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryCompanyUserListResp)
}

func (p *FabricEblQueryCompanyUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryCompanyUserListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryCompanyUserListResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryCompanyUserListResult = map[int16]string{
	0: "success",
}

type FabricEblQueryEblDetailArgs struct {
	Req *QueryEblDetailReq `thrift:"req,1" frugal:"1,default,QueryEblDetailReq" json:"req"`
}

func NewFabricEblQueryEblDetailArgs() *FabricEblQueryEblDetailArgs {
	return &FabricEblQueryEblDetailArgs{}
}

func (p *FabricEblQueryEblDetailArgs) InitDefault() {
}

var FabricEblQueryEblDetailArgs_Req_DEFAULT *QueryEblDetailReq

func (p *FabricEblQueryEblDetailArgs) GetReq() (v *QueryEblDetailReq) {
	if !p.IsSetReq() {
		return FabricEblQueryEblDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricEblQueryEblDetailArgs) SetReq(val *QueryEblDetailReq) {
	p.Req = val
}

func (p *FabricEblQueryEblDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricEblQueryEblDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblDetailArgs(%+v)", *p)
}

var fieldIDToName_FabricEblQueryEblDetailArgs = map[int16]string{
	1: "req",
}

type FabricEblQueryEblDetailResult struct {
	Success *QueryEblDetailResp `thrift:"success,0,optional" frugal:"0,optional,QueryEblDetailResp" json:"success,omitempty"`
}

func NewFabricEblQueryEblDetailResult() *FabricEblQueryEblDetailResult {
	return &FabricEblQueryEblDetailResult{}
}

func (p *FabricEblQueryEblDetailResult) InitDefault() {
}

var FabricEblQueryEblDetailResult_Success_DEFAULT *QueryEblDetailResp

func (p *FabricEblQueryEblDetailResult) GetSuccess() (v *QueryEblDetailResp) {
	if !p.IsSetSuccess() {
		return FabricEblQueryEblDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricEblQueryEblDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryEblDetailResp)
}

func (p *FabricEblQueryEblDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricEblQueryEblDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricEblQueryEblDetailResult(%+v)", *p)
}

var fieldIDToName_FabricEblQueryEblDetailResult = map[int16]string{
	0: "success",
}
