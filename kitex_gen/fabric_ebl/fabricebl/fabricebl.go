// Code generated by Kitex v0.12.2. DO NOT EDIT.

package fabricebl

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	fabric_ebl "github.com/wxl-server/idl_gen/kitex_gen/fabric_ebl"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateCompany": kitex.NewMethodInfo(
		createCompanyHandler,
		newFabricEblCreateCompanyArgs,
		newFabricEblCreateCompanyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newFabricEblLoginArgs,
		newFabricEblLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newFabricEblGetUserInfoArgs,
		newFabricEblGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCompanyAllList": kitex.NewMethodInfo(
		getCompanyAllListHandler,
		newFabricEblGetCompanyAllListArgs,
		newFabricEblGetCompanyAllListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	fabricEblServiceInfo                = NewServiceInfo()
	fabricEblServiceInfoForClient       = NewServiceInfoForClient()
	fabricEblServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return fabricEblServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return fabricEblServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return fabricEblServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FabricEbl"
	handlerType := (*fabric_ebl.FabricEbl)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "fabric_ebl",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.2",
		Extra:           extra,
	}
	return svcInfo
}

func createCompanyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*fabric_ebl.FabricEblCreateCompanyArgs)
	realResult := result.(*fabric_ebl.FabricEblCreateCompanyResult)
	success, err := handler.(fabric_ebl.FabricEbl).CreateCompany(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFabricEblCreateCompanyArgs() interface{} {
	return fabric_ebl.NewFabricEblCreateCompanyArgs()
}

func newFabricEblCreateCompanyResult() interface{} {
	return fabric_ebl.NewFabricEblCreateCompanyResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*fabric_ebl.FabricEblLoginArgs)
	realResult := result.(*fabric_ebl.FabricEblLoginResult)
	success, err := handler.(fabric_ebl.FabricEbl).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFabricEblLoginArgs() interface{} {
	return fabric_ebl.NewFabricEblLoginArgs()
}

func newFabricEblLoginResult() interface{} {
	return fabric_ebl.NewFabricEblLoginResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*fabric_ebl.FabricEblGetUserInfoArgs)
	realResult := result.(*fabric_ebl.FabricEblGetUserInfoResult)
	success, err := handler.(fabric_ebl.FabricEbl).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFabricEblGetUserInfoArgs() interface{} {
	return fabric_ebl.NewFabricEblGetUserInfoArgs()
}

func newFabricEblGetUserInfoResult() interface{} {
	return fabric_ebl.NewFabricEblGetUserInfoResult()
}

func getCompanyAllListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*fabric_ebl.FabricEblGetCompanyAllListArgs)
	realResult := result.(*fabric_ebl.FabricEblGetCompanyAllListResult)
	success, err := handler.(fabric_ebl.FabricEbl).GetCompanyAllList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFabricEblGetCompanyAllListArgs() interface{} {
	return fabric_ebl.NewFabricEblGetCompanyAllListArgs()
}

func newFabricEblGetCompanyAllListResult() interface{} {
	return fabric_ebl.NewFabricEblGetCompanyAllListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateCompany(ctx context.Context, req *fabric_ebl.CreateCompanyReq) (r *fabric_ebl.CreateCompanyResp, err error) {
	var _args fabric_ebl.FabricEblCreateCompanyArgs
	_args.Req = req
	var _result fabric_ebl.FabricEblCreateCompanyResult
	if err = p.c.Call(ctx, "CreateCompany", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *fabric_ebl.LoginReq) (r *fabric_ebl.LoginResp, err error) {
	var _args fabric_ebl.FabricEblLoginArgs
	_args.Req = req
	var _result fabric_ebl.FabricEblLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *fabric_ebl.GetUserInfoReq) (r *fabric_ebl.GetUserInfoResp, err error) {
	var _args fabric_ebl.FabricEblGetUserInfoArgs
	_args.Req = req
	var _result fabric_ebl.FabricEblGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCompanyAllList(ctx context.Context, req *fabric_ebl.GetCompanyAllListReq) (r *fabric_ebl.GetCompanyAllListResp, err error) {
	var _args fabric_ebl.FabricEblGetCompanyAllListArgs
	_args.Req = req
	var _result fabric_ebl.FabricEblGetCompanyAllListResult
	if err = p.c.Call(ctx, "GetCompanyAllList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
