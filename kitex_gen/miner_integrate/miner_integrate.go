// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package miner_integrate

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
)

type UpdateMockProducerQpsReq struct {
	ProductBaseInfoQps       *int64 `thrift:"product_base_info_qps,1,optional" frugal:"1,optional,i64" json:"product_base_info_qps,omitempty"`
	ProductShopInfoQps       *int64 `thrift:"product_shop_info_qps,2,optional" frugal:"2,optional,i64" json:"product_shop_info_qps,omitempty"`
	ProductLogoModelInfoQps  *int64 `thrift:"product_logo_model_info_qps,3,optional" frugal:"3,optional,i64" json:"product_logo_model_info_qps,omitempty"`
	ProductImageModelInfoQps *int64 `thrift:"product_image_model_info_qps,4,optional" frugal:"4,optional,i64" json:"product_image_model_info_qps,omitempty"`
	SetProducer              *bool  `thrift:"set_producer,5,optional" frugal:"5,optional,bool" json:"set_producer,omitempty"`
	SetConsumer              *bool  `thrift:"set_consumer,6,optional" frugal:"6,optional,bool" json:"set_consumer,omitempty"`
}

func NewUpdateMockProducerQpsReq() *UpdateMockProducerQpsReq {
	return &UpdateMockProducerQpsReq{}
}

func (p *UpdateMockProducerQpsReq) InitDefault() {
}

var UpdateMockProducerQpsReq_ProductBaseInfoQps_DEFAULT int64

func (p *UpdateMockProducerQpsReq) GetProductBaseInfoQps() (v int64) {
	if !p.IsSetProductBaseInfoQps() {
		return UpdateMockProducerQpsReq_ProductBaseInfoQps_DEFAULT
	}
	return *p.ProductBaseInfoQps
}

var UpdateMockProducerQpsReq_ProductShopInfoQps_DEFAULT int64

func (p *UpdateMockProducerQpsReq) GetProductShopInfoQps() (v int64) {
	if !p.IsSetProductShopInfoQps() {
		return UpdateMockProducerQpsReq_ProductShopInfoQps_DEFAULT
	}
	return *p.ProductShopInfoQps
}

var UpdateMockProducerQpsReq_ProductLogoModelInfoQps_DEFAULT int64

func (p *UpdateMockProducerQpsReq) GetProductLogoModelInfoQps() (v int64) {
	if !p.IsSetProductLogoModelInfoQps() {
		return UpdateMockProducerQpsReq_ProductLogoModelInfoQps_DEFAULT
	}
	return *p.ProductLogoModelInfoQps
}

var UpdateMockProducerQpsReq_ProductImageModelInfoQps_DEFAULT int64

func (p *UpdateMockProducerQpsReq) GetProductImageModelInfoQps() (v int64) {
	if !p.IsSetProductImageModelInfoQps() {
		return UpdateMockProducerQpsReq_ProductImageModelInfoQps_DEFAULT
	}
	return *p.ProductImageModelInfoQps
}

var UpdateMockProducerQpsReq_SetProducer_DEFAULT bool

func (p *UpdateMockProducerQpsReq) GetSetProducer() (v bool) {
	if !p.IsSetSetProducer() {
		return UpdateMockProducerQpsReq_SetProducer_DEFAULT
	}
	return *p.SetProducer
}

var UpdateMockProducerQpsReq_SetConsumer_DEFAULT bool

func (p *UpdateMockProducerQpsReq) GetSetConsumer() (v bool) {
	if !p.IsSetSetConsumer() {
		return UpdateMockProducerQpsReq_SetConsumer_DEFAULT
	}
	return *p.SetConsumer
}
func (p *UpdateMockProducerQpsReq) SetProductBaseInfoQps(val *int64) {
	p.ProductBaseInfoQps = val
}
func (p *UpdateMockProducerQpsReq) SetProductShopInfoQps(val *int64) {
	p.ProductShopInfoQps = val
}
func (p *UpdateMockProducerQpsReq) SetProductLogoModelInfoQps(val *int64) {
	p.ProductLogoModelInfoQps = val
}
func (p *UpdateMockProducerQpsReq) SetProductImageModelInfoQps(val *int64) {
	p.ProductImageModelInfoQps = val
}
func (p *UpdateMockProducerQpsReq) SetSetProducer(val *bool) {
	p.SetProducer = val
}
func (p *UpdateMockProducerQpsReq) SetSetConsumer(val *bool) {
	p.SetConsumer = val
}

var fieldIDToName_UpdateMockProducerQpsReq = map[int16]string{
	1: "product_base_info_qps",
	2: "product_shop_info_qps",
	3: "product_logo_model_info_qps",
	4: "product_image_model_info_qps",
	5: "set_producer",
	6: "set_consumer",
}

func (p *UpdateMockProducerQpsReq) IsSetProductBaseInfoQps() bool {
	return p.ProductBaseInfoQps != nil
}

func (p *UpdateMockProducerQpsReq) IsSetProductShopInfoQps() bool {
	return p.ProductShopInfoQps != nil
}

func (p *UpdateMockProducerQpsReq) IsSetProductLogoModelInfoQps() bool {
	return p.ProductLogoModelInfoQps != nil
}

func (p *UpdateMockProducerQpsReq) IsSetProductImageModelInfoQps() bool {
	return p.ProductImageModelInfoQps != nil
}

func (p *UpdateMockProducerQpsReq) IsSetSetProducer() bool {
	return p.SetProducer != nil
}

func (p *UpdateMockProducerQpsReq) IsSetSetConsumer() bool {
	return p.SetConsumer != nil
}

func (p *UpdateMockProducerQpsReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateMockProducerQpsReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProductBaseInfoQps = _field
	return nil
}
func (p *UpdateMockProducerQpsReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProductShopInfoQps = _field
	return nil
}
func (p *UpdateMockProducerQpsReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProductLogoModelInfoQps = _field
	return nil
}
func (p *UpdateMockProducerQpsReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProductImageModelInfoQps = _field
	return nil
}
func (p *UpdateMockProducerQpsReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SetProducer = _field
	return nil
}
func (p *UpdateMockProducerQpsReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SetConsumer = _field
	return nil
}

func (p *UpdateMockProducerQpsReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMockProducerQpsReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductBaseInfoQps() {
		if err = oprot.WriteFieldBegin("product_base_info_qps", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ProductBaseInfoQps); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductShopInfoQps() {
		if err = oprot.WriteFieldBegin("product_shop_info_qps", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ProductShopInfoQps); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductLogoModelInfoQps() {
		if err = oprot.WriteFieldBegin("product_logo_model_info_qps", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ProductLogoModelInfoQps); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductImageModelInfoQps() {
		if err = oprot.WriteFieldBegin("product_image_model_info_qps", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ProductImageModelInfoQps); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetProducer() {
		if err = oprot.WriteFieldBegin("set_producer", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SetProducer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetConsumer() {
		if err = oprot.WriteFieldBegin("set_consumer", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SetConsumer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateMockProducerQpsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMockProducerQpsReq(%+v)", *p)

}

func (p *UpdateMockProducerQpsReq) DeepEqual(ano *UpdateMockProducerQpsReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProductBaseInfoQps) {
		return false
	}
	if !p.Field2DeepEqual(ano.ProductShopInfoQps) {
		return false
	}
	if !p.Field3DeepEqual(ano.ProductLogoModelInfoQps) {
		return false
	}
	if !p.Field4DeepEqual(ano.ProductImageModelInfoQps) {
		return false
	}
	if !p.Field5DeepEqual(ano.SetProducer) {
		return false
	}
	if !p.Field6DeepEqual(ano.SetConsumer) {
		return false
	}
	return true
}

func (p *UpdateMockProducerQpsReq) Field1DeepEqual(src *int64) bool {

	if p.ProductBaseInfoQps == src {
		return true
	} else if p.ProductBaseInfoQps == nil || src == nil {
		return false
	}
	if *p.ProductBaseInfoQps != *src {
		return false
	}
	return true
}
func (p *UpdateMockProducerQpsReq) Field2DeepEqual(src *int64) bool {

	if p.ProductShopInfoQps == src {
		return true
	} else if p.ProductShopInfoQps == nil || src == nil {
		return false
	}
	if *p.ProductShopInfoQps != *src {
		return false
	}
	return true
}
func (p *UpdateMockProducerQpsReq) Field3DeepEqual(src *int64) bool {

	if p.ProductLogoModelInfoQps == src {
		return true
	} else if p.ProductLogoModelInfoQps == nil || src == nil {
		return false
	}
	if *p.ProductLogoModelInfoQps != *src {
		return false
	}
	return true
}
func (p *UpdateMockProducerQpsReq) Field4DeepEqual(src *int64) bool {

	if p.ProductImageModelInfoQps == src {
		return true
	} else if p.ProductImageModelInfoQps == nil || src == nil {
		return false
	}
	if *p.ProductImageModelInfoQps != *src {
		return false
	}
	return true
}
func (p *UpdateMockProducerQpsReq) Field5DeepEqual(src *bool) bool {

	if p.SetProducer == src {
		return true
	} else if p.SetProducer == nil || src == nil {
		return false
	}
	if *p.SetProducer != *src {
		return false
	}
	return true
}
func (p *UpdateMockProducerQpsReq) Field6DeepEqual(src *bool) bool {

	if p.SetConsumer == src {
		return true
	} else if p.SetConsumer == nil || src == nil {
		return false
	}
	if *p.SetConsumer != *src {
		return false
	}
	return true
}

type UpdateMockProducerQpsResp struct {
}

func NewUpdateMockProducerQpsResp() *UpdateMockProducerQpsResp {
	return &UpdateMockProducerQpsResp{}
}

func (p *UpdateMockProducerQpsResp) InitDefault() {
}

var fieldIDToName_UpdateMockProducerQpsResp = map[int16]string{}

func (p *UpdateMockProducerQpsResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMockProducerQpsResp) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("UpdateMockProducerQpsResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMockProducerQpsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMockProducerQpsResp(%+v)", *p)

}

func (p *UpdateMockProducerQpsResp) DeepEqual(ano *UpdateMockProducerQpsResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type MinerIntegrate interface {
	UpdateMockProducerQps(ctx context.Context, req *UpdateMockProducerQpsReq) (r *UpdateMockProducerQpsResp, err error)
}

type MinerIntegrateUpdateMockProducerQpsArgs struct {
	Req *UpdateMockProducerQpsReq `thrift:"req,1" frugal:"1,default,UpdateMockProducerQpsReq" json:"req"`
}

func NewMinerIntegrateUpdateMockProducerQpsArgs() *MinerIntegrateUpdateMockProducerQpsArgs {
	return &MinerIntegrateUpdateMockProducerQpsArgs{}
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) InitDefault() {
}

var MinerIntegrateUpdateMockProducerQpsArgs_Req_DEFAULT *UpdateMockProducerQpsReq

func (p *MinerIntegrateUpdateMockProducerQpsArgs) GetReq() (v *UpdateMockProducerQpsReq) {
	if !p.IsSetReq() {
		return MinerIntegrateUpdateMockProducerQpsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MinerIntegrateUpdateMockProducerQpsArgs) SetReq(val *UpdateMockProducerQpsReq) {
	p.Req = val
}

var fieldIDToName_MinerIntegrateUpdateMockProducerQpsArgs = map[int16]string{
	1: "req",
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MinerIntegrateUpdateMockProducerQpsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateMockProducerQpsReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMockProducerQps_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerIntegrateUpdateMockProducerQpsArgs(%+v)", *p)

}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) DeepEqual(ano *MinerIntegrateUpdateMockProducerQpsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MinerIntegrateUpdateMockProducerQpsArgs) Field1DeepEqual(src *UpdateMockProducerQpsReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MinerIntegrateUpdateMockProducerQpsResult struct {
	Success *UpdateMockProducerQpsResp `thrift:"success,0,optional" frugal:"0,optional,UpdateMockProducerQpsResp" json:"success,omitempty"`
}

func NewMinerIntegrateUpdateMockProducerQpsResult() *MinerIntegrateUpdateMockProducerQpsResult {
	return &MinerIntegrateUpdateMockProducerQpsResult{}
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) InitDefault() {
}

var MinerIntegrateUpdateMockProducerQpsResult_Success_DEFAULT *UpdateMockProducerQpsResp

func (p *MinerIntegrateUpdateMockProducerQpsResult) GetSuccess() (v *UpdateMockProducerQpsResp) {
	if !p.IsSetSuccess() {
		return MinerIntegrateUpdateMockProducerQpsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MinerIntegrateUpdateMockProducerQpsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateMockProducerQpsResp)
}

var fieldIDToName_MinerIntegrateUpdateMockProducerQpsResult = map[int16]string{
	0: "success",
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MinerIntegrateUpdateMockProducerQpsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateMockProducerQpsResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMockProducerQps_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MinerIntegrateUpdateMockProducerQpsResult(%+v)", *p)

}

func (p *MinerIntegrateUpdateMockProducerQpsResult) DeepEqual(ano *MinerIntegrateUpdateMockProducerQpsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MinerIntegrateUpdateMockProducerQpsResult) Field0DeepEqual(src *UpdateMockProducerQpsResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
