// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package fabric_ipfs

import (
	"context"
	"fmt"
)

type CreateEblDocxReq struct {
	Ebl *CreateEblDocx `thrift:"ebl,1,required" frugal:"1,required,CreateEblDocx" json:"ebl"`
}

func NewCreateEblDocxReq() *CreateEblDocxReq {
	return &CreateEblDocxReq{}
}

func (p *CreateEblDocxReq) InitDefault() {
}

var CreateEblDocxReq_Ebl_DEFAULT *CreateEblDocx

func (p *CreateEblDocxReq) GetEbl() (v *CreateEblDocx) {
	if !p.IsSetEbl() {
		return CreateEblDocxReq_Ebl_DEFAULT
	}
	return p.Ebl
}
func (p *CreateEblDocxReq) SetEbl(val *CreateEblDocx) {
	p.Ebl = val
}

func (p *CreateEblDocxReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *CreateEblDocxReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblDocxReq(%+v)", *p)
}

var fieldIDToName_CreateEblDocxReq = map[int16]string{
	1: "ebl",
}

type CreateEblDocxResp struct {
	FileHash string `thrift:"file_hash,1,required" frugal:"1,required,string" json:"file_hash"`
}

func NewCreateEblDocxResp() *CreateEblDocxResp {
	return &CreateEblDocxResp{}
}

func (p *CreateEblDocxResp) InitDefault() {
}

func (p *CreateEblDocxResp) GetFileHash() (v string) {
	return p.FileHash
}
func (p *CreateEblDocxResp) SetFileHash(val string) {
	p.FileHash = val
}

func (p *CreateEblDocxResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblDocxResp(%+v)", *p)
}

var fieldIDToName_CreateEblDocxResp = map[int16]string{
	1: "file_hash",
}

type CreateEblDocx struct {
	EblNo                  string `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyName      string `thrift:"originCompanyName,2,required" frugal:"2,required,string" json:"originCompanyName"`
	ShipperCompanyName     string `thrift:"shipperCompanyName,3,required" frugal:"3,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyName   string `thrift:"consigneeCompanyName,4,required" frugal:"4,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyName string `thrift:"notifyPartyCompanyName,5,required" frugal:"5,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string `thrift:"placeOfReceipt,6,required" frugal:"6,required,string" json:"placeOfReceipt"`
	OceanVessel            string `thrift:"oceanVessel,7,required" frugal:"7,required,string" json:"oceanVessel"`
	PortOfLoading          string `thrift:"portOfLoading,8,required" frugal:"8,required,string" json:"portOfLoading"`
	PortOfDescharge        string `thrift:"portOfDescharge,9,required" frugal:"9,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string `thrift:"placeOfDestination,10,required" frugal:"10,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string `thrift:"placeOfDelivery,11,required" frugal:"11,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string `thrift:"shippingMarkes,12,required" frugal:"12,required,string" json:"shippingMarkes"`
	QuantityOfPackages     string `thrift:"quantityOfPackages,13,required" frugal:"13,required,string" json:"quantityOfPackages"`
	KindOfPackagesGW       string `thrift:"kindOfPackagesGW,14,required" frugal:"14,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string `thrift:"kindOfPackagesM,15,required" frugal:"15,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string `thrift:"descriptionOfGoods,16,required" frugal:"16,required,string" json:"descriptionOfGoods"`
	GrossWeight            string `thrift:"grossWeight,17,required" frugal:"17,required,string" json:"grossWeight"`
	Measurement            string `thrift:"measurement,18,required" frugal:"18,required,string" json:"measurement"`
	FreightAndCharges      string `thrift:"freightAndCharges,19,required" frugal:"19,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string `thrift:"placeOfIssue,20,required" frugal:"20,required,string" json:"placeOfIssue"`
	DateOfIssue            string `thrift:"dateOfIssue,21,required" frugal:"21,required,string" json:"dateOfIssue"`
	DeliveryAgent          string `thrift:"deliveryAgent,22,required" frugal:"22,required,string" json:"deliveryAgent"`
	ShippedOnBoard         string `thrift:"shippedOnBoard,23,required" frugal:"23,required,string" json:"shippedOnBoard"`
	NumOfEbl               string `thrift:"numOfEbl,24,required" frugal:"24,required,string" json:"numOfEbl"`
	DateOfIssueDeadline    string `thrift:"dateOfIssueDeadline,25,required" frugal:"25,required,string" json:"dateOfIssueDeadline"`
}

func NewCreateEblDocx() *CreateEblDocx {
	return &CreateEblDocx{}
}

func (p *CreateEblDocx) InitDefault() {
}

func (p *CreateEblDocx) GetEblNo() (v string) {
	return p.EblNo
}

func (p *CreateEblDocx) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *CreateEblDocx) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *CreateEblDocx) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *CreateEblDocx) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *CreateEblDocx) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *CreateEblDocx) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *CreateEblDocx) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *CreateEblDocx) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *CreateEblDocx) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *CreateEblDocx) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *CreateEblDocx) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *CreateEblDocx) GetQuantityOfPackages() (v string) {
	return p.QuantityOfPackages
}

func (p *CreateEblDocx) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *CreateEblDocx) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *CreateEblDocx) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *CreateEblDocx) GetGrossWeight() (v string) {
	return p.GrossWeight
}

func (p *CreateEblDocx) GetMeasurement() (v string) {
	return p.Measurement
}

func (p *CreateEblDocx) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *CreateEblDocx) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *CreateEblDocx) GetDateOfIssue() (v string) {
	return p.DateOfIssue
}

func (p *CreateEblDocx) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *CreateEblDocx) GetShippedOnBoard() (v string) {
	return p.ShippedOnBoard
}

func (p *CreateEblDocx) GetNumOfEbl() (v string) {
	return p.NumOfEbl
}

func (p *CreateEblDocx) GetDateOfIssueDeadline() (v string) {
	return p.DateOfIssueDeadline
}
func (p *CreateEblDocx) SetEblNo(val string) {
	p.EblNo = val
}
func (p *CreateEblDocx) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *CreateEblDocx) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *CreateEblDocx) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *CreateEblDocx) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *CreateEblDocx) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *CreateEblDocx) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *CreateEblDocx) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *CreateEblDocx) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *CreateEblDocx) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *CreateEblDocx) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *CreateEblDocx) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *CreateEblDocx) SetQuantityOfPackages(val string) {
	p.QuantityOfPackages = val
}
func (p *CreateEblDocx) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *CreateEblDocx) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *CreateEblDocx) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *CreateEblDocx) SetGrossWeight(val string) {
	p.GrossWeight = val
}
func (p *CreateEblDocx) SetMeasurement(val string) {
	p.Measurement = val
}
func (p *CreateEblDocx) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *CreateEblDocx) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *CreateEblDocx) SetDateOfIssue(val string) {
	p.DateOfIssue = val
}
func (p *CreateEblDocx) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *CreateEblDocx) SetShippedOnBoard(val string) {
	p.ShippedOnBoard = val
}
func (p *CreateEblDocx) SetNumOfEbl(val string) {
	p.NumOfEbl = val
}
func (p *CreateEblDocx) SetDateOfIssueDeadline(val string) {
	p.DateOfIssueDeadline = val
}

func (p *CreateEblDocx) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblDocx(%+v)", *p)
}

var fieldIDToName_CreateEblDocx = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyName",
	3:  "shipperCompanyName",
	4:  "consigneeCompanyName",
	5:  "notifyPartyCompanyName",
	6:  "placeOfReceipt",
	7:  "oceanVessel",
	8:  "portOfLoading",
	9:  "portOfDescharge",
	10: "placeOfDestination",
	11: "placeOfDelivery",
	12: "shippingMarkes",
	13: "quantityOfPackages",
	14: "kindOfPackagesGW",
	15: "kindOfPackagesM",
	16: "descriptionOfGoods",
	17: "grossWeight",
	18: "measurement",
	19: "freightAndCharges",
	20: "placeOfIssue",
	21: "dateOfIssue",
	22: "deliveryAgent",
	23: "shippedOnBoard",
	24: "numOfEbl",
	25: "dateOfIssueDeadline",
}

type SealEblReq struct {
	Token  string         `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Ebl    *CreateEblDocx `thrift:"ebl,2,required" frugal:"2,required,CreateEblDocx" json:"ebl"`
	SealId int64          `thrift:"sealId,3,required" frugal:"3,required,i64" json:"sealId"`
}

func NewSealEblReq() *SealEblReq {
	return &SealEblReq{}
}

func (p *SealEblReq) InitDefault() {
}

func (p *SealEblReq) GetToken() (v string) {
	return p.Token
}

var SealEblReq_Ebl_DEFAULT *CreateEblDocx

func (p *SealEblReq) GetEbl() (v *CreateEblDocx) {
	if !p.IsSetEbl() {
		return SealEblReq_Ebl_DEFAULT
	}
	return p.Ebl
}

func (p *SealEblReq) GetSealId() (v int64) {
	return p.SealId
}
func (p *SealEblReq) SetToken(val string) {
	p.Token = val
}
func (p *SealEblReq) SetEbl(val *CreateEblDocx) {
	p.Ebl = val
}
func (p *SealEblReq) SetSealId(val int64) {
	p.SealId = val
}

func (p *SealEblReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *SealEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SealEblReq(%+v)", *p)
}

var fieldIDToName_SealEblReq = map[int16]string{
	1: "token",
	2: "ebl",
	3: "sealId",
}

type SealEblResp struct {
	FileHash string `thrift:"file_hash,1,required" frugal:"1,required,string" json:"file_hash"`
}

func NewSealEblResp() *SealEblResp {
	return &SealEblResp{}
}

func (p *SealEblResp) InitDefault() {
}

func (p *SealEblResp) GetFileHash() (v string) {
	return p.FileHash
}
func (p *SealEblResp) SetFileHash(val string) {
	p.FileHash = val
}

func (p *SealEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SealEblResp(%+v)", *p)
}

var fieldIDToName_SealEblResp = map[int16]string{
	1: "file_hash",
}

type FabricIpfs interface {
	CreateEblDocx(ctx context.Context, req *CreateEblDocxReq) (r *CreateEblDocxResp, err error)

	SealEbl(ctx context.Context, req *SealEblReq) (r *SealEblResp, err error)
}

type FabricIpfsCreateEblDocxArgs struct {
	Req *CreateEblDocxReq `thrift:"req,1" frugal:"1,default,CreateEblDocxReq" json:"req"`
}

func NewFabricIpfsCreateEblDocxArgs() *FabricIpfsCreateEblDocxArgs {
	return &FabricIpfsCreateEblDocxArgs{}
}

func (p *FabricIpfsCreateEblDocxArgs) InitDefault() {
}

var FabricIpfsCreateEblDocxArgs_Req_DEFAULT *CreateEblDocxReq

func (p *FabricIpfsCreateEblDocxArgs) GetReq() (v *CreateEblDocxReq) {
	if !p.IsSetReq() {
		return FabricIpfsCreateEblDocxArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricIpfsCreateEblDocxArgs) SetReq(val *CreateEblDocxReq) {
	p.Req = val
}

func (p *FabricIpfsCreateEblDocxArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricIpfsCreateEblDocxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsCreateEblDocxArgs(%+v)", *p)
}

var fieldIDToName_FabricIpfsCreateEblDocxArgs = map[int16]string{
	1: "req",
}

type FabricIpfsCreateEblDocxResult struct {
	Success *CreateEblDocxResp `thrift:"success,0,optional" frugal:"0,optional,CreateEblDocxResp" json:"success,omitempty"`
}

func NewFabricIpfsCreateEblDocxResult() *FabricIpfsCreateEblDocxResult {
	return &FabricIpfsCreateEblDocxResult{}
}

func (p *FabricIpfsCreateEblDocxResult) InitDefault() {
}

var FabricIpfsCreateEblDocxResult_Success_DEFAULT *CreateEblDocxResp

func (p *FabricIpfsCreateEblDocxResult) GetSuccess() (v *CreateEblDocxResp) {
	if !p.IsSetSuccess() {
		return FabricIpfsCreateEblDocxResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricIpfsCreateEblDocxResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEblDocxResp)
}

func (p *FabricIpfsCreateEblDocxResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricIpfsCreateEblDocxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsCreateEblDocxResult(%+v)", *p)
}

var fieldIDToName_FabricIpfsCreateEblDocxResult = map[int16]string{
	0: "success",
}

type FabricIpfsSealEblArgs struct {
	Req *SealEblReq `thrift:"req,1" frugal:"1,default,SealEblReq" json:"req"`
}

func NewFabricIpfsSealEblArgs() *FabricIpfsSealEblArgs {
	return &FabricIpfsSealEblArgs{}
}

func (p *FabricIpfsSealEblArgs) InitDefault() {
}

var FabricIpfsSealEblArgs_Req_DEFAULT *SealEblReq

func (p *FabricIpfsSealEblArgs) GetReq() (v *SealEblReq) {
	if !p.IsSetReq() {
		return FabricIpfsSealEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricIpfsSealEblArgs) SetReq(val *SealEblReq) {
	p.Req = val
}

func (p *FabricIpfsSealEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricIpfsSealEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsSealEblArgs(%+v)", *p)
}

var fieldIDToName_FabricIpfsSealEblArgs = map[int16]string{
	1: "req",
}

type FabricIpfsSealEblResult struct {
	Success *SealEblResp `thrift:"success,0,optional" frugal:"0,optional,SealEblResp" json:"success,omitempty"`
}

func NewFabricIpfsSealEblResult() *FabricIpfsSealEblResult {
	return &FabricIpfsSealEblResult{}
}

func (p *FabricIpfsSealEblResult) InitDefault() {
}

var FabricIpfsSealEblResult_Success_DEFAULT *SealEblResp

func (p *FabricIpfsSealEblResult) GetSuccess() (v *SealEblResp) {
	if !p.IsSetSuccess() {
		return FabricIpfsSealEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricIpfsSealEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*SealEblResp)
}

func (p *FabricIpfsSealEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricIpfsSealEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsSealEblResult(%+v)", *p)
}

var fieldIDToName_FabricIpfsSealEblResult = map[int16]string{
	0: "success",
}
