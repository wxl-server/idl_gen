// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package fabric_ipfs

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type CreateEblDocxReq struct {
	Ebl *CreateEblDocx `thrift:"ebl,1,required" frugal:"1,required,CreateEblDocx" json:"ebl"`
}

func NewCreateEblDocxReq() *CreateEblDocxReq {
	return &CreateEblDocxReq{}
}

func (p *CreateEblDocxReq) InitDefault() {
}

var CreateEblDocxReq_Ebl_DEFAULT *CreateEblDocx

func (p *CreateEblDocxReq) GetEbl() (v *CreateEblDocx) {
	if !p.IsSetEbl() {
		return CreateEblDocxReq_Ebl_DEFAULT
	}
	return p.Ebl
}
func (p *CreateEblDocxReq) SetEbl(val *CreateEblDocx) {
	p.Ebl = val
}

var fieldIDToName_CreateEblDocxReq = map[int16]string{
	1: "ebl",
}

func (p *CreateEblDocxReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *CreateEblDocxReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEbl bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEbl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblDocxReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblDocxReq[fieldId]))
}

func (p *CreateEblDocxReq) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEblDocx()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ebl = _field
	return nil
}

func (p *CreateEblDocxReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblDocxReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblDocxReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ebl", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Ebl.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblDocxReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblDocxReq(%+v)", *p)

}

func (p *CreateEblDocxReq) DeepEqual(ano *CreateEblDocxReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ebl) {
		return false
	}
	return true
}

func (p *CreateEblDocxReq) Field1DeepEqual(src *CreateEblDocx) bool {

	if !p.Ebl.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEblDocxResp struct {
	FileHash string `thrift:"file_hash,1,required" frugal:"1,required,string" json:"file_hash"`
}

func NewCreateEblDocxResp() *CreateEblDocxResp {
	return &CreateEblDocxResp{}
}

func (p *CreateEblDocxResp) InitDefault() {
}

func (p *CreateEblDocxResp) GetFileHash() (v string) {
	return p.FileHash
}
func (p *CreateEblDocxResp) SetFileHash(val string) {
	p.FileHash = val
}

var fieldIDToName_CreateEblDocxResp = map[int16]string{
	1: "file_hash",
}

func (p *CreateEblDocxResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFileHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFileHash {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblDocxResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblDocxResp[fieldId]))
}

func (p *CreateEblDocxResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileHash = _field
	return nil
}

func (p *CreateEblDocxResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblDocxResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblDocxResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_hash", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblDocxResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblDocxResp(%+v)", *p)

}

func (p *CreateEblDocxResp) DeepEqual(ano *CreateEblDocxResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileHash) {
		return false
	}
	return true
}

func (p *CreateEblDocxResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileHash, src) != 0 {
		return false
	}
	return true
}

type CreateEblDocx struct {
	EblNo                  string `thrift:"eblNo,1,required" frugal:"1,required,string" json:"eblNo"`
	OriginCompanyName      string `thrift:"originCompanyName,2,required" frugal:"2,required,string" json:"originCompanyName"`
	ShipperCompanyName     string `thrift:"shipperCompanyName,3,required" frugal:"3,required,string" json:"shipperCompanyName"`
	ConsigneeCompanyName   string `thrift:"consigneeCompanyName,4,required" frugal:"4,required,string" json:"consigneeCompanyName"`
	NotifyPartyCompanyName string `thrift:"notifyPartyCompanyName,5,required" frugal:"5,required,string" json:"notifyPartyCompanyName"`
	PlaceOfReceipt         string `thrift:"placeOfReceipt,6,required" frugal:"6,required,string" json:"placeOfReceipt"`
	OceanVessel            string `thrift:"oceanVessel,7,required" frugal:"7,required,string" json:"oceanVessel"`
	PortOfLoading          string `thrift:"portOfLoading,8,required" frugal:"8,required,string" json:"portOfLoading"`
	PortOfDescharge        string `thrift:"portOfDescharge,9,required" frugal:"9,required,string" json:"portOfDescharge"`
	PlaceOfDestination     string `thrift:"placeOfDestination,10,required" frugal:"10,required,string" json:"placeOfDestination"`
	PlaceOfDelivery        string `thrift:"placeOfDelivery,11,required" frugal:"11,required,string" json:"placeOfDelivery"`
	ShippingMarkes         string `thrift:"shippingMarkes,12,required" frugal:"12,required,string" json:"shippingMarkes"`
	QuantityOfPackages     string `thrift:"quantityOfPackages,13,required" frugal:"13,required,string" json:"quantityOfPackages"`
	KindOfPackagesGW       string `thrift:"kindOfPackagesGW,14,required" frugal:"14,required,string" json:"kindOfPackagesGW"`
	KindOfPackagesM        string `thrift:"kindOfPackagesM,15,required" frugal:"15,required,string" json:"kindOfPackagesM"`
	DescriptionOfGoods     string `thrift:"descriptionOfGoods,16,required" frugal:"16,required,string" json:"descriptionOfGoods"`
	GrossWeight            string `thrift:"grossWeight,17,required" frugal:"17,required,string" json:"grossWeight"`
	Measurement            string `thrift:"measurement,18,required" frugal:"18,required,string" json:"measurement"`
	FreightAndCharges      string `thrift:"freightAndCharges,19,required" frugal:"19,required,string" json:"freightAndCharges"`
	PlaceOfIssue           string `thrift:"placeOfIssue,20,required" frugal:"20,required,string" json:"placeOfIssue"`
	DateOfIssue            string `thrift:"dateOfIssue,21,required" frugal:"21,required,string" json:"dateOfIssue"`
	DeliveryAgent          string `thrift:"deliveryAgent,22,required" frugal:"22,required,string" json:"deliveryAgent"`
	ShippedOnBoard         string `thrift:"shippedOnBoard,23,required" frugal:"23,required,string" json:"shippedOnBoard"`
	NumOfEbl               string `thrift:"numOfEbl,24,required" frugal:"24,required,string" json:"numOfEbl"`
	DateOfIssueDeadline    string `thrift:"dateOfIssueDeadline,25,required" frugal:"25,required,string" json:"dateOfIssueDeadline"`
}

func NewCreateEblDocx() *CreateEblDocx {
	return &CreateEblDocx{}
}

func (p *CreateEblDocx) InitDefault() {
}

func (p *CreateEblDocx) GetEblNo() (v string) {
	return p.EblNo
}

func (p *CreateEblDocx) GetOriginCompanyName() (v string) {
	return p.OriginCompanyName
}

func (p *CreateEblDocx) GetShipperCompanyName() (v string) {
	return p.ShipperCompanyName
}

func (p *CreateEblDocx) GetConsigneeCompanyName() (v string) {
	return p.ConsigneeCompanyName
}

func (p *CreateEblDocx) GetNotifyPartyCompanyName() (v string) {
	return p.NotifyPartyCompanyName
}

func (p *CreateEblDocx) GetPlaceOfReceipt() (v string) {
	return p.PlaceOfReceipt
}

func (p *CreateEblDocx) GetOceanVessel() (v string) {
	return p.OceanVessel
}

func (p *CreateEblDocx) GetPortOfLoading() (v string) {
	return p.PortOfLoading
}

func (p *CreateEblDocx) GetPortOfDescharge() (v string) {
	return p.PortOfDescharge
}

func (p *CreateEblDocx) GetPlaceOfDestination() (v string) {
	return p.PlaceOfDestination
}

func (p *CreateEblDocx) GetPlaceOfDelivery() (v string) {
	return p.PlaceOfDelivery
}

func (p *CreateEblDocx) GetShippingMarkes() (v string) {
	return p.ShippingMarkes
}

func (p *CreateEblDocx) GetQuantityOfPackages() (v string) {
	return p.QuantityOfPackages
}

func (p *CreateEblDocx) GetKindOfPackagesGW() (v string) {
	return p.KindOfPackagesGW
}

func (p *CreateEblDocx) GetKindOfPackagesM() (v string) {
	return p.KindOfPackagesM
}

func (p *CreateEblDocx) GetDescriptionOfGoods() (v string) {
	return p.DescriptionOfGoods
}

func (p *CreateEblDocx) GetGrossWeight() (v string) {
	return p.GrossWeight
}

func (p *CreateEblDocx) GetMeasurement() (v string) {
	return p.Measurement
}

func (p *CreateEblDocx) GetFreightAndCharges() (v string) {
	return p.FreightAndCharges
}

func (p *CreateEblDocx) GetPlaceOfIssue() (v string) {
	return p.PlaceOfIssue
}

func (p *CreateEblDocx) GetDateOfIssue() (v string) {
	return p.DateOfIssue
}

func (p *CreateEblDocx) GetDeliveryAgent() (v string) {
	return p.DeliveryAgent
}

func (p *CreateEblDocx) GetShippedOnBoard() (v string) {
	return p.ShippedOnBoard
}

func (p *CreateEblDocx) GetNumOfEbl() (v string) {
	return p.NumOfEbl
}

func (p *CreateEblDocx) GetDateOfIssueDeadline() (v string) {
	return p.DateOfIssueDeadline
}
func (p *CreateEblDocx) SetEblNo(val string) {
	p.EblNo = val
}
func (p *CreateEblDocx) SetOriginCompanyName(val string) {
	p.OriginCompanyName = val
}
func (p *CreateEblDocx) SetShipperCompanyName(val string) {
	p.ShipperCompanyName = val
}
func (p *CreateEblDocx) SetConsigneeCompanyName(val string) {
	p.ConsigneeCompanyName = val
}
func (p *CreateEblDocx) SetNotifyPartyCompanyName(val string) {
	p.NotifyPartyCompanyName = val
}
func (p *CreateEblDocx) SetPlaceOfReceipt(val string) {
	p.PlaceOfReceipt = val
}
func (p *CreateEblDocx) SetOceanVessel(val string) {
	p.OceanVessel = val
}
func (p *CreateEblDocx) SetPortOfLoading(val string) {
	p.PortOfLoading = val
}
func (p *CreateEblDocx) SetPortOfDescharge(val string) {
	p.PortOfDescharge = val
}
func (p *CreateEblDocx) SetPlaceOfDestination(val string) {
	p.PlaceOfDestination = val
}
func (p *CreateEblDocx) SetPlaceOfDelivery(val string) {
	p.PlaceOfDelivery = val
}
func (p *CreateEblDocx) SetShippingMarkes(val string) {
	p.ShippingMarkes = val
}
func (p *CreateEblDocx) SetQuantityOfPackages(val string) {
	p.QuantityOfPackages = val
}
func (p *CreateEblDocx) SetKindOfPackagesGW(val string) {
	p.KindOfPackagesGW = val
}
func (p *CreateEblDocx) SetKindOfPackagesM(val string) {
	p.KindOfPackagesM = val
}
func (p *CreateEblDocx) SetDescriptionOfGoods(val string) {
	p.DescriptionOfGoods = val
}
func (p *CreateEblDocx) SetGrossWeight(val string) {
	p.GrossWeight = val
}
func (p *CreateEblDocx) SetMeasurement(val string) {
	p.Measurement = val
}
func (p *CreateEblDocx) SetFreightAndCharges(val string) {
	p.FreightAndCharges = val
}
func (p *CreateEblDocx) SetPlaceOfIssue(val string) {
	p.PlaceOfIssue = val
}
func (p *CreateEblDocx) SetDateOfIssue(val string) {
	p.DateOfIssue = val
}
func (p *CreateEblDocx) SetDeliveryAgent(val string) {
	p.DeliveryAgent = val
}
func (p *CreateEblDocx) SetShippedOnBoard(val string) {
	p.ShippedOnBoard = val
}
func (p *CreateEblDocx) SetNumOfEbl(val string) {
	p.NumOfEbl = val
}
func (p *CreateEblDocx) SetDateOfIssueDeadline(val string) {
	p.DateOfIssueDeadline = val
}

var fieldIDToName_CreateEblDocx = map[int16]string{
	1:  "eblNo",
	2:  "originCompanyName",
	3:  "shipperCompanyName",
	4:  "consigneeCompanyName",
	5:  "notifyPartyCompanyName",
	6:  "placeOfReceipt",
	7:  "oceanVessel",
	8:  "portOfLoading",
	9:  "portOfDescharge",
	10: "placeOfDestination",
	11: "placeOfDelivery",
	12: "shippingMarkes",
	13: "quantityOfPackages",
	14: "kindOfPackagesGW",
	15: "kindOfPackagesM",
	16: "descriptionOfGoods",
	17: "grossWeight",
	18: "measurement",
	19: "freightAndCharges",
	20: "placeOfIssue",
	21: "dateOfIssue",
	22: "deliveryAgent",
	23: "shippedOnBoard",
	24: "numOfEbl",
	25: "dateOfIssueDeadline",
}

func (p *CreateEblDocx) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEblNo bool = false
	var issetOriginCompanyName bool = false
	var issetShipperCompanyName bool = false
	var issetConsigneeCompanyName bool = false
	var issetNotifyPartyCompanyName bool = false
	var issetPlaceOfReceipt bool = false
	var issetOceanVessel bool = false
	var issetPortOfLoading bool = false
	var issetPortOfDescharge bool = false
	var issetPlaceOfDestination bool = false
	var issetPlaceOfDelivery bool = false
	var issetShippingMarkes bool = false
	var issetQuantityOfPackages bool = false
	var issetKindOfPackagesGW bool = false
	var issetKindOfPackagesM bool = false
	var issetDescriptionOfGoods bool = false
	var issetGrossWeight bool = false
	var issetMeasurement bool = false
	var issetFreightAndCharges bool = false
	var issetPlaceOfIssue bool = false
	var issetDateOfIssue bool = false
	var issetDeliveryAgent bool = false
	var issetShippedOnBoard bool = false
	var issetNumOfEbl bool = false
	var issetDateOfIssueDeadline bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEblNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOriginCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetShipperCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetConsigneeCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNotifyPartyCompanyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfReceipt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetOceanVessel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfLoading = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetPortOfDescharge = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDestination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfDelivery = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippingMarkes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetQuantityOfPackages = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesGW = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetKindOfPackagesM = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionOfGoods = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetGrossWeight = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetMeasurement = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreightAndCharges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlaceOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeliveryAgent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetShippedOnBoard = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumOfEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetDateOfIssueDeadline = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEblNo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOriginCompanyName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetShipperCompanyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetConsigneeCompanyName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNotifyPartyCompanyName {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfReceipt {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetOceanVessel {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetPortOfLoading {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetPortOfDescharge {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDestination {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfDelivery {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetShippingMarkes {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetQuantityOfPackages {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesGW {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetKindOfPackagesM {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionOfGoods {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetGrossWeight {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetMeasurement {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetFreightAndCharges {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetPlaceOfIssue {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssue {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetDeliveryAgent {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetShippedOnBoard {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetNumOfEbl {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetDateOfIssueDeadline {
		fieldId = 25
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEblDocx[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEblDocx[fieldId]))
}

func (p *CreateEblDocx) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EblNo = _field
	return nil
}
func (p *CreateEblDocx) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OriginCompanyName = _field
	return nil
}
func (p *CreateEblDocx) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShipperCompanyName = _field
	return nil
}
func (p *CreateEblDocx) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConsigneeCompanyName = _field
	return nil
}
func (p *CreateEblDocx) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotifyPartyCompanyName = _field
	return nil
}
func (p *CreateEblDocx) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfReceipt = _field
	return nil
}
func (p *CreateEblDocx) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OceanVessel = _field
	return nil
}
func (p *CreateEblDocx) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfLoading = _field
	return nil
}
func (p *CreateEblDocx) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PortOfDescharge = _field
	return nil
}
func (p *CreateEblDocx) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDestination = _field
	return nil
}
func (p *CreateEblDocx) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfDelivery = _field
	return nil
}
func (p *CreateEblDocx) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippingMarkes = _field
	return nil
}
func (p *CreateEblDocx) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QuantityOfPackages = _field
	return nil
}
func (p *CreateEblDocx) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesGW = _field
	return nil
}
func (p *CreateEblDocx) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KindOfPackagesM = _field
	return nil
}
func (p *CreateEblDocx) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionOfGoods = _field
	return nil
}
func (p *CreateEblDocx) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GrossWeight = _field
	return nil
}
func (p *CreateEblDocx) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Measurement = _field
	return nil
}
func (p *CreateEblDocx) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FreightAndCharges = _field
	return nil
}
func (p *CreateEblDocx) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceOfIssue = _field
	return nil
}
func (p *CreateEblDocx) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssue = _field
	return nil
}
func (p *CreateEblDocx) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeliveryAgent = _field
	return nil
}
func (p *CreateEblDocx) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShippedOnBoard = _field
	return nil
}
func (p *CreateEblDocx) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumOfEbl = _field
	return nil
}
func (p *CreateEblDocx) ReadField25(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DateOfIssueDeadline = _field
	return nil
}

func (p *CreateEblDocx) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblDocx"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEblDocx) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eblNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EblNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEblDocx) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originCompanyName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateEblDocx) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shipperCompanyName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShipperCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateEblDocx) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("consigneeCompanyName", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConsigneeCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateEblDocx) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifyPartyCompanyName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NotifyPartyCompanyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateEblDocx) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfReceipt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfReceipt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateEblDocx) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("oceanVessel", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OceanVessel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateEblDocx) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfLoading", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfLoading); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateEblDocx) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("portOfDescharge", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PortOfDescharge); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateEblDocx) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDestination", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDestination); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateEblDocx) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfDelivery", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfDelivery); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateEblDocx) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippingMarkes", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShippingMarkes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateEblDocx) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("quantityOfPackages", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.QuantityOfPackages); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateEblDocx) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesGW", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesGW); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CreateEblDocx) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("kindOfPackagesM", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KindOfPackagesM); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateEblDocx) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("descriptionOfGoods", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionOfGoods); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CreateEblDocx) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grossWeight", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GrossWeight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CreateEblDocx) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("measurement", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Measurement); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *CreateEblDocx) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("freightAndCharges", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreightAndCharges); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *CreateEblDocx) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("placeOfIssue", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *CreateEblDocx) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssue", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DateOfIssue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *CreateEblDocx) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("deliveryAgent", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DeliveryAgent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *CreateEblDocx) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shippedOnBoard", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShippedOnBoard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *CreateEblDocx) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numOfEbl", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NumOfEbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *CreateEblDocx) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dateOfIssueDeadline", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DateOfIssueDeadline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *CreateEblDocx) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEblDocx(%+v)", *p)

}

func (p *CreateEblDocx) DeepEqual(ano *CreateEblDocx) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EblNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.OriginCompanyName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ShipperCompanyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.ConsigneeCompanyName) {
		return false
	}
	if !p.Field5DeepEqual(ano.NotifyPartyCompanyName) {
		return false
	}
	if !p.Field6DeepEqual(ano.PlaceOfReceipt) {
		return false
	}
	if !p.Field7DeepEqual(ano.OceanVessel) {
		return false
	}
	if !p.Field8DeepEqual(ano.PortOfLoading) {
		return false
	}
	if !p.Field9DeepEqual(ano.PortOfDescharge) {
		return false
	}
	if !p.Field10DeepEqual(ano.PlaceOfDestination) {
		return false
	}
	if !p.Field11DeepEqual(ano.PlaceOfDelivery) {
		return false
	}
	if !p.Field12DeepEqual(ano.ShippingMarkes) {
		return false
	}
	if !p.Field13DeepEqual(ano.QuantityOfPackages) {
		return false
	}
	if !p.Field14DeepEqual(ano.KindOfPackagesGW) {
		return false
	}
	if !p.Field15DeepEqual(ano.KindOfPackagesM) {
		return false
	}
	if !p.Field16DeepEqual(ano.DescriptionOfGoods) {
		return false
	}
	if !p.Field17DeepEqual(ano.GrossWeight) {
		return false
	}
	if !p.Field18DeepEqual(ano.Measurement) {
		return false
	}
	if !p.Field19DeepEqual(ano.FreightAndCharges) {
		return false
	}
	if !p.Field20DeepEqual(ano.PlaceOfIssue) {
		return false
	}
	if !p.Field21DeepEqual(ano.DateOfIssue) {
		return false
	}
	if !p.Field22DeepEqual(ano.DeliveryAgent) {
		return false
	}
	if !p.Field23DeepEqual(ano.ShippedOnBoard) {
		return false
	}
	if !p.Field24DeepEqual(ano.NumOfEbl) {
		return false
	}
	if !p.Field25DeepEqual(ano.DateOfIssueDeadline) {
		return false
	}
	return true
}

func (p *CreateEblDocx) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EblNo, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OriginCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ShipperCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ConsigneeCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field5DeepEqual(src string) bool {

	if strings.Compare(p.NotifyPartyCompanyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field6DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfReceipt, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field7DeepEqual(src string) bool {

	if strings.Compare(p.OceanVessel, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PortOfLoading, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field9DeepEqual(src string) bool {

	if strings.Compare(p.PortOfDescharge, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDestination, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field11DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfDelivery, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field12DeepEqual(src string) bool {

	if strings.Compare(p.ShippingMarkes, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field13DeepEqual(src string) bool {

	if strings.Compare(p.QuantityOfPackages, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field14DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesGW, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field15DeepEqual(src string) bool {

	if strings.Compare(p.KindOfPackagesM, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field16DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionOfGoods, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field17DeepEqual(src string) bool {

	if strings.Compare(p.GrossWeight, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field18DeepEqual(src string) bool {

	if strings.Compare(p.Measurement, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field19DeepEqual(src string) bool {

	if strings.Compare(p.FreightAndCharges, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field20DeepEqual(src string) bool {

	if strings.Compare(p.PlaceOfIssue, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field21DeepEqual(src string) bool {

	if strings.Compare(p.DateOfIssue, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field22DeepEqual(src string) bool {

	if strings.Compare(p.DeliveryAgent, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field23DeepEqual(src string) bool {

	if strings.Compare(p.ShippedOnBoard, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field24DeepEqual(src string) bool {

	if strings.Compare(p.NumOfEbl, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEblDocx) Field25DeepEqual(src string) bool {

	if strings.Compare(p.DateOfIssueDeadline, src) != 0 {
		return false
	}
	return true
}

type SealEblReq struct {
	Token  string         `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Ebl    *CreateEblDocx `thrift:"ebl,2,required" frugal:"2,required,CreateEblDocx" json:"ebl"`
	SealId int64          `thrift:"sealId,3,required" frugal:"3,required,i64" json:"sealId"`
}

func NewSealEblReq() *SealEblReq {
	return &SealEblReq{}
}

func (p *SealEblReq) InitDefault() {
}

func (p *SealEblReq) GetToken() (v string) {
	return p.Token
}

var SealEblReq_Ebl_DEFAULT *CreateEblDocx

func (p *SealEblReq) GetEbl() (v *CreateEblDocx) {
	if !p.IsSetEbl() {
		return SealEblReq_Ebl_DEFAULT
	}
	return p.Ebl
}

func (p *SealEblReq) GetSealId() (v int64) {
	return p.SealId
}
func (p *SealEblReq) SetToken(val string) {
	p.Token = val
}
func (p *SealEblReq) SetEbl(val *CreateEblDocx) {
	p.Ebl = val
}
func (p *SealEblReq) SetSealId(val int64) {
	p.SealId = val
}

var fieldIDToName_SealEblReq = map[int16]string{
	1: "token",
	2: "ebl",
	3: "sealId",
}

func (p *SealEblReq) IsSetEbl() bool {
	return p.Ebl != nil
}

func (p *SealEblReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false
	var issetEbl bool = false
	var issetSealId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSealId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEbl {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSealId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SealEblReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SealEblReq[fieldId]))
}

func (p *SealEblReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *SealEblReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewCreateEblDocx()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ebl = _field
	return nil
}
func (p *SealEblReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SealId = _field
	return nil
}

func (p *SealEblReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SealEblReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SealEblReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SealEblReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ebl", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Ebl.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SealEblReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sealId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SealId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SealEblReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SealEblReq(%+v)", *p)

}

func (p *SealEblReq) DeepEqual(ano *SealEblReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Ebl) {
		return false
	}
	if !p.Field3DeepEqual(ano.SealId) {
		return false
	}
	return true
}

func (p *SealEblReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *SealEblReq) Field2DeepEqual(src *CreateEblDocx) bool {

	if !p.Ebl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SealEblReq) Field3DeepEqual(src int64) bool {

	if p.SealId != src {
		return false
	}
	return true
}

type SealEblResp struct {
	FileHash string `thrift:"file_hash,1,required" frugal:"1,required,string" json:"file_hash"`
}

func NewSealEblResp() *SealEblResp {
	return &SealEblResp{}
}

func (p *SealEblResp) InitDefault() {
}

func (p *SealEblResp) GetFileHash() (v string) {
	return p.FileHash
}
func (p *SealEblResp) SetFileHash(val string) {
	p.FileHash = val
}

var fieldIDToName_SealEblResp = map[int16]string{
	1: "file_hash",
}

func (p *SealEblResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFileHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFileHash {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SealEblResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SealEblResp[fieldId]))
}

func (p *SealEblResp) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileHash = _field
	return nil
}

func (p *SealEblResp) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SealEblResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SealEblResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_hash", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FileHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SealEblResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SealEblResp(%+v)", *p)

}

func (p *SealEblResp) DeepEqual(ano *SealEblResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileHash) {
		return false
	}
	return true
}

func (p *SealEblResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FileHash, src) != 0 {
		return false
	}
	return true
}

type FabricIpfs interface {
	CreateEblDocx(ctx context.Context, req *CreateEblDocxReq) (r *CreateEblDocxResp, err error)

	SealEbl(ctx context.Context, req *SealEblReq) (r *SealEblResp, err error)
}

type FabricIpfsCreateEblDocxArgs struct {
	Req *CreateEblDocxReq `thrift:"req,1" frugal:"1,default,CreateEblDocxReq" json:"req"`
}

func NewFabricIpfsCreateEblDocxArgs() *FabricIpfsCreateEblDocxArgs {
	return &FabricIpfsCreateEblDocxArgs{}
}

func (p *FabricIpfsCreateEblDocxArgs) InitDefault() {
}

var FabricIpfsCreateEblDocxArgs_Req_DEFAULT *CreateEblDocxReq

func (p *FabricIpfsCreateEblDocxArgs) GetReq() (v *CreateEblDocxReq) {
	if !p.IsSetReq() {
		return FabricIpfsCreateEblDocxArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricIpfsCreateEblDocxArgs) SetReq(val *CreateEblDocxReq) {
	p.Req = val
}

var fieldIDToName_FabricIpfsCreateEblDocxArgs = map[int16]string{
	1: "req",
}

func (p *FabricIpfsCreateEblDocxArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricIpfsCreateEblDocxArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricIpfsCreateEblDocxArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricIpfsCreateEblDocxArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEblDocxReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricIpfsCreateEblDocxArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblDocx_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricIpfsCreateEblDocxArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricIpfsCreateEblDocxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsCreateEblDocxArgs(%+v)", *p)

}

func (p *FabricIpfsCreateEblDocxArgs) DeepEqual(ano *FabricIpfsCreateEblDocxArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricIpfsCreateEblDocxArgs) Field1DeepEqual(src *CreateEblDocxReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricIpfsCreateEblDocxResult struct {
	Success *CreateEblDocxResp `thrift:"success,0,optional" frugal:"0,optional,CreateEblDocxResp" json:"success,omitempty"`
}

func NewFabricIpfsCreateEblDocxResult() *FabricIpfsCreateEblDocxResult {
	return &FabricIpfsCreateEblDocxResult{}
}

func (p *FabricIpfsCreateEblDocxResult) InitDefault() {
}

var FabricIpfsCreateEblDocxResult_Success_DEFAULT *CreateEblDocxResp

func (p *FabricIpfsCreateEblDocxResult) GetSuccess() (v *CreateEblDocxResp) {
	if !p.IsSetSuccess() {
		return FabricIpfsCreateEblDocxResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricIpfsCreateEblDocxResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEblDocxResp)
}

var fieldIDToName_FabricIpfsCreateEblDocxResult = map[int16]string{
	0: "success",
}

func (p *FabricIpfsCreateEblDocxResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricIpfsCreateEblDocxResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricIpfsCreateEblDocxResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricIpfsCreateEblDocxResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEblDocxResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricIpfsCreateEblDocxResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEblDocx_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricIpfsCreateEblDocxResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricIpfsCreateEblDocxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsCreateEblDocxResult(%+v)", *p)

}

func (p *FabricIpfsCreateEblDocxResult) DeepEqual(ano *FabricIpfsCreateEblDocxResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricIpfsCreateEblDocxResult) Field0DeepEqual(src *CreateEblDocxResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FabricIpfsSealEblArgs struct {
	Req *SealEblReq `thrift:"req,1" frugal:"1,default,SealEblReq" json:"req"`
}

func NewFabricIpfsSealEblArgs() *FabricIpfsSealEblArgs {
	return &FabricIpfsSealEblArgs{}
}

func (p *FabricIpfsSealEblArgs) InitDefault() {
}

var FabricIpfsSealEblArgs_Req_DEFAULT *SealEblReq

func (p *FabricIpfsSealEblArgs) GetReq() (v *SealEblReq) {
	if !p.IsSetReq() {
		return FabricIpfsSealEblArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FabricIpfsSealEblArgs) SetReq(val *SealEblReq) {
	p.Req = val
}

var fieldIDToName_FabricIpfsSealEblArgs = map[int16]string{
	1: "req",
}

func (p *FabricIpfsSealEblArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FabricIpfsSealEblArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricIpfsSealEblArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricIpfsSealEblArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSealEblReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FabricIpfsSealEblArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SealEbl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricIpfsSealEblArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FabricIpfsSealEblArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsSealEblArgs(%+v)", *p)

}

func (p *FabricIpfsSealEblArgs) DeepEqual(ano *FabricIpfsSealEblArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FabricIpfsSealEblArgs) Field1DeepEqual(src *SealEblReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FabricIpfsSealEblResult struct {
	Success *SealEblResp `thrift:"success,0,optional" frugal:"0,optional,SealEblResp" json:"success,omitempty"`
}

func NewFabricIpfsSealEblResult() *FabricIpfsSealEblResult {
	return &FabricIpfsSealEblResult{}
}

func (p *FabricIpfsSealEblResult) InitDefault() {
}

var FabricIpfsSealEblResult_Success_DEFAULT *SealEblResp

func (p *FabricIpfsSealEblResult) GetSuccess() (v *SealEblResp) {
	if !p.IsSetSuccess() {
		return FabricIpfsSealEblResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FabricIpfsSealEblResult) SetSuccess(x interface{}) {
	p.Success = x.(*SealEblResp)
}

var fieldIDToName_FabricIpfsSealEblResult = map[int16]string{
	0: "success",
}

func (p *FabricIpfsSealEblResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FabricIpfsSealEblResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FabricIpfsSealEblResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FabricIpfsSealEblResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSealEblResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FabricIpfsSealEblResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SealEbl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FabricIpfsSealEblResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FabricIpfsSealEblResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FabricIpfsSealEblResult(%+v)", *p)

}

func (p *FabricIpfsSealEblResult) DeepEqual(ano *FabricIpfsSealEblResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FabricIpfsSealEblResult) Field0DeepEqual(src *SealEblResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
